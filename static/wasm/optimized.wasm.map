{"version":3,"sources":["~lib/rt/common.ts","~lib/rt/tlsf.ts","~lib/rt/tcms.ts","~lib/util/number.ts","~lib/util/math.ts","~lib/util/string.ts","~lib/util/sort.ts","~lib/staticarray.ts","~lib/util/error.ts","~lib/memory.ts","~lib/util/memory.ts","assembly/index.ts","~lib/arraybuffer.ts","~lib/typedarray.ts","~lib/math.ts","~lib/shared/typeinfo.ts","~lib/rt.ts","~lib/array.ts","~lib/number.ts"],"names":[],"mappings":"ozBCiRE,AAAI,AALO,AAFK,KAEO,KAKZ,MAET,AAAK,AAAM,EAAQ,MAInB,AAAK,EAAM,AAAW,AADJ,AAAI,EAAM,sBAE5B,AAAK,AAAO,EAAgB,EAAK,IAAa,KAC9C,EAAM,MAMR,AAAW,OACX,AAAI,AAFO,SAED,EAAY,MACtB,AAAI,IAAM,EAAY,MAGtB,AAAI,AAAS,AAhIX,AAA2B,AAAC,AAAkB,EAAjB,EAAM,IAAyB,GAA5D,MAgIE,KACF,AAxHA,AAA2B,AAAC,AAAkB,EAAjB,EAAM,IAAyB,GAA5D,GACA,KA0HA,AAAI,AAAC,KAEa,AAzJlB,AAA2B,EAAM,GAAjC,QAyJ2B,EAAO,MAjJpC,AACE,EACA,KAkJE,AAAI,AAAC,KAAO,OAAc,EAAO,gBApGrC,AAAgB,SAOZ,AAHY,AADJ,kBAII,KAAhB,EACE,AAAY,EAAM,IAClB,EAAe,AAAY,EAAY,GAAkB,WAE7C,AADJ,AAnHe,EAA2B,GAAkB,KAAe,aAyHrF,AAAI,EAAY,KAEd,AAAe,AADJ,AAhIM,EAA2B,aAmI5C,AAAY,EAAM,IAElB,EAAe,AAAY,EAAW,GAAkB,EAAY,UAItE,EAAe,EAAY,MAS3B,AAAa,EAA2B,GAAiB,KAiBzD,AAAW,AAzFT,AAA2B,AAAC,AAAkB,AA4E5C,AATO,EAAY,KASZ,MAEJ,AAAM,EAAQ,IAMnB,AAFK,EAAM,AAAW,AADJ,AAAI,EAAM,sBAGtB,KADD,AAAO,EAAgB,EAAK,IAAa,MAnFjB,EAAM,IAAyB,GAA5D,QA0FF,OACA,EAAa,KACb,AAAI,IAAM,EAAY,MACtB,AApFE,AAA2B,AAAC,AAAkB,EAAjB,EAAM,IAAyB,GAA5D,GACA,KAsFF,OAAe,EAAK,OACpB,AA3GE,AAA2B,EAAM,GAAjC,KACA,AA0Gc,AApHd,KAoHiC,EAAK,aAoHxC,AAAQ,AAAC,AAAC,QAAgD,KAwB1D,AAAI,AADO,AAtBX,EAAO,KAIP,AAAI,AAFO,AArMT,UA4MA,AAAI,AAAwB,EAAxB,EAAQ,MAaG,EAXb,AAAW,OADX,EAAS,cAaF,OAOX,AADW,EACG,AAAmB,EAAW,GAA9B,AAFC,EAAO,KAEG,OACzB,OACA,OAIA,AADO,AAA2C,EAAzB,EAAQ,WAEjC,AA/NE,EACA,MAgOF,AAAY,EAAM,UAkDlB,AAAI,AAAc,AAFA,IACA,KACe,AAAY,EAAc,KAAe,WAE1E,SACA,AAAQ,WACgB,EAAK,KAC3B,AAAY,KAAN,UACD,AAAc,MAAG,EAAK,KACzB,AAAkB,EAAJ,SAAN,UAD0B,AAAE,WAFF,AAAE,WAY5B,IAAM,IAAU,EAAiB,KAE7C,AAAO,YA1KP,AAAI,EAAO,MAET,AAAK,AAAM,EAAQ,MASnB,AAAK,AAAO,EAJM,EAAO,SAIb,AAHR,AAAQ,EAAM,EAAW,AAAW,KAApC,GAA8C,SAGtB,AADvB,EAAM,AAAW,MACW,IAAa,KAC9C,EAAM,MAOH,AAFO,AAAY,KAAN,MAAa,EAAM,QAc5B,AAtLP,AAA2B,AAAC,AAAkB,AAsLZ,GAtLL,EAAM,IAAyB,GAA5D,OA6KA,AAAK,AADO,KAAc,EAAO,EAAK,SAO7B,AAAkB,AAAS,AAtMpC,AAA2B,AAmMpB,AAAW,KAnMe,GAAjC,OAsMuB,SAAN,iBC3NnB,AAAI,EAAO,SAAgC,eACN,AAAkB,EAAlB,KD2brC,AAAI,AAAC,KAAM,GAC4B,MAhHvC,AAAI,AAgHyC,EAhHlC,SAA+B,iBAmCtC,AAAC,AADO,AAAY,EAzCjB,EAAQ,KACX,GACA,AAAC,AAAC,KAAmC,GAAY,aA6ClC,EAzDnB,AAAI,AAAY,AAJE,IAGiB,AADjB,AAAO,AAAC,AARtB,EAAO,SAED,AAAC,EAAM,EAAW,AAAW,KAAU,GAA/C,OAKM,EAAkB,AAAqD,AA9P7E,MA8P8B,AAAC,EAAsB,GAAM,MAC5B,KAAU,KAAa,aAEzB,KAC7B,AAAI,AAAY,IAAe,QAGvB,EAAM,EAAsB,GAAI,EAAqB,KAkDrD,AAA8B,EAAM,eAI9C,AAAY,EAAM,IA1IlB,AAAI,AADY,AAAC,AAJD,AAgJG,OA5IU,GAAc,KAC1B,KACf,EAAe,AAAQ,EAAY,GAApB,MAGf,AADY,AAA8D,EAA5C,EAA2B,MAC1C,AAAC,EAAY,GAAkB,MAC9C,AAAY,EAAM,KAIlB,EAAe,EAAY,MAC3B,AAlRuB,AAkRd,EAlRyC,GAAkB,KAAe,MAkRnF,KAA0B,SCpPjB,KACX,EAAa,KAhBX,AAAW,AAiBF,SAhBT,EAAqB,AAA0B,EAA1B,MACrB,EAAY,KACZ,AApCA,EAAqB,AAA0B,KAAqB,GAA/C,MAqCrB,EAAY,KAcd,EAAS,AApCkB,AD4dpB,KC5dkC,GAAhC,MAqCT,AAAO,EAAyB,SO9G9B,ECsLA,AAAI,ADtLW,KCwLf,AAAU,EAAM,KAChB,AAAU,AAFC,EAAO,KAED,GAAG,KACpB,AAAI,EAAK,KACT,AAAU,EAAM,KAChB,AAAU,EAAM,KAChB,AAAU,EAAO,GAAG,KACpB,AAAU,EAAO,GAAG,KACpB,AAAI,EAAK,KACT,AAAU,EAAM,KAChB,AAAU,EAAO,GAAG,KACpB,AAAI,EAAK,KAYT,AAAW,AARX,EAAQ,AADO,EAAC,GAAO,QASN,KACjB,AAAW,AAFJ,EAAO,AALd,AADA,EAAK,GACA,QAOa,GAAG,KACrB,AAAI,EAAK,KACT,AAAW,EAAM,KACjB,AAAW,EAAM,KACjB,AAAW,EAAO,GAAI,KACtB,AAAW,EAAO,GAAG,KACrB,AAAI,EAAK,KACT,AAAW,EAAM,KACjB,AAAW,EAAM,KACjB,AAAW,EAAM,KACjB,AAAW,EAAM,KACjB,AAAW,EAAO,GAAI,KACtB,AAAW,EAAO,GAAI,KACtB,AAAW,EAAO,GAAI,KACtB,AAAW,EAAO,GAAI,KAItB,EAAQ,AADJ,AAAM,EAAO,GAAb,QAEJ,EAAK,KAIL,EAAO,EAAK,KACV,AAAW,EAAM,KACjB,AAAW,EAAM,KACjB,AAAW,EAAM,KACjB,AAAW,EAAM,KACjB,EAAK,KACL,EAAQ,eHvKV,AAAI,EAAc,SAA0D,eAG5E,AAAY,AADF,AAAiC,AAD7B,EAAiB,KACqB,MACb,IACvC,OAJA,AAAI,EAAc,SAA0D,eAG5E,AAAY,AADF,AAAiC,AAD7B,EAAiB,KACqB,MACb,IACvC,2CK5EA,AAAI,AAAc,MAAuB,GAArC,KAAqE,cAEzE,AAAY,AADC,AAA8B,AAAS,EAAU,KAAW,MAC/B,IAC1C,EAAc,KACd,EAAiB,KACjB,EAAkB,eVYpB,SACA,SACA,QKwDE,AAAY,AADF,AAAiC,EAAS,MACb,IACvC,OADA,AAAY,AADF,AAAiC,EAAS,MACb,IACvC,aADA,AAAY,AADF,AAAiC,EAAS,MACb,IACvC,8CMuqCM,GAAQ,YAAR,GAAQ,YAAR,GAAQ,YAAR,GAAQ,YAAR,GAAQ,YAAR,GAAQ,YAAR,GAAQ,YAAR,GAAQ,YAAR,GAAQ,YAAR,GAAQ,YAAR,GAAQ,YAAR,GAAQ,YAAR,GAAQ,YAAR,GAAQ,YAAR,GAAQ,YAAR,GAAQ,YAAR,GAAQ,YAAR,GAAQ,YAAR,GAAQ,YAAR,GAAQ,YAAR,GAAQ,QNxqCd,AAAY,AADF,AAAiC,GAAS,MACb,KACvC,OADA,AAAY,AADF,AAAiC,GAAS,MACb,KACvC,OADA,AAAY,AADF,AAAiC,GAAS,MACb,KACvC,OADA,AAAY,AADF,AAAiC,GAAS,MACb,KACvC,OADA,AAAY,AADF,AAAiC,GAAS,MACb,KACvC,OADA,AAAY,AADF,AAAiC,GAAS,MACb,KACvC,OADA,AAAY,AADF,AAAiC,GAAS,MACb,KACvC,OADA,AAAY,AADF,AAAiC,GAAS,MACb,KACvC,OADA,AAAY,AADF,AAAiC,GAAS,MACb,KACvC,OADA,AAAY,AADF,AAAiC,GAAS,MACb,KACvC,OADA,AAAY,AADF,AAAiC,GAAS,MACb,KACvC,OADA,AAAY,AADF,AAAiC,GAAS,MACb,KACvC,OADA,AAAY,AADF,AAAiC,GAAS,MACb,KACvC,OADA,AAAY,AADF,AAAiC,GAAS,MACb,KACvC,OADA,AAAY,AADF,AAAiC,GAAS,MACb,KACvC,OADA,AAAY,AADF,AAAiC,GAAS,MACb,KACvC,OADA,AAAY,AADF,AAAiC,GAAS,MACb,KACvC,WGzFF,EAAO,AAAM,EAAM,KAAZ,KACK,SAAiB,SAA3B,AAAU,EAAQ,AAAS,QAC3B,WAIF,AAAI,AAAC,EAAO,MACV,EAAO,EAAK,KACV,AAAW,EAAW,AAAU,QAChC,AAAW,EAAW,AAAU,QAChC,AAAW,EAAW,AAAU,QAChC,AAAW,EAAW,AAAU,QAChC,EAAO,KAAI,EAAQ,KAAI,EAAK,SAE9B,AAAI,EAAI,KAGN,EAFA,AAAW,EAAU,AAAU,QAC/B,AAAW,EAAU,AAAU,QACpB,EAAO,KAAlB,EAAQ,OAEV,AAAI,EAAI,KAEN,EADA,AAAW,EAAM,AAAU,QAChB,EAAO,KAAlB,EAAQ,OAEV,AAAI,EAAI,KAEN,EADA,AAAW,EAAM,AAAU,QAChB,EAAO,KAAlB,EAAQ,OAEV,AAAI,EAAI,KACN,AAAU,EAAQ,AAAS,WAO/B,AAAI,EAAK,KACP,QAAQ,EAAY,aAGhB,AAAI,AAAU,OACd,AAAU,EAAQ,AAAS,QAC3B,EAAkB,QACR,YAAiB,YAA3B,AAAU,EAAQ,AAAS,QAC3B,EAAK,KACL,EAAO,EAAK,KAEV,AAAW,EAAM,AAAU,AADvB,AAAU,OACkB,GAAf,EAAK,OAEtB,AAAW,EAAU,AAAU,AAD3B,AAAU,OACsB,GAAf,EAAK,OAE1B,AAAW,EAAU,AAAU,AAD3B,AAAU,OACsB,GAAf,EAAK,OAE1B,AAAW,EAAW,AAAU,AAD5B,AAAU,OACuB,GAAf,EAAK,OAC3B,EAAO,KAAI,EAAQ,KAAI,EAAK,YAK9B,AAAI,AAAU,OACd,AAAU,EAAQ,AAAS,QAAjB,SAAiB,SAC3B,EAAkB,QAClB,EAAK,KACL,EAAO,EAAK,KAEV,AAAW,EAAM,AAAU,AADvB,AAAU,OACkB,GAAf,EAAK,OAEtB,AAAW,EAAU,AAAU,AAD3B,AAAU,OACsB,GAAf,EAAK,OAE1B,AAAW,EAAU,AAAU,AAD3B,AAAU,OACsB,GAAf,EAAK,OAE1B,AAAW,EAAW,AAAU,AAD5B,AAAU,OACuB,GAAf,EAAK,OAC3B,EAAO,KAAI,EAAQ,KAAI,EAAK,YAK9B,AAAI,AAAU,OACJ,SAAiB,SAA3B,AAAU,EAAQ,AAAS,QAC3B,EAAK,KACL,EAAO,EAAK,KAEV,AAAW,EAAM,AAAS,AADtB,AAAU,OACiB,GAAd,EAAK,OAEtB,AAAW,EAAU,AAAS,AAD1B,AAAU,OACqB,GAAd,EAAK,OAE1B,AAAW,EAAU,AAAS,AAD1B,AAAU,OACqB,GAAd,EAAK,OAE1B,AAAW,EAAW,AAAS,AAD3B,AAAU,OACsB,GAAd,EAAK,OAC3B,EAAO,KAAI,EAAQ,KAAI,EAAK,WAQpC,AAAI,EAAI,OACN,AAAU,EAAQ,AAAS,QAC3B,EAAkB,QAClB,AAAU,OAAQ,AAAS,sBAC3B,EAAkB,QAClB,AAAU,OAAQ,AAAS,QAAjB,SAAiB,SAC3B,EAAkB,QAClB,AAAU,EAAQ,AAAS,QAAjB,SAAiB,SAC3B,EAAkB,QAClB,AAAU,EAAQ,AAAS,QAAjB,SAAiB,SAC3B,EAAkB,QAClB,AAAU,EAAQ,AAAS,QAAjB,SAAiB,SAC3B,EAAkB,QAClB,AAAU,EAAQ,AAAS,QAAjB,SAAiB,SAC3B,EAAkB,QAClB,AAAU,EAAQ,AAAS,QAAjB,OACV,EAAkB,iBAEpB,AAAI,EAAI,OACN,AAAU,EAAQ,AAAS,QAC3B,EAAkB,QAClB,AAAU,OAAQ,AAAS,sBAC3B,EAAkB,QAClB,AAAU,OAAQ,AAAS,QAAjB,SAAiB,SAC3B,EAAkB,QAClB,AAAU,EAAQ,AAAS,QAAjB,OACV,EAAkB,iBAEpB,AAAI,EAAI,OACN,AAAU,EAAQ,AAAS,QAC3B,EAAkB,QAClB,AAAU,OAAQ,AAAS,oBAC3B,EAAkB,iBAEpB,AAAI,EAAI,KACN,AAAU,EAAQ,AAAS,QAAjB,SAAiB,SAC3B,EAAkB,SAEpB,AAAI,EAAI,KACN,AAAU,EAAQ,AAAS,eMzFoB,AAFhC,EAAiB,OARlC,AAAa,AAAM,EAAM,MACzB,AAAI,AAS8E,MATxE,ENyGV,AAAI,AMzGkB,IAAQ,KN0GJ,AACpB,EAAM,GAAO,GAAK,EAAE,EAAK,OAC3B,AAAO,EAAM,EAAK,OAItB,AAAI,EAAO,KACiB,AACpB,AAAC,EAAM,GAAO,EAAO,MACvB,EAAO,EAAO,KACZ,AAAI,AAAC,KACL,AAAE,OACQ,SAAiB,SAA3B,AAAU,EAAQ,AAAS,YAE7B,EAAO,EAAK,KACV,AAAW,EAAM,AAAU,QAC3B,EAAQ,KACR,EAAQ,KACR,EAAQ,UAId,EAAO,IACK,SAAiB,SAA3B,AAAU,EAAQ,AAAS,QAC3B,AAAE,YAGsB,AACpB,AAAC,EAAM,GAAO,EAAO,MACvB,EAAO,AAAC,EAAO,GAAK,KAClB,AAAI,AAAC,KACL,AAAU,EAAO,AAAE,QAAG,AAAS,EAAM,aAEvC,EAAO,EAAK,KAEV,AAAW,EAAO,AADlB,EAAK,MACgB,AAAU,EAAM,cAI3C,EAAO,IACL,AAAU,EAAO,AAAE,QAAG,AAAS,EAAM,gBMtIzC,AAAa,AADD,AAAM,EAAmB,MACjB,KAEpB,AAAa,EAAO,KACpB,AAAW,EAAO,KAClB,AAAW,EAAO,KAClB,KCgDE,AAAI,AAAc,AAAK,KAAnB,KAAsD,eAO1D,AANoB,KAAkB,EAAgB,UVsBtD,AAAI,AAAc,AAhCX,AAAmB,EAA0B,MAA2B,GAgC3E,KAAqD,eACzD,AAIS,AAA2B,EAAgB,GAA3C,GAA0D,QApBnE,AAAI,AAAc,AAjBX,AAAmB,EAA0B,MAA2B,GAiB3E,KAAqD,eAEnC,AAEd,AAAC,AAHG,AAAQ,AAA2B,EAAgB,GAA3C,WAG+B,eAGnD,KM+pCA,AAAI,AAAc,AAAK,KAAoB,GAAvC,KAA4E,iBAChF,AAAW,KAAkB,EAAgB,IAAiB,QNxpC9D,AAAI,AAAc,AAhCX,AAAmB,EAA0B,MAA2B,GAgC3E,KAAqD,eACzD,AAIS,AAA2B,EAAgB,GAA3C,GAA0D,WIjDrE,AAAQ,IACR,AAAS,IACT,AAAgB,EAAQ,KACxB,AAAa,EAAgB,KAUjB,AAFa,AG+mBvB,AAAyB,AH/mBc,AAJzC,AAD8E,AAAhB,EAAd,MAA9B,AAA8B,EAA7B,AAAa,EAAb,WAKoC,QAAgB,OAIvE,AAAkB,OAA+B,MACjD,AAAkB,OAA+B,MACjD,AAAkB,OAA+B,QAEjC,AAAI,EAAJ,KACd,EAAM,EAAM,EAAsB,UEgM5B,EAAQ,OFjMiB,WAG5B,AAAQ,MAAG,AAAI,EAAJ,KACd,EAAO,EAAK,EJhBZ,AAAY,AADF,AAAiC,EAAS,MACb,IACvC,KIgBK,AAAc,MAAG,EAAU,KAC9B,EAAO,IAAG,EAAW,ME+uBjB,GAAQ,MFhvBqB,WAFJ,WAM5B,AAAQ,MAAG,AAAI,EAAJ,KACd,EAAc,EAAK,AAA4B,MAC1C,AAAc,MAAG,EAAU,KAC9B,EAAc,IAAG,EAAW,MEwCxB,GAAQ,MFzCqB,WAFJ,WAOjC,AAA6B,UAC7B,AAA6B,UAE7B,AAA6B,UAC7B,AAA6B,UAE7B,AAA8B,WAC9B,AAA6B,WAE7B,AAAuB,WACvB,AAAyB,WAEzB,AAA6B,WAC7B,AAA+B,WAE/B,AAA2B,WAC3B,AAA6B,WAE7B,AAAwB,WACxB,AAA0B,WAE1B,AAAyB,WACzB,AAA2B,WAC3B,AAA4B,WAE5B,AAAuB,WACvB,AAAyB,WAEzB,AAA0B,WAC1B,AAAwB,WAExB,AAA8B,WAEzB,AAAQ,MAAG,EAAI,MAElB,EAAiB,EAAK,AAAM,EAAqB,OACjD,EAAiB,EAAK,AAAM,EAAqB,OAEjD,EAAiB,EAAK,AAAM,EAAqB,OACjD,EAAiB,EAAK,AAAM,EAAqB,OACjD,EAAiB,EAAK,AAAM,EAAqB,OACjD,EAAkB,EAAK,AAAM,EAAsB,OAEnD,EAAW,EAAK,AAAM,EAAe,OACrC,EAAa,EAAK,AAAM,EAAiB,OAEzC,EAAiB,EAAK,AAAM,EAAqB,OACjD,EAAmB,EAAK,AAAM,EAAuB,OAErD,EAAe,EAAK,AAAM,EAAmB,OAC7C,EAAiB,EAAK,AAAM,EAAqB,OAEjD,EAAY,EAAK,AAAM,EAAgB,OACvC,EAAc,EAAK,AAAM,EAAkB,OAE3C,EAAa,EAAK,AAAM,EAAiB,OACzC,EAAe,EAAK,AAAM,EAAmB,OAC7C,EAAgB,EAAK,AAAM,EAAoB,OAE/C,EAAW,EAAK,AAAM,EAAe,OACrC,EAAa,EAAK,AAAM,EAAiB,OAEzC,EAAc,EAAK,AAAM,EAAkB,OAC3C,EAAY,EAAK,AAAM,EAAgB,OAEvC,EAAe,EAAK,EAAiB,MACrC,EAAkB,EAAK,EAAsB,MAE7C,EAAY,EAAK,SAAiwO,MAClxO,EAAe,EAAK,SAAiwO,MACrxO,EAAgB,EAAK,SAAiwO,MACtxO,EAAe,EAAK,SAAiwO,MAErxO,EAAoB,EAAK,SAAiwO,MAC1xO,EAAoB,EAAK,SAAiwO,MAC1xO,EAAiB,EAAQ,SAAiwO,MAC1xO,EAAoB,EAAK,SAAiwO,MAC1xO,EAAiB,EAAQ,SAAiwO,MAE1xO,EAAsB,EAAK,SAAiwO,MAC5xO,EAAsB,EAAK,SAAiwO,MAC5xO,EAAmB,EAAK,SAAiwO,MACzxO,EAAsB,EAAK,SAAiwO,MAC5xO,EAAmB,EAAK,SAAiwO,MAEzxO,EAAkB,EAAK,SAAiwO,MApDjwO,cAi8BzB,AAAO,AAAgB,EAAO,IAAW,OAAwB,AC7kClD,AD6kCkD,EAAO,IAAW,SC7kCnD,AAAkB,ULqGhD,AAAI,AAAc,AAjBX,AAAmB,EAA0B,MAA2B,GAiB3E,KAAqD,eAOzD,AANoB,AAA2B,EAAgB,GAA3C,SM6DpB,AAAI,AAAc,AAAK,KAAnB,KAAyD,gBAC7D,AAAU,AAAiB,EAAjB,MAA+B,eF2d3B,EAAI,KAClB,EAAW,EAAK,AAAyC,OACzD,AAA2B,EAAK,KAE3B,AAAiB,MAAG,EAAa,MACpC,EAAW,IAAG,EAAc,AAA4B,MAExD,EAAW,IAAG,IAAY,EAAK,MEvf3B,GAAQ,MFwfZ,EAAW,IAAG,IAAY,EAAK,MExf3B,GAAQ,MFyfZ,EAAW,IAAG,IAAY,EAAK,MEzf3B,GAAQ,MF0fZ,AAAuB,AGyDzB,AAAyB,AHzDiB,GAAc,IAAe,UAAU,QAG/E,EJ7jBF,AAAY,AADF,AAAiC,EAAS,MACb,IACvC,KI4jBQ,EAAK,KACX,EAAM,EAAK,KACX,EAAM,EAAK,KAEX,AAAI,EAAc,KACX,AAAc,MAAG,EAAU,KAE9B,AAAoB,AAAY,AAAU,AADtB,AAAe,EAAG,SAClB,KACpB,AAAoB,AAAY,AAAU,MAAtB,KACpB,AAAgB,IAChB,AAAgB,IAChB,AAAiB,IACjB,AAAiB,KACZ,AAAa,MAAG,EAAK,MAEpB,AAAQ,EAAR,AADI,AAAU,AAAc,EAAI,GAAlB,MAAlB,QAD6B,AAGnB,cAKP,AAAa,OAAK,EAAK,KAEtB,AAAQ,EAAR,AADI,AAAU,AAAc,EAAI,GAAlB,MAAlB,QAD6B,AAGnB,cAKZ,EAAM,AAAI,EAAU,KAAK,IACzB,EAAM,AAAI,EAAJ,GAAmB,IAzBQ,YA6BrC,AAAI,IACF,AAAW,EAAM,MACV,EAAM,IAAK,KAAO,EAAM,OAG/B,EAAM,IAFC,EAAM,IAAK,KAEP,AAFc,EAAM,YAG/B,EAAM,EAAK,IACX,EAAM,EAAK,IAEX,AAAW,EAAM,MACV,EAAM,IAAK,KAAO,EAAM,OAG/B,EAAM,IAFC,EAAM,IAAK,KAEP,AAFc,EAAM,YAG/B,EAAM,EAAK,IACX,EAAM,EAAK,KAIb,AAAqB,SAAO,AJjlBf,KIilBqC,AJjlBrC,UIilB4D,YACzE,AAAqB,SAAO,AJllBf,KIklBqC,AJllBrC,UIklB4D,YACzE,AAAqB,SAAO,AJnlBf,KImlBqC,AJnlBrC,UImlB4D,YAWpE,AAAY,MAAG,EAAQ,MAU1B,AAAU,AJxmBC,EAA2B,EAAgB,WIqnBtD,AAAS,AA5KN,KAAK,SAgKE,IAhKU,AAwKpB,AAAyB,SAJzB,AAAS,AAAO,EAAQ,IAAU,KAI9B,EAAS,WAxKW,MA6KxB,AAAS,AA7KN,EAAK,SAAM,IAAM,AAyKpB,AAAyB,SAJzB,AAAS,AAAO,EAAQ,IAAU,KAI9B,EAAS,WAzKW,MA8LxB,EAAW,IAAG,IAAY,IAAG,EAAS,AAJ7B,EAtLf,AAAyB,SAArB,AADgB,EAAK,SAAM,AAuLY,GAAmB,cAvL1B,AAH3B,EAAK,SAAM,IAAM,AAuKhB,AAJK,AAAO,EAAQ,IAAU,KAIrB,YAAY,aAvKD,IAGU,MAC3B,aACb,AAAuB,SAAnB,EAAS,aACb,UAyLM,EAAW,IAAG,IAAY,IAAG,EAAS,AAJ7B,EAvLf,AAAyB,SAArB,AADgB,EAAK,SAAM,IAAK,EAAI,MAC3B,aACb,AAAuB,SAAnB,EAAS,aACb,UA0LM,EAAW,IAAG,IAAY,IAAG,EAAS,AAJ7B,EAxLf,AAAyB,SAArB,AADgB,EAAK,SAAM,IAAK,EAAI,MAC3B,aACb,AAAuB,SAAnB,EAAS,aACb,UA+IqC,WA3EQ,WAJtB,qBGiiBrB,AAAI,AAAiB,GAAM,YACzB,AAAI,EAAK,uBACT,AAAI,EAAK,uBAOT,AAAI,EAAK,uBACT,AAAI,EAAK,uBACT,AAAI,EAAK,0BV4oBb,AAAqC,AAAC,AAF3B,AAFF,AAAiB,AUroBJ,OVuoBL,KAE4B,IAAS,IAAS,MAK7D,AAAI,AAAW,oBACc,SAAvB,AAAC,EAAM,OAEkE,AAAI,EAAJ,UAAzE,AAAmC,EAAM,GAAK,aAEU,SAAxD,AAAoC,AAAE,EAAM,QACzC,EAAI,MAgBb,AAAI,AAAC,EAAO,IAAS,IAAS,MAGS,SAAjC,AAAC,EAAO,IAAS,OACd,AAA8C,SAAW,SAAzD,AAA8B,EAAO,WAxJhD,AAAU,AADA,AAAa,AAbE,OAaf,YACK,AAJL,AAFA,AATK,AAAU,SASF,YAEP,AADN,AAAM,EAAN,kBAWV,AAAU,EAAI,AADJ,AAAK,EAAL,eAcV,AAAW,AARC,EAAM,AADN,EAAM,AADN,AAAM,EAAN,kBAUI,AADP,EAAK,AADL,AAhBc,AAdE,OAcf,UAgBK,AAfL,EAAK,GAAK,IAeC,AALT,EAAO,EAAK,KAKG,AAJf,EAAK,GAAK,IAIW,AADxB,AATC,EAAI,GASE,AAAK,EAAI,UAAT,UAAc,EAAO,AAAK,EAAI,UAAT,UAAc,EAAO,AAAK,EAAI,UAAT,sBAGtC,KA6JF,AAHZ,AAJI,AAAiB,EAAK,SAIpB,AAFF,AAAiB,AAAiB,GAAM,YAK3B,AAFjB,AAJI,EAAI,GAIF,GAAM,EAAI,AAFZ,EAAK,GAAM,OArHrB,AAAI,AADK,AAAM,AADN,AAAiB,KACL,IAAM,MACd,IAAS,KAWpB,EAPS,SAHL,EAAS,IAAS,UAKtB,AAEoB,SAAmB,SAA9B,EAAM,KAFX,EAAU,OAKL,MA8BX,AAAQ,AAAU,AAFgC,AAHnC,AAPT,AAAiB,AADjB,AAZQ,EAAV,UAYM,eAQU,IAAW,IAG0B,GAAvB,UAE+C,AAJ1E,EAAoB,MAO3B,AAAK,AAVL,AAFI,EAAI,AAFR,EAAM,YAEO,WAAY,EAAK,WAEzB,KAUI,KAGT,AAAM,AAR4B,KAQrB,GAAI,EAAM,AAAK,EAAI,UAAT,YAAe,EAAK,GAAM,AAAK,EAAI,UAAT,cACjD,AAAI,OAptCJ,AAAI,AAAE,EAAK,UAIF,AAAY,AADX,AAAiB,AADzB,EAAS,cAEkB,EAAQ,IAA5B,aAoBT,AAbA,AAAI,AAAI,AADA,AADA,AAAiB,AAFzB,EAAS,gBAGO,EAAQ,OACX,YAWX,AAAI,AAFC,AAAC,AAFG,AAFC,AAAS,SAAK,KAET,KAEJ,AADN,EAAM,GAAK,GAAI,AAFX,EAAQ,GAAI,EAAQ,MAGZ,KAER,YAAS,AAAiB,EAAQ,qBAElC,cAgsCX,AAAO,AAHC,AAAiB,KAGV,EAAQ,gBO79BP,EAAI,MAClB,EAAa,EAAK,AAA4B,OAEX,AAAC,AAAS,AAD7C,AAA2B,AAAO,EAAP,UACmC,aGlZ9D,IHoZK,AAAU,MAAG,EAAM,MACtB,EAAa,IAAG,EAAO,MEnsBnB,GAAQ,MFosBP,AAAY,MAAG,EAAQ,MAC1B,AAAkB,KAGlB,AAAI,EAAgB,KAKlB,AAAuB,SAAI,AADJ,AJ3uBd,AAA2B,EAAgB,KAA3C,aIsvBA,EAA4B,AARV,AJ9uBlB,IAA2B,AI+uBjC,EAAY,QACZ,EAAY,QJhvBqC,OIgvB1B,UAMyB,AALxB,AJjvBlB,AAA2B,AIkvBjC,KACA,IJnvBiD,GAA3C,MImvBiB,aAtSlC,AAAyB,SAArB,AADgB,EAAK,SAAM,IAAK,AAySnB,EAAe,GAAsB,UAAK,AAb1B,AJxuBhB,AAA2B,EAA3B,MIwuBwD,UAaA,AAZxC,EAAqC,aA7R9B,MAC3B,aACb,AAAuB,SAAnB,EAAS,aACb,IAySa,AAAI,EAAgB,KAQhB,EAnTjB,AAAyB,SAArB,AADgB,KAAK,SAAM,AAoTc,AJhwB5B,AAA2B,EAAgB,KAA3C,UI4cmB,AAmTnB,EAAe,GAAsB,UAAI,AJ/vBzC,AAA2B,EAA3B,OI+vBqD,AJ/vBrD,EAA2B,EAAgB,SI4cpB,MAC3B,aACb,AAAuB,SAAnB,EAAS,aACb,UAoTM,EAAa,IAAG,IAAK,EAAS,SAhCC,WAFN,WALN,qBA8CT,EAAI,MAClB,EAAY,EAAK,AAA4B,OAEV,AAAC,AGhcZ,AH+bxB,AAA0B,AAAO,EAAP,QACmC,aAExD,AAAU,MAAG,EAAM,MACtB,EAAY,IAAG,EAAO,MEjvBlB,GAAQ,MFmvBP,AAAY,MAAG,EAAQ,MAC1B,AAAkB,KAGlB,AAAI,EAAe,KAiBR,EA1VjB,AAAyB,SAArB,AADgB,KAAK,SAAM,AA2Vc,AJvyB5B,AAA2B,EAAgB,KAA3C,UI4cmB,AA0VnB,EAAe,GAAqB,UAAI,AJtyBxC,AAA2B,EAA3B,OIsyBoD,AJtyBpD,EAA2B,EAAgB,SI4cpB,MAC3B,aACb,AAAuB,SAAnB,EAAS,aACb,IAiWa,AAAI,EAAe,KAKxB,AAAuB,SAAI,AADJ,AJpzBd,AAA2B,EAAgB,KAA3C,aI+zBA,EAA4B,AARV,AJvzBlB,IAA2B,AIwzBjC,EAAY,QACZ,EAAY,QJzzBqC,OIyzB1B,UAMyB,AALxB,AJ1zBlB,AAA2B,AI2zBjC,KACA,IJ5zBiD,GAA3C,MI4zBiB,aA/WlC,AAAyB,SAArB,AADgB,EAAK,SAAM,IAAK,AAkXnB,EAAe,GAAqB,UAAK,AAbzB,AJjzBhB,AAA2B,EAA3B,MIizB0D,UAaH,AAZvC,EAAuC,aAtWhC,MAC3B,aACb,AAAuB,SAAnB,EAAS,aACb,UAoXM,EAAY,IAAG,IAAK,EAAS,SAjDE,WAHN,WALN,mBAprBzB,IA0jBgB,EAAI,MAClB,EAAW,EAAK,MElnBV,GAAQ,MFmnBd,AAAyB,AAAO,EAAP,MAEpB,AAAY,MAAG,EAAQ,MAItB,EAAc,KAGhB,AAAU,AJ3pBC,EAA2B,AI0pBxB,GAAM,KJ1pBkC,SI4pB7C,SAAM,GAAQ,AAAY,EAAC,IAAc,eAGlD,AAAU,AJ/pBC,EAA2B,EAAgB,SIgqB7C,GAAQ,AAAY,GAAc,gBAQ7C,EAAW,IAAG,EAAS,EA3NF,SAArB,AADgB,GAAK,SAAM,IAAK,EAAI,MAC3B,aACU,SAAnB,EAAS,aACb,UAqMmC,WAJV,iBA8BT,EAAI,MAClB,EAAe,EAAK,MEhpBd,GAAQ,MFspBoB,AAAS,AAL3C,AAAwB,AAAO,EAAP,UAKiC,aACzD,AAAuB,AAAY,AAAC,EAAuB,cAMR,AAJhB,YAGK,AJ3rBzB,EAA2B,AI2rBqC,EAAuB,WJ3rB5C,QI8rBrD,AAAY,MAAG,EAAQ,MAE1B,AAAkB,KAEd,EAAa,OArPI,SAArB,AADgB,GAAK,SAAM,AA6PY,AJzsB1B,EAA2B,AIssBxB,GAAM,KJtsBkC,WI4cxB,AA4PrB,SAAM,GAAQ,IA5PW,MAC3B,aACU,SAAnB,EAAS,aACb,IA2Pe,EAAa,OA7PH,SAArB,AADgB,AAoQL,KApQU,SAAM,AAqQY,AJjtB1B,EAA2B,EAAgB,WI4cxB,EAoQb,GApQiB,MAC3B,aACU,SAAnB,EAAS,aACb,UAuQI,EAAe,IAAG,EAAS,AApB3B,SAJ+B,WAhBV,WArlBzB,EACA,IAkvBoB,EAAQ,MAE1B,EAAiB,EAAS,AAA4B,OAItD,AAAkB,AAAC,AAAM,AALK,EAAP,OAKJ,UAAoB,eAElC,AAAU,MAAG,EAAM,MACtB,EAAiB,IAAO,EAAO,MEtzB3B,GAAQ,MFuzBP,AAAY,MAAG,EAAQ,MAM1B,EAAiB,IAAO,IAAK,EAAS,EA/YnB,SAArB,AADgB,GAAK,UAAW,AA4YrB,IAAY,AAAO,EAAQ,KAAO,OA3YpC,aACU,SAAnB,EAAS,aACb,MAuYqC,WAFN,WARE,cA8IjC,AAAO,AAAgB,EAAM,OAAiB,AC1kC/B,AD0kC+B,EAAM,SC1kCpB,AAAkB,aD6QlD,AAAqB,AAAc,MACnC,AAAqB,AAAc,EAAe,OAKlD,AAA4B,AAAgB,EAAW,AAHjC,QAG0C,AAF1C,EAAa,OAEuC,OAAa,ACnRxE,ADmRwE,EAAW,IAAS,IAAU,SCnRrF,AAAkB,SDoRlD,AAA4B,AAAgB,EAAW,IAAS,IAAU,OAAa,ACpRxE,ADoRwE,EAAW,IAAS,IAAU,SCpRrF,AAAkB,SDqRlD,AAA4B,AAAgB,EAAW,IAAS,IAAU,OAAa,ACrRxE,ADqRwE,EAAW,IAAS,IAAU,SCrRrF,AAAkB,WDuRlC,AAAI,EAAJ,KAMd,AAAQ,AAAS,AAAiB,AAJjB,AADe,EAAf,QAKA,QACjB,AAAQ,AAAS,AAAiB,AAJjB,KAIA,QAEjB,AAAU,EAAe,KAAG,AAJX,AAAiB,AAJjB,KAIA,SAKjB,AAAU,EAAsB,KAChC,AAAU,EAAsB,KAXF,EAAK,eA4rBzB,MAqFU,EAAU,KAE9B,AAA2B,AADP,AAAe,EAAO,MACA,QACX,EAAI,KACjC,AAAW,EAAG,KADkC,EAAK,SAHtB,WApFnC,AAAoB,AAAc,MAClC,AAAsB,AAAe,EAAO,MAC5C,AAAsB,AAAe,EAAO,MAC5C,AAAsB,AAAe,EAAO,MAC5C,AAAgB,AAAe,EAAf,OAIU,AAAI,EAAJ,KAExB,AAAc,AAAgB,AAAI,AAAS,KAAb,GAAhB,KACd,AAAc,AAAgB,AAAI,AAAS,KAAb,GAAhB,KAEd,AAAW,AAJG,AAAgB,AAAI,AAAS,KAAb,GAAhB,KAIU,AAAU,KAAe,MACjD,AAAW,EAAa,AAAU,KAAe,MACjD,AAAW,EAAa,AAAU,KAAe,MAPZ,EAAK,YAoH5C,AAAO,AAAgB,EAAc,IAAW,OAAwB,AChlCzD,ADglCyD,EAAc,IAAW,SChlCjE,AAAkB,iBDw+B/B,MA0EG,EAAU,KAE9B,AAA2B,AADA,AAAsB,EAAO,MACP,QACX,EAAI,KACxC,AAAW,EAAG,KADyC,WAHxB,aAzEhB,EAAO,KACxB,AAAoB,AAAe,EAAO,MAE1C,AAA2B,AAAsB,EAAO,MAExD,AAAqB,IAChB,AAAQ,MAAG,EAAI,MAEd,AAAQ,EAAR,AADU,AAAU,AAAc,EAAI,GAAlB,WACxB,AAAmC,KAFZ,WAIzB,AAA0B,KAAQ,MAE7B,AAAQ,MAAG,EAAI,MAMlB,AAAU,AAAqB,EAArB,GAAwB,AAH9B,AAAa,AADT,AADmB,AAAc,EAAI,GAAlB,OACX,MACS,YAArB,EAAQ,aACF,iBAJa,WAZE,iBAjsB7B,AAAwB,AADE,AAAc,MACI,KAC5C,AAAmB,AAAc,MAUjC,AAAsB,AAAgB,EAAW,AAJ5B,AAAM,EAAN,WAI+C,ACnTrD,ADmTqD,EAAW,SCnT/C,AAAkB,SDoTlD,AAAsB,AAAgB,EAAW,AAJ5B,AAAM,EAAN,WAI+C,ACpTrD,ADoTqD,EAAW,SCpT/C,AAAkB,SDqTlD,AAAsB,AAAgB,EAAW,AAJ5B,AAAM,EAAN,WAI+C,ACrTrD,ADqTqD,EAAW,SCrT/C,AAAkB,WDuTlB,EAAI,KAMlC,AAAQ,AAAS,AAAW,AAJX,KAIA,QACjB,AAAQ,AAAS,AAAW,AAJX,KAIA,QAEjB,AAAU,EAAc,AAJP,AAAW,AAJX,KAIA,SAKjB,AAAU,EAAkB,KAC5B,AAAU,EAAkB,KAXuB,EAAK,KAAG,EAAgB,eAiB7E,AAAwB,AADE,AAAc,MACI,KAC5C,AAAmB,AAAc,MAgBjC,AAA0B,AAAM,EAAN,MAC1B,AAAyB,AAAM,EAAN,MAEzB,AAAwB,AAAgB,EAAe,AAJhC,AAAM,EAAN,WAIqD,AC5V7D,AD4V6D,EAAe,SC5V3D,AAAkB,WD+VlB,EAAI,KAMlC,AAAQ,AAAS,AAAa,AALb,KAKA,QACjB,AAAQ,AAAS,AAAa,AALb,KAKA,QACjB,AAAQ,AAAS,AAAa,AALb,KAKA,QAMjB,AAAI,EAAe,KAmBjB,EAFA,AAAQ,AEhOM,AAAiB,EAAjB,AN9CD,EAA2B,EAAgB,OAAhB,AI4QlC,AAqNI,GAAI,GAAkB,GAAI,IAAkB,GAAI,KJjeF,kBI+QxD,AAAQ,AEjOM,EAAiB,QFkOvB,AElOM,EAAiB,UFoOjC,AAAI,EAAe,KAIjB,EAFA,AAAQ,AEtOM,AAAiB,EAAjB,AN9CD,EAA2B,EAAgB,OAAhB,AImRlC,AA8MI,GAAI,GAAkB,GAAI,IAAkB,GAAI,KJjeF,kBIqRxD,AAAQ,AEvOM,EAAiB,QFwOvB,AExOM,EAAiB,UF4OjC,AAAI,EAAc,KAKhB,EAFA,AAAQ,AE/OM,AAAiB,EAAjB,AN9CD,EAA2B,EAAgB,OAAhB,AI2RlC,AAsMI,GAAI,GAAkB,GAAI,IAAkB,GAAI,KJjeF,kBI8RxD,AAAQ,AEhPM,EAAiB,QFiPvB,AEjPM,EAAiB,UFmPjC,AAAI,EAAc,KAIhB,EAFA,AAAQ,AErPM,AAAiB,EAAjB,AN9CD,EAA2B,EAAgB,OAAhB,AIkSlC,AA+LI,GAAI,GAAkB,GAAI,IAAkB,GAAI,KJjeF,kBIoSxD,AAAQ,AEtPM,EAAiB,QFuPvB,AEvPM,EAAiB,UFsRjC,AAAU,EAAc,KACxB,AAAU,EAAkB,KAC5B,AAAU,EAAkB,KAvFuB,EAAK,KAAG,EAAgB,eA+FnD,AAAc,MAExC,AAAmB,AAAc,MAQjC,AAAyB,EAAY,QAErB,AAAI,EAAJ,KACN,AAAS,AAAoB,EAApB,UAOjB,AAAQ,AEpTQ,AAAiB,AF8SzB,AAAS,OE9SD,AN9CD,EAA2B,EAAgB,OAAhB,AI+VpC,AAkIM,GAAI,GAAkB,GAAI,IAAkB,AApIhD,AAAS,QAoI2C,KJjeF,kBImW1D,AAAQ,AErTQ,AAAiB,EAAjB,QFuThB,AAAU,AAAe,EAAf,KAAkB,AEvTZ,AAAiB,EAAjB,SFwThB,AAAU,EAAsB,KAChC,AAAU,EAAsB,KAbF,EAAK,YAjPrC,AAAI,IACF,AAAkB,EAAa,EAAO,MAEtC,AAAgB,IAChB,AAAuB,IAFR,GAGV,AAAK,MAMZ,AAAI,IACF,AAAa,EAAU,EAAU,EAAU,IAE3C,AAAgB,IAChB,AAAuB,IAFR,GAGV,EACU,EADL,MAMZ,AAAI,IAEF,AAAgB,EAAW,EAAiB,EAAc,IAE1D,AAAgB,IAChB,AAAuB,IAFR,GAGV,EACU,EADL,MAKZ,AAAI,IACF,AAAW,EAAW,IAEtB,AAAgB,IAChB,AAAuB,iBAmOzB,AAAwB,AADE,AAAc,MACI,KAEvC,AAAQ,MAAmB,EAAI,KAClC,EAAQ,AAAS,SACjB,EAAQ,AAAS,SACjB,EAAQ,AAAS,SAHkC,EAAK,SAS1D,AAAqB,KAAQ,AAJV,AAAI,EAAO,WAK9B,AAAqB,KAAQ,AAJV,AAAI,EAAO,QAK9B,AAAqB,KAAQ,AAJV,AAAI,EAAO,QAa9B,AAAe,GAAgB,QAM/B,AAAqB,AAAc,QAEnB,AAAI,EAAJ,KACd,AAAI,AAAS,EAAoB,UACjC,AAAI,AAAS,OACb,AAAI,AAAS,OAEb,AAAI,EAAU,QEkwBG,KAAkB,EAAgB,KAAlC,KAAkB,EAAgB,UF7vBnD,AAAI,EAAU,QE6vBG,KAAkB,EAAgB,KAAlC,KAAkB,EAAgB,UFxvBnD,AAAI,EAAU,QEwvBG,KAAkB,EAAgB,KAAlC,KAAkB,EAAgB,UF9uBnD,AAAO,EAAU,MACjB,AAAO,EAAU,MAsBjB,AAAU,EAAe,KAAG,AAJrB,AAWA,KAAK,KAAM,AAXS,EAAI,OAWN,AA3BrB,AAJG,EAAU,KAIN,QACF,MACF,AACE,OADE,EAAO,QAyBW,QAN7B,AAAU,EAAsB,AAJzB,AAUA,GAAK,KAAM,AAVS,EAAI,OAUN,AAtBzB,AACS,KACF,AACE,OADE,EAAO,OAFd,EAAO,OAsBkB,QAL7B,AAAU,EAAsB,AAJzB,AASA,GAAK,KAAM,AATS,EAAI,OASN,AAjBzB,AACS,KACF,AACE,OADE,EAAO,OAFd,EAAO,OAiBkB,QAvDC,EAAK,eT3VrC,AAAI,IAEF,AAAI,AAhGO,AA+FD,AAAmB,EAAM,QA/FH,GAgGf,KACC,gBAElB,EAnFA,AAAI,AADO,AAzBe,KAAqB,QA2B3B,SAKpB,EAAY,AAFD,UAGX,AA5BA,EAAqB,AAA0B,KAAqB,GAA/C,OAiCrB,AAAW,AAwEA,SAvEX,EAAqB,EAA0B,MAC/C,EAAY,KACZ,AApCA,EAAqB,AAA0B,KAAqB,GAA/C,MAqCrB,EAAY,MAsEd,QAMA,AAAI,AAAC,OAEL,AAAI,AA9GS,AA6GH,AAAmB,EAAM,QA7GD,GA8GjB,KACC,gBAElB,EAjGE,AAAI,AADO,AAzBe,KAAqB,QA2B3B,SAKpB,EAAY,AAFD,UAGX,AA5BA,EAAqB,AAA0B,KAAqB,GAA/C,OAiCrB,AAAW,AAsFF,SArFT,EAAqB,AAA0B,EAA1B,MACrB,EAAY,KACZ,AApCA,EAAqB,AAA0B,KAAqB,GAA/C,MAqCrB,EAAY,WA2Fd,EAIA,AAAW,AAzIiB,AAwInB,OAxIwC,KA0IjD,EAAO,EAAQ,KAhIF,MAkIX,AAAgB,EAA0B,KAC1C,AAAO,AA7ImB,KAAqB,SAiJjD,AAAY,AAAK,KAEjB,AAAO,AAnJqB,AAkJnB,OAlJwC,KAoJjD,EAAO,EAAQ,KA1IF,MA4IX,AAAgB,EAA0B,KAC1C,AAAO,AAvJmB,KAAqB,SA4JjD,AAAO,AA5JqB,AA2JjB,OA3JsC,KA6JjD,EAAO,EAAQ,KAEb,AAAc,AArJH,KAVoC,KAgK/C,AAAI,EAA0B,OAC5B,OACA,QAEA,EAAS,AAhJc,KAAc,GAAhC,MAkJL,AD0VA,AC1VO,EAA0B,KD0V3B,OACV,AAAI,AAAC,KAAM,GA7BX,AAAY,AAAkB,EAAM,KAEpB,EAAM,KAApB,MACE,OAEJ,IAXe,KAAe,MAC9B,AAAY,EAAM,MCvThB,AAAO,QAET,EAAqB,KACrB,EAAY,KAGZ,AAAY,IACZ,AAAU,IACV,AAAQ,gBApFH,IAGL,AAAI,AAAa,EAAb,AArFS,AAmFH,AAAmB,EAAM,QAnFD,MAsFhC,EAtEA,AAAI,AADO,AAzBe,KAAqB,QA2B3B,SAKpB,EAAY,AAFD,UAGX,AA5BA,EAAqB,AAA0B,KAAqB,GAA/C,OAiCrB,AAAW,AA2DA,SA1DX,EAAqB,AAA0B,AA0DtB,GA1DJ,MACrB,EAAY,KACZ,AApCA,EAAqB,AAA0B,KAAqB,GAA/C,MAqCrB,EAAY,cAkDT,IAGL,AAAI,AAAa,EAAb,AArFS,AAmFH,AAAmB,EAAM,QAnFD,MAsFhC,EAtEA,AAAI,AADO,AAzBe,KAAqB,QA2B3B,SAKpB,EAAY,AAFD,UAGX,AA5BA,EAAqB,AAA0B,KAAqB,GAA/C,OAiCrB,AAAW,AA2DA,SA1DX,EAAqB,AAA0B,AA0DtB,GA1DJ,MACrB,EAAY,KACZ,AApCA,EAAqB,AAA0B,KAAqB,GAA/C,MAqCrB,EAAY,cAkDT,IAGL,AAAI,AAAa,EAAb,AArFS,AAmFH,AAAmB,EAAM,QAnFD,MAsFhC,EAtEA,AAAI,AADO,AAzBe,KAAqB,QA2B3B,SAKpB,EAAY,AAFD,UAGX,AA5BA,EAAqB,AAA0B,KAAqB,GAA/C,OAiCrB,AAAW,AA2DA,SA1DX,EAAqB,AAA0B,AA0DtB,GA1DJ,MACrB,EAAY,KACZ,AApCA,EAAqB,AAA0B,KAAqB,GAA/C,MAqCrB,EAAY,cAkDT,IAGL,AAAI,AAAa,EAAb,AArFS,AAmFH,AAAmB,EAAM,QAnFD,MAsFhC,EAtEA,AAAI,AADO,AAzBe,KAAqB,QA2B3B,SAKpB,EAAY,AAFD,UAGX,AA5BA,EAAqB,AAA0B,KAAqB,GAA/C,OAiCrB,AAAW,AA2DA,SA1DX,EAAqB,AAA0B,AA0DtB,GA1DJ,MACrB,EAAY,KACZ,AApCA,EAAqB,AAA0B,KAAqB,GAA/C,MAqCrB,EAAY,cAkDT,IAGL,AAAI,AAAa,EAAb,AArFS,AAmFH,AAAmB,EAAM,QAnFD,MAsFhC,EAtEA,AAAI,AADO,AAzBe,KAAqB,QA2B3B,SAKpB,EAAY,AAFD,UAGX,AA5BA,EAAqB,AAA0B,KAAqB,GAA/C,OAiCrB,AAAW,AA2DA,SA1DX,EAAqB,AAA0B,AA0DtB,GA1DJ,MACrB,EAAY,KACZ,AApCA,EAAqB,AAA0B,KAAqB,GAA/C,MAqCrB,EAAY,cAkDT,IAGL,AAAI,AAAa,EAAb,AArFS,AAmFH,AAAmB,EAAM,QAnFD,MAsFhC,EAtEA,AAAI,AADO,AAzBe,KAAqB,QA2B3B,SAKpB,EAAY,AAFD,UAGX,AA5BA,EAAqB,AAA0B,KAAqB,GAA/C,OAiCrB,AAAW,AA2DA,SA1DX,EAAqB,AAA0B,AA0DtB,GA1DJ,MACrB,EAAY,KACZ,AApCA,EAAqB,AAA0B,KAAqB,GAA/C,MAqCrB,EAAY,cAkDT,IAGL,AAAI,AAAa,EAAb,AArFS,AAmFH,AAAmB,EAAM,QAnFD,MAsFhC,EAtEA,AAAI,AADO,AAzBe,KAAqB,QA2B3B,SAKpB,EAAY,AAFD,UAGX,AA5BA,EAAqB,AAA0B,KAAqB,GAA/C,OAiCrB,AAAW,AA2DA,SA1DX,EAAqB,AAA0B,AA0DtB,GA1DJ,MACrB,EAAY,KACZ,AApCA,EAAqB,AAA0B,KAAqB,GAA/C,MAqCrB,EAAY,cAkDT,IAGL,AAAI,AAAa,EAAb,AArFS,AAmFH,AAAmB,EAAM,QAnFD,MAsFhC,EAtEA,AAAI,AADO,AAzBe,KAAqB,QA2B3B,SAKpB,EAAY,AAFD,UAGX,AA5BA,EAAqB,AAA0B,KAAqB,GAA/C,OAiCrB,AAAW,AA2DA,SA1DX,EAAqB,AAA0B,AA0DtB,GA1DJ,MACrB,EAAY,KACZ,AApCA,EAAqB,AAA0B,KAAqB,GAA/C,MAqCrB,EAAY,cAkDT,IAGL,AAAI,AAAa,EAAb,AArFS,AAmFH,AAAmB,EAAM,QAnFD,MAsFhC,EAtEA,AAAI,AADO,AAzBe,KAAqB,QA2B3B,SAKpB,EAAY,AAFD,UAGX,AA5BA,EAAqB,AAA0B,KAAqB,GAA/C,OAiCrB,AAAW,AA2DA,SA1DX,EAAqB,AAA0B,AA0DtB,GA1DJ,MACrB,EAAY,KACZ,AApCA,EAAqB,AAA0B,KAAqB,GAA/C,MAqCrB,EAAY,cAkDT,IAGL,AAAI,AAAa,EAAb,AArFS,AAmFH,AAAmB,EAAM,QAnFD,MAsFhC,EAtEA,AAAI,AADO,AAzBe,KAAqB,QA2B3B,SAKpB,EAAY,AAFD,UAGX,AA5BA,EAAqB,AAA0B,KAAqB,GAA/C,OAiCrB,AAAW,AA2DA,SA1DX,EAAqB,AAA0B,AA0DtB,GA1DJ,MACrB,EAAY,KACZ,AApCA,EAAqB,AAA0B,KAAqB,GAA/C,MAqCrB,EAAY,cAkDT,IAGL,AAAI,AAAa,EAAb,AArFS,AAmFH,AAAmB,EAAM,QAnFD,MAsFhC,EAtEA,AAAI,AADO,AAzBe,KAAqB,QA2B3B,SAKpB,EAAY,AAFD,UAGX,AA5BA,EAAqB,AAA0B,KAAqB,GAA/C,OAiCrB,AAAW,AA2DA,SA1DX,EAAqB,AAA0B,AA0DtB,GA1DJ,MACrB,EAAY,KACZ,AApCA,EAAqB,AAA0B,KAAqB,GAA/C,MAqCrB,EAAY,cAkDT,IAGL,AAAI,AAAa,EAAb,AArFS,AAmFH,AAAmB,EAAM,QAnFD,MAsFhC,EAtEA,AAAI,AADO,AAzBe,KAAqB,QA2B3B,SAKpB,EAAY,AAFD,UAGX,AA5BA,EAAqB,AAA0B,KAAqB,GAA/C,OAiCrB,AAAW,AA2DA,SA1DX,EAAqB,AAA0B,AA0DtB,GA1DJ,MACrB,EAAY,KACZ,AApCA,EAAqB,AAA0B,KAAqB,GAA/C,MAqCrB,EAAY,cAkDT,IAGL,AAAI,AAAa,EAAb,AArFS,AAmFH,AAAmB,EAAM,QAnFD,MAsFhC,EAtEA,AAAI,AADO,AAzBe,KAAqB,QA2B3B,SAKpB,EAAY,AAFD,UAGX,AA5BA,EAAqB,AAA0B,KAAqB,GAA/C,OAiCrB,AAAW,AA2DA,SA1DX,EAAqB,AAA0B,AA0DtB,GA1DJ,MACrB,EAAY,KACZ,AApCA,EAAqB,AAA0B,KAAqB,GAA/C,MAqCrB,EAAY,cAkDT,IAGL,AAAI,AAAa,EAAb,AArFS,AAmFH,AAAmB,EAAM,QAnFD,MAsFhC,EAtEA,AAAI,AADO,AAzBe,KAAqB,QA2B3B,SAKpB,EAAY,AAFD,UAGX,AA5BA,EAAqB,AAA0B,KAAqB,GAA/C,OAiCrB,AAAW,AA2DA,SA1DX,EAAqB,AAA0B,AA0DtB,GA1DJ,MACrB,EAAY,KACZ,AApCA,EAAqB,AAA0B,KAAqB,GAA/C,MAqCrB,EAAY,cAkDT,IAGL,AAAI,AAAa,EAAb,AArFS,AAmFH,AAAmB,EAAM,QAnFD,MAsFhC,EAtEA,AAAI,AADO,AAzBe,KAAqB,QA2B3B,SAKpB,EAAY,AAFD,UAGX,AA5BA,EAAqB,AAA0B,KAAqB,GAA/C,OAiCrB,AAAW,AA2DA,SA1DX,EAAqB,AAA0B,AA0DtB,GA1DJ,MACrB,EAAY,KACZ,AApCA,EAAqB,AAA0B,KAAqB,GAA/C,MAqCrB,EAAY,cAkDT,IAGL,AAAI,AAAa,EAAb,AArFS,AAmFH,AAAmB,EAAM,QAnFD,MAsFhC,EAtEA,AAAI,AADO,AAzBe,KAAqB,QA2B3B,SAKpB,EAAY,AAFD,UAGX,AA5BA,EAAqB,AAA0B,KAAqB,GAA/C,OAiCrB,AAAW,AA2DA,SA1DX,EAAqB,AAA0B,AA0DtB,GA1DJ,MACrB,EAAY,KACZ,AApCA,EAAqB,AAA0B,KAAqB,GAA/C,MAqCrB,EAAY,cAkDT,IAGL,AAAI,AAAa,EAAb,AArFS,AAmFH,AAAmB,EAAM,QAnFD,MAsFhC,EAtEA,AAAI,AADO,AAzBe,KAAqB,QA2B3B,SAKpB,EAAY,AAFD,UAGX,AA5BA,EAAqB,AAA0B,KAAqB,GAA/C,OAiCrB,AAAW,AA2DA,SA1DX,EAAqB,AAA0B,AA0DtB,GA1DJ,MACrB,EAAY,KACZ,AApCA,EAAqB,AAA0B,KAAqB,GAA/C,MAqCrB,EAAY,cAkDT,IAGL,AAAI,AAAa,EAAb,AArFS,AAmFH,AAAmB,EAAM,QAnFD,MAsFhC,EAtEA,AAAI,AADO,AAzBe,KAAqB,QA2B3B,SAKpB,EAAY,AAFD,UAGX,AA5BA,EAAqB,AAA0B,KAAqB,GAA/C,OAiCrB,AAAW,AA2DA,SA1DX,EAAqB,AAA0B,AA0DtB,GA1DJ,MACrB,EAAY,KACZ,AApCA,EAAqB,AAA0B,KAAqB,GAA/C,MAqCrB,EAAY,cAkDT,IAGL,AAAI,AAAa,EAAb,AArFS,AAmFH,AAAmB,EAAM,QAnFD,MAsFhC,EAtEA,AAAI,AADO,AAzBe,KAAqB,QA2B3B,SAKpB,EAAY,AAFD,UAGX,AA5BA,EAAqB,AAA0B,KAAqB,GAA/C,OAiCrB,AAAW,AA2DA,SA1DX,EAAqB,AAA0B,AA0DtB,GA1DJ,MACrB,EAAY,KACZ,AApCA,EAAqB,AAA0B,KAAqB,GAA/C,MAqCrB,EAAY,cAkDT,IAGL,AAAI,AAAa,EAAb,AArFS,AAmFH,AAAmB,EAAM,QAnFD,MAsFhC,EAtEA,AAAI,AADO,AAzBe,KAAqB,QA2B3B,SAKpB,EAAY,AAFD,UAGX,AA5BA,EAAqB,AAA0B,KAAqB,GAA/C,OAiCrB,AAAW,AA2DA,SA1DX,EAAqB,AAA0B,AA0DtB,GA1DJ,MACrB,EAAY,KACZ,AApCA,EAAqB,AAA0B,KAAqB,GAA/C,MAqCrB,EAAY,cAkDT,IAGL,AAAI,AAAa,EAAb,AArFS,AAmFH,AAAmB,EAAM,QAnFD,MAsFhC,EAtEA,AAAI,AADO,AAzBe,KAAqB,QA2B3B,SAKpB,EAAY,AAFD,UAGX,AA5BA,EAAqB,AAA0B,KAAqB,GAA/C,OAiCrB,AAAW,AA2DA,SA1DX,EAAqB,AAA0B,AA0DtB,GA1DJ,MACrB,EAAY,KACZ,AApCA,EAAqB,AAA0B,KAAqB,GAA/C,MAqCrB,EAAY,cAkDT,IAGL,AAAI,AAAa,EAAb,AArFS,AAmFH,AAAmB,EAAM,QAnFD,MAsFhC,EAtEA,AAAI,AADO,AAzBe,KAAqB,QA2B3B,SAKpB,EAAY,AAFD,UAGX,AA5BA,EAAqB,AAA0B,KAAqB,GAA/C,OAiCrB,AAAW,AA2DA,SA1DX,EAAqB,AAA0B,AA0DtB,GA1DJ,MACrB,EAAY,KACZ,AApCA,EAAqB,AAA0B,KAAqB,GAA/C,MAqCrB,EAAY,cAkDT,IAGL,AAAI,AAAa,EAAb,AArFS,AAmFH,AAAmB,EAAM,QAnFD,MAsFhC,EAtEA,AAAI,AADO,AAzBe,KAAqB,QA2B3B,SAKpB,EAAY,AAFD,UAGX,AA5BA,EAAqB,AAA0B,KAAqB,GAA/C,OAiCrB,AAAW,AA2DA,SA1DX,EAAqB,AAA0B,AA0DtB,GA1DJ,MACrB,EAAY,KACZ,AApCA,EAAqB,AAA0B,KAAqB,GAA/C,MAqCrB,EAAY,cAkDT,IAGL,AAAI,AAAa,EAAb,AArFS,AAmFH,AAAmB,EAAM,QAnFD,MAsFhC,EAtEA,AAAI,AADO,AAzBe,KAAqB,QA2B3B,SAKpB,EAAY,AAFD,UAGX,AA5BA,EAAqB,AAA0B,KAAqB,GAA/C,OAiCrB,AAAW,AA2DA,SA1DX,EAAqB,AAA0B,AA0DtB,GA1DJ,MACrB,EAAY,KACZ,AApCA,EAAqB,AAA0B,KAAqB,GAA/C,MAqCrB,EAAY,cAkDT,IAGL,AAAI,AAAa,EAAb,AArFS,AAmFH,AAAmB,EAAM,QAnFD,MAsFhC,EAtEA,AAAI,AADO,AAzBe,KAAqB,QA2B3B,SAKpB,EAAY,AAFD,UAGX,AA5BA,EAAqB,AAA0B,KAAqB,GAA/C,OAiCrB,AAAW,AA2DA,SA1DX,EAAqB,AAA0B,AA0DtB,GA1DJ,MACrB,EAAY,KACZ,AApCA,EAAqB,AAA0B,KAAqB,GAA/C,MAqCrB,EAAY,cAkDT,IAGL,AAAI,AAAa,EAAb,AArFS,AAmFH,AAAmB,EAAM,QAnFD,MAsFhC,EAtEA,AAAI,AADO,AAzBe,KAAqB,QA2B3B,SAKpB,EAAY,AAFD,UAGX,AA5BA,EAAqB,AAA0B,KAAqB,GAA/C,OAiCrB,AAAW,AA2DA,SA1DX,EAAqB,AAA0B,AA0DtB,GA1DJ,MACrB,EAAY,KACZ,AApCA,EAAqB,AAA0B,KAAqB,GAA/C,MAqCrB,EAAY,cAkDT,IAGL,AAAI,AAAa,EAAb,AArFS,AAmFH,AAAmB,EAAM,QAnFD,MAsFhC,EAtEA,AAAI,AADO,AAzBe,KAAqB,QA2B3B,SAKpB,EAAY,AAFD,UAGX,AA5BA,EAAqB,AAA0B,KAAqB,GAA/C,OAiCrB,AAAW,AA2DA,SA1DX,EAAqB,AAA0B,AA0DtB,GA1DJ,MACrB,EAAY,KACZ,AApCA,EAAqB,AAA0B,KAAqB,GAA/C,MAqCrB,EAAY,cAkDT,IAGL,AAAI,AAAa,EAAb,AArFS,AAmFH,AAAmB,EAAM,QAnFD,MAsFhC,EAtEA,AAAI,AADO,AAzBe,KAAqB,QA2B3B,SAKpB,EAAY,AAFD,UAGX,AA5BA,EAAqB,AAA0B,KAAqB,GAA/C,OAiCrB,AAAW,AA2DA,SA1DX,EAAqB,AAA0B,AA0DtB,GA1DJ,MACrB,EAAY,KACZ,AApCA,EAAqB,AAA0B,KAAqB,GAA/C,MAqCrB,EAAY,cAkDT,IAGL,AAAI,AAAa,EAAb,AArFS,AAmFH,AAAmB,EAAM,QAnFD,MAsFhC,EAtEA,AAAI,AADO,AAzBe,KAAqB,QA2B3B,SAKpB,EAAY,AAFD,UAGX,AA5BA,EAAqB,AAA0B,KAAqB,GAA/C,OAiCrB,AAAW,AA2DA,SA1DX,EAAqB,AAA0B,AA0DtB,GA1DJ,MACrB,EAAY,KACZ,AApCA,EAAqB,AAA0B,KAAqB,GAA/C,MAqCrB,EAAY,cAkDT,IAGL,AAAI,AAAa,EAAb,AArFS,AAmFH,AAAmB,EAAM,QAnFD,MAsFhC,EAtEA,AAAI,AADO,AAzBe,KAAqB,QA2B3B,SAKpB,EAAY,AAFD,UAGX,AA5BA,EAAqB,AAA0B,KAAqB,GAA/C,OAiCrB,AAAW,AA2DA,SA1DX,EAAqB,AAA0B,AA0DtB,GA1DJ,MACrB,EAAY,KACZ,AApCA,EAAqB,AAA0B,KAAqB,GAA/C,MAqCrB,EAAY,cAkDT,IAGL,AAAI,AAAa,EAAb,AArFS,AAmFH,AAAmB,EAAM,QAnFD,MAsFhC,EAtEA,AAAI,AADO,AAzBe,KAAqB,QA2B3B,SAKpB,EAAY,AAFD,UAGX,AA5BA,EAAqB,AAA0B,KAAqB,GAA/C,OAiCrB,AAAW,AA2DA,SA1DX,EAAqB,AAA0B,AA0DtB,GA1DJ,MACrB,EAAY,KACZ,AApCA,EAAqB,AAA0B,KAAqB,GAA/C,MAqCrB,EAAY,cAkDT,IAGL,AAAI,AAAa,EAAb,AArFS,AAmFH,AAAmB,EAAM,QAnFD,MAsFhC,EAtEA,AAAI,AADO,AAzBe,KAAqB,QA2B3B,SAKpB,EAAY,AAFD,UAGX,AA5BA,EAAqB,AAA0B,KAAqB,GAA/C,OAiCrB,AAAW,AA2DA,SA1DX,EAAqB,AAA0B,AA0DtB,GA1DJ,MACrB,EAAY,KACZ,AApCA,EAAqB,AAA0B,KAAqB,GAA/C,MAqCrB,EAAY,cAkDT,IAGL,AAAI,AAAa,EAAb,AArFS,AAmFH,AAAmB,EAAM,QAnFD,MAsFhC,EAtEA,AAAI,AADO,AAzBe,KAAqB,QA2B3B,SAKpB,EAAY,AAFD,UAGX,AA5BA,EAAqB,AAA0B,KAAqB,GAA/C,OAiCrB,AAAW,AA2DA,SA1DX,EAAqB,AAA0B,AA0DtB,GA1DJ,MACrB,EAAY,KACZ,AApCA,EAAqB,AAA0B,KAAqB,GAA/C,MAqCrB,EAAY,cAkDT,IAGL,AAAI,AAAa,EAAb,AArFS,AAmFH,AAAmB,EAAM,QAnFD,MAsFhC,EAtEA,AAAI,AADO,AAzBe,KAAqB,QA2B3B,SAKpB,EAAY,AAFD,UAGX,AA5BA,EAAqB,AAA0B,KAAqB,GAA/C,OAiCrB,AAAW,AA2DA,SA1DX,EAAqB,AAA0B,AA0DtB,GA1DJ,MACrB,EAAY,KACZ,AApCA,EAAqB,AAA0B,KAAqB,GAA/C,MAqCrB,EAAY,cAkDT,IAGL,AAAI,AAAa,EAAb,AArFS,AAmFH,AAAmB,EAAM,QAnFD,MAsFhC,EAtEA,AAAI,AADO,AAzBe,KAAqB,QA2B3B,SAKpB,EAAY,AAFD,UAGX,AA5BA,EAAqB,AAA0B,KAAqB,GAA/C,OAiCrB,AAAW,AA2DA,SA1DX,EAAqB,AAA0B,AA0DtB,GA1DJ,MACrB,EAAY,KACZ,AApCA,EAAqB,AAA0B,KAAqB,GAA/C,MAqCrB,EAAY,cAkDT,IAGL,AAAI,AAAa,EAAb,AArFS,AAmFH,AAAmB,EAAM,QAnFD,MAsFhC,EAtEA,AAAI,AADO,AAzBe,KAAqB,QA2B3B,SAKpB,EAAY,AAFD,UAGX,AA5BA,EAAqB,AAA0B,KAAqB,GAA/C,OAiCrB,AAAW,AA2DA,SA1DX,EAAqB,AAA0B,AA0DtB,GA1DJ,MACrB,EAAY,KACZ,AApCA,EAAqB,AAA0B,KAAqB,GAA/C,MAqCrB,EAAY,cAkDT,IAGL,AAAI,AAAa,EAAb,AArFS,AAmFH,AAAmB,EAAM,QAnFD,MAsFhC,EAtEA,AAAI,AADO,AAzBe,KAAqB,QA2B3B,SAKpB,EAAY,AAFD,UAGX,AA5BA,EAAqB,AAA0B,KAAqB,GAA/C,OAiCrB,AAAW,AA2DA,SA1DX,EAAqB,AAA0B,AA0DtB,GA1DJ,MACrB,EAAY,KACZ,AApCA,EAAqB,AAA0B,KAAqB,GAA/C,MAqCrB,EAAY,cAkDT,IAGL,AAAI,AAAa,EAAb,AArFS,AAmFH,AAAmB,EAAM,QAnFD,MAsFhC,EAtEA,AAAI,AADO,AAzBe,KAAqB,QA2B3B,SAKpB,EAAY,AAFD,UAGX,AA5BA,EAAqB,AAA0B,KAAqB,GAA/C,OAiCrB,AAAW,AA2DA,SA1DX,EAAqB,AAA0B,AA0DtB,GA1DJ,MACrB,EAAY,KACZ,AApCA,EAAqB,AAA0B,KAAqB,GAA/C,MAqCrB,EAAY,cAkDT,IAGL,AAAI,AAAa,EAAb,AArFS,AAmFH,AAAmB,EAAM,QAnFD,MAsFhC,EAtEA,AAAI,AADO,AAzBe,KAAqB,QA2B3B,SAKpB,EAAY,AAFD,UAGX,AA5BA,EAAqB,AAA0B,KAAqB,GAA/C,OAiCrB,AAAW,AA2DA,SA1DX,EAAqB,AAA0B,AA0DtB,GA1DJ,MACrB,EAAY,KACZ,AApCA,EAAqB,AAA0B,KAAqB,GAA/C,MAqCrB,EAAY,cAkDT,IAGL,AAAI,AAAa,EAAb,AArFS,AAmFH,AAAmB,EAAM,QAnFD,MAsFhC,EAtEA,AAAI,AADO,AAzBe,KAAqB,QA2B3B,SAKpB,EAAY,AAFD,UAGX,AA5BA,EAAqB,AAA0B,KAAqB,GAA/C,OAiCrB,AAAW,AA2DA,SA1DX,EAAqB,AAA0B,AA0DtB,GA1DJ,MACrB,EAAY,KACZ,AApCA,EAAqB,AAA0B,KAAqB,GAA/C,MAqCrB,EAAY,cAkDT,IAGL,AAAI,AAAa,EAAb,AArFS,AAmFH,AAAmB,EAAM,QAnFD,MAsFhC,EAtEA,AAAI,AADO,AAzBe,KAAqB,QA2B3B,SAKpB,EAAY,AAFD,UAGX,AA5BA,EAAqB,AAA0B,KAAqB,GAA/C,OAiCrB,AAAW,AA2DA,SA1DX,EAAqB,AAA0B,AA0DtB,GA1DJ,MACrB,EAAY,KACZ,AApCA,EAAqB,AAA0B,KAAqB,GAA/C,MAqCrB,EAAY,cAkDT,IAGL,AAAI,AAAa,EAAb,AArFS,AAmFH,AAAmB,EAAM,QAnFD,MAsFhC,EAtEA,AAAI,AADO,AAzBe,KAAqB,QA2B3B,SAKpB,EAAY,AAFD,UAGX,AA5BA,EAAqB,AAA0B,KAAqB,GAA/C,OAiCrB,AAAW,AA2DA,SA1DX,EAAqB,AAA0B,AA0DtB,GA1DJ,MACrB,EAAY,KACZ,AApCA,EAAqB,AAA0B,KAAqB,GAA/C,MAqCrB,EAAY,cAkDT,IAGL,AAAI,AAAa,EAAb,AArFS,AAmFH,AAAmB,EAAM,QAnFD,MAsFhC,EAtEA,AAAI,AADO,AAzBe,KAAqB,QA2B3B,SAKpB,EAAY,AAFD,UAGX,AA5BA,EAAqB,AAA0B,KAAqB,GAA/C,OAiCrB,AAAW,AA2DA,SA1DX,EAAqB,AAA0B,AA0DtB,GA1DJ,MACrB,EAAY,KACZ,AApCA,EAAqB,AAA0B,KAAqB,GAA/C,MAqCrB,EAAY,cAkDT,IAGL,AAAI,AAAa,EAAb,AArFS,AAmFH,AAAmB,EAAM,QAnFD,MAsFhC,EAtEA,AAAI,AADO,AAzBe,KAAqB,QA2B3B,SAKpB,EAAY,AAFD,UAGX,AA5BA,EAAqB,AAA0B,KAAqB,GAA/C,OAiCrB,AAAW,AA2DA,SA1DX,EAAqB,AAA0B,AA0DtB,GA1DJ,MACrB,EAAY,KACZ,AApCA,EAAqB,AAA0B,KAAqB,GAA/C,MAqCrB,EAAY,cAkDT,IAGL,AAAI,AAAa,EAAb,AArFS,AAmFH,AAAmB,EAAM,QAnFD,MAsFhC,EAtEA,AAAI,AADO,AAzBe,KAAqB,QA2B3B,SAKpB,EAAY,AAFD,UAGX,AA5BA,EAAqB,AAA0B,KAAqB,GAA/C,OAiCrB,AAAW,AA2DA,SA1DX,EAAqB,AAA0B,AA0DtB,GA1DJ,MACrB,EAAY,KACZ,AApCA,EAAqB,AAA0B,KAAqB,GAA/C,MAqCrB,EAAY,cAkDT,IAGL,AAAI,AAAa,EAAb,AArFS,AAmFH,AAAmB,EAAM,QAnFD,MAsFhC,EAtEA,AAAI,AADO,AAzBe,KAAqB,QA2B3B,SAKpB,EAAY,AAFD,UAGX,AA5BA,EAAqB,AAA0B,KAAqB,GAA/C,OAiCrB,AAAW,AA2DA,SA1DX,EAAqB,AAA0B,AA0DtB,GA1DJ,MACrB,EAAY,KACZ,AApCA,EAAqB,AAA0B,KAAqB,GAA/C,MAqCrB,EAAY,cAkDT,IAGL,AAAI,AAAa,EAAb,AArFS,AAmFH,AAAmB,EAAM,QAnFD,MAsFhC,EAtEA,AAAI,AADO,AAzBe,KAAqB,QA2B3B,SAKpB,EAAY,AAFD,UAGX,AA5BA,EAAqB,AAA0B,KAAqB,GAA/C,OAiCrB,AAAW,AA2DA,SA1DX,EAAqB,AAA0B,AA0DtB,GA1DJ,MACrB,EAAY,KACZ,AApCA,EAAqB,AAA0B,KAAqB,GAA/C,MAqCrB,EAAY,QAqDd,AAAI,AAAa,EAAb,AArFS,MAAqB,MAsFhC,EAtEA,AAAI,AADO,AAzBe,MAAqB,QA2B3B,UAKpB,EAAY,AAFD,WAGX,AA5BA,EAAqB,AAA0B,KAAqB,GAA/C,OAiCrB,AAAW,AA2DA,SA1DX,GAAqB,AAA0B,AA0DtB,GA1DJ,MACrB,GAAY,KACZ,AApCA,EAAqB,AAA0B,KAAqB,GAA/C,OAqCrB,EAAY,OAqDd,AAAI,AAAa,EAAb,AArFS,MAAqB,MAsFhC,EAtEA,AAAI,AADO,AAzBe,MAAqB,QA2B3B,UAKpB,EAAY,AAFD,WAGX,AA5BA,EAAqB,AAA0B,KAAqB,GAA/C,OAiCrB,AAAW,AA2DA,SA1DX,GAAqB,AAA0B,AA0DtB,GA1DJ,MACrB,GAAY,KACZ,AApCA,EAAqB,AAA0B,KAAqB,GAA/C,OAqCrB,EAAY,OAqDd,AAAI,AAAa,EAAb,AArFS,MAAqB,MAsFhC,EAtEA,AAAI,AADO,AAzBe,MAAqB,QA2B3B,UAKpB,EAAY,AAFD,WAGX,AA5BA,EAAqB,AAA0B,KAAqB,GAA/C,OAiCrB,AAAW,AA2DA,SA1DX,GAAqB,AAA0B,AA0DtB,GA1DJ,MACrB,GAAY,KACZ,AApCA,EAAqB,AAA0B,KAAqB,GAA/C,OAqCrB,EAAY,OAqDd,AAAI,AAAa,EAAb,AArFS,MAAqB,MAsFhC,EAtEA,AAAI,AADO,AAzBe,MAAqB,QA2B3B,UAKpB,EAAY,AAFD,WAGX,AA5BA,EAAqB,AAA0B,KAAqB,GAA/C,OAiCrB,AAAW,AA2DA,SA1DX,GAAqB,AAA0B,AA0DtB,GA1DJ,MACrB,GAAY,KACZ,AApCA,EAAqB,AAA0B,KAAqB,GAA/C,OAqCrB,EAAY,OAqDd,AAAI,AAAa,EAAb,AArFS,OAAqB,MAsFhC,EAtEA,AAAI,AADO,AAzBe,OAAqB,QA2B3B,WAKpB,EAAY,AAFD,YAGX,AA5BA,EAAqB,AAA0B,KAAqB,GAA/C,OAiCrB,AAAW,AA2DA,SA1DX,IAAqB,AAA0B,AA0DtB,GA1DJ,MACrB,IAAY,KACZ,AApCA,EAAqB,AAA0B,KAAqB,GAA/C,QAqCrB,EAAY,QAqDd,AAAI,AAAa,EAAb,AArFS,OAAqB,MAsFhC,EAtEA,AAAI,AADO,AAzBe,OAAqB,QA2B3B,WAKpB,EAAY,AAFD,YAGX,AA5BA,EAAqB,AAA0B,KAAqB,GAA/C,OAiCrB,AAAW,AA2DA,SA1DX,IAAqB,AAA0B,AA0DtB,GA1DJ,MACrB,IAAY,KACZ,AApCA,EAAqB,AAA0B,KAAqB,GAA/C,QAqCrB,EAAY,yEKiRV,AAAU,AAAM,AADN,EACmD,MAAnD,KACV,EAAO,EAAM,KAEX,AAAI,AADM,AAAY,SACb,ALlOV,IAGL,AAAI,AAAa,EAAb,AArFS,AAmFH,AAAmB,EAAM,QAnFD,MAsFhC,EAtEA,AAAI,AADO,AAzBe,KAAqB,QA2B3B,SAKpB,EAAY,AAFD,UAGX,AA5BA,EAAqB,AAA0B,KAAqB,GAA/C,OAiCrB,AAAW,AA2DA,SA1DX,EAAqB,AAA0B,AA0DtB,GA1DJ,MACrB,EAAY,KACZ,AApCA,EAAqB,AAA0B,KAAqB,GAA/C,MAqCrB,EAAY,QKqRR,EAAO,oBLnOR,IAGL,AAAI,AAAa,EAAb,AArFS,AAmFH,AAAmB,EAAM,QAnFD,MAsFhC,EAtEA,AAAI,AADO,AAzBe,KAAqB,QA2B3B,SAKpB,EAAY,AAFD,UAGX,AA5BA,EAAqB,AAA0B,KAAqB,GAA/C,OAiCrB,AAAW,AA2DA,SA1DX,EAAqB,AAA0B,AA0DtB,GA1DJ,MACrB,EAAY,KACZ,AApCA,EAAqB,AAA0B,KAAqB,GAA/C,MAqCrB,EAAY,UeqaZ,AfnXG,AemXK,AAAkB,SfhX5B,AAAI,AAAa,EAAb,AArFS,AAmFH,AAAmB,EAAM,QAnFD,MAsFhC,EAtEA,AAAI,AADO,AAzBe,KAAqB,QA2B3B,SAKpB,EAAY,AAFD,UAGX,AA5BA,EAAqB,AAA0B,KAAqB,GAA/C,OAiCrB,AAAW,AA2DA,SA1DX,EAAqB,AAA0B,AA0DtB,GA1DJ,MACrB,EAAY,KACZ,AApCA,EAAqB,AAA0B,KAAqB,GAA/C,MAqCrB,EAAY,cAjFd,WACA,WACA,SAFA,WACA,WACA","sourceRoot":"./optimized.wasm","sourcesContent":["// Alignment guarantees\n\n// @ts-ignore: decorator\n@inline export const AL_BITS: u32 = 4; // 16 bytes to fit up to v128\n// @ts-ignore: decorator\n@inline export const AL_SIZE: usize = 1 << <usize>AL_BITS;\n// @ts-ignore: decorator\n@inline export const AL_MASK: usize = AL_SIZE - 1;\n\n// Extra debugging\n\n// @ts-ignore: decorator\n@inline export const DEBUG = true;\n// @ts-ignore: decorator\n@inline export const TRACE = false;\n// @ts-ignore: decorator\n@inline export const RTRACE = isDefined(ASC_RTRACE);\n// @ts-ignore: decorator\n@inline export const PROFILE = isDefined(ASC_PROFILE);\n\n// Memory manager\n\n// ╒════════════ Memory manager block layout (32-bit) ═════════════╕\n//    3                   2                   1\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┤\n// │                           MM info                             │ -4\n// ╞>ptr═══════════════════════════════════════════════════════════╡\n// │                              ...                              │\n@unmanaged export class BLOCK {\n  /** Memory manager info. */\n  mmInfo: usize;\n}\n\n/** Overhead of a memory manager block. */\n// @ts-ignore: decorator\n@inline export const BLOCK_OVERHEAD: usize = offsetof<BLOCK>();\n\n/** Maximum size of a memory manager block's payload. */\n// @ts-ignore: decorator\n@inline export const BLOCK_MAXSIZE: usize = (1 << 30) - BLOCK_OVERHEAD;\n\n// Garbage collector\n\n// ╒══════════ Garbage collector object layout (32-bit) ═══════════╕\n//    3                   2                   1\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┤\n// │                     Memory manager block                      │ -20\n// ╞═══════════════════════════════════════════════════════════════╡\n// │                            GC info                            │ -16\n// ├───────────────────────────────────────────────────────────────┤\n// │                            GC info                            │ -12\n// ├───────────────────────────────────────────────────────────────┤\n// │                            RT id                              │ -8\n// ├───────────────────────────────────────────────────────────────┤\n// │                            RT size                            │ -4\n// ╞>ptr═══════════════════════════════════════════════════════════╡\n// │                              ...                              │\n@unmanaged export class OBJECT extends BLOCK {\n  /** Garbage collector info. */\n  gcInfo: u32;\n  /** Garbage collector info. */\n  gcInfo2: u32;\n  /** Runtime class id. */\n  rtId: u32;\n  /** Runtime object size. */\n  rtSize: u32;\n}\n\n/** Overhead of a garbage collector object. Excludes memory manager block overhead. */\n// @ts-ignore: decorator\n@inline export const OBJECT_OVERHEAD: usize = (offsetof<OBJECT>() - BLOCK_OVERHEAD + AL_MASK) & ~AL_MASK;\n\n/** Maximum size of a garbage collector object's payload. */\n// @ts-ignore: decorator\n@inline export const OBJECT_MAXSIZE: usize = BLOCK_MAXSIZE - OBJECT_OVERHEAD;\n\n/** Total of memory manager and garbage collector overhead. */\n// @ts-ignore: decorator\n@inline export const TOTAL_OVERHEAD: usize = BLOCK_OVERHEAD + OBJECT_OVERHEAD;\n","import { AL_BITS, AL_SIZE, AL_MASK, DEBUG, BLOCK, BLOCK_OVERHEAD, BLOCK_MAXSIZE } from \"./common\";\nimport { oninit, onalloc, onresize, onmove, onfree } from \"./rtrace\";\nimport { E_ALLOCATION_TOO_LARGE } from \"../util/error\";\n\n// === The TLSF (Two-Level Segregate Fit) memory allocator ===\n// see: http://www.gii.upv.es/tlsf/\n\n// - `ffs(x)` is equivalent to `ctz(x)` with x != 0\n// - `fls(x)` is equivalent to `sizeof(x) * 8 - clz(x) - 1`\n\n// ╒══════════════ Block size interpretation (32-bit) ═════════════╕\n//    3                   2                   1\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┼─┴─┴─┴─╫─┴─┴─┴─┤\n// │ |                    FL                       │ SB = SL + AL  │ ◄─ usize\n// └───────────────────────────────────────────────┴───────╨───────┘\n// FL: first level, SL: second level, AL: alignment, SB: small block\n\n// @ts-ignore: decorator\n@inline const SL_BITS: u32 = 4;\n// @ts-ignore: decorator\n@inline const SL_SIZE: u32 = 1 << SL_BITS;\n\n// @ts-ignore: decorator\n@inline const SB_BITS: u32 = SL_BITS + AL_BITS;\n// @ts-ignore: decorator\n@inline const SB_SIZE: u32 = 1 << SB_BITS;\n\n// @ts-ignore: decorator\n@inline const FL_BITS: u32 = 31 - SB_BITS;\n\n// [00]: < 256B (SB)  [12]: < 1M\n// [01]: < 512B       [13]: < 2M\n// [02]: < 1K         [14]: < 4M\n// [03]: < 2K         [15]: < 8M\n// [04]: < 4K         [16]: < 16M\n// [05]: < 8K         [17]: < 32M\n// [06]: < 16K        [18]: < 64M\n// [07]: < 32K        [19]: < 128M\n// [08]: < 64K        [20]: < 256M\n// [09]: < 128K       [21]: < 512M\n// [10]: < 256K       [22]: <= 1G - OVERHEAD\n// [11]: < 512K\n// VMs limit to 2GB total (currently), making one 1G block max (or three 512M etc.) due to block overhead\n\n// Tags stored in otherwise unused alignment bits\n\n// @ts-ignore: decorator\n@inline const FREE: usize = 1 << 0;\n// @ts-ignore: decorator\n@inline const LEFTFREE: usize = 1 << 1;\n// @ts-ignore: decorator\n@inline const TAGS_MASK: usize = FREE | LEFTFREE; // <= AL_MASK\n\n// ╒════════════════════ Block layout (32-bit) ════════════════════╕\n//    3                   2                   1\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┼─┼─┤            ┐\n// │                          size                             │L│F│ ◄─┐ info   overhead\n// ╞>ptr═══════════════════════════════════════════════════════╧═╧═╡   │        ┘\n// │                        if free: ◄ prev                        │ ◄─┤ usize\n// ├───────────────────────────────────────────────────────────────┤   │\n// │                        if free: next ►                        │ ◄─┤\n// ├───────────────────────────────────────────────────────────────┤   │\n// │                             ...                               │   │ >= 0\n// ├───────────────────────────────────────────────────────────────┤   │\n// │                        if free: back ▲                        │ ◄─┘\n// └───────────────────────────────────────────────────────────────┘ >= MIN SIZE\n// F: FREE, L: LEFTFREE\n@unmanaged export class Block extends BLOCK {\n\n  /** Previous free block, if any. Only valid if free, otherwise part of payload. */\n  prev: Block | null;\n  /** Next free block, if any. Only valid if free, otherwise part of payload. */\n  next: Block | null;\n\n  // If the block is free, there is a 'back'reference at its end pointing at its start.\n}\n\n// Block constants. A block must have a minimum size of three pointers so it can hold `prev`,\n// `next` and `back` if free.\n\n// @ts-ignore: decorator\n@inline const BLOCK_MINSIZE: usize = ((3 * sizeof<usize>() + BLOCK_OVERHEAD + AL_MASK) & ~AL_MASK) - BLOCK_OVERHEAD; // prev + next + back\n// @ts-ignore: decorator\n// @inline const BLOCK_MAXSIZE: usize = 1 << (FL_BITS + SB_BITS - 1); // exclusive, lives in common.ts\n\n/** Gets the left block of a block. Only valid if the left block is free. */\n// @ts-ignore: decorator\n@inline function GETFREELEFT(block: Block): Block {\n  return load<Block>(changetype<usize>(block) - sizeof<usize>());\n}\n\n/** Gets the right block of a block by advancing to the right by its size. */\n// @ts-ignore: decorator\n@inline function GETRIGHT(block: Block): Block {\n  return changetype<Block>(changetype<usize>(block) + BLOCK_OVERHEAD + (block.mmInfo & ~TAGS_MASK));\n}\n\n// ╒═════════════════════ Root layout (32-bit) ════════════════════╕\n//    3                   2                   1\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┤          ┐\n// │        0        |           flMap                            S│ ◄────┐\n// ╞═══════════════════════════════════════════════════════════════╡      │\n// │                           slMap[0] S                          │ ◄─┐  │\n// ├───────────────────────────────────────────────────────────────┤   │  │\n// │                           slMap[1]                            │ ◄─┤  │\n// ├───────────────────────────────────────────────────────────────┤  u32 │\n// │                           slMap[22]                           │ ◄─┘  │\n// ╞═══════════════════════════════════════════════════════════════╡    usize\n// │                            head[0]                            │ ◄────┤\n// ├───────────────────────────────────────────────────────────────┤      │\n// │                              ...                              │ ◄────┤\n// ├───────────────────────────────────────────────────────────────┤      │\n// │                           head[367]                           │ ◄────┤\n// ╞═══════════════════════════════════════════════════════════════╡      │\n// │                             tail                              │ ◄────┘\n// └───────────────────────────────────────────────────────────────┘   SIZE   ┘\n// S: Small blocks map\n@unmanaged class Root {\n  /** First level bitmap. */\n  flMap: usize;\n}\n\n// Root constants. Where stuff is stored inside of the root structure.\n\n// @ts-ignore: decorator\n@inline const SL_START: usize = sizeof<usize>();\n// @ts-ignore: decorator\n@inline const SL_END: usize = SL_START + (FL_BITS << alignof<u32>());\n// @ts-ignore: decorator\n@inline const HL_START: usize = (SL_END + AL_MASK) & ~AL_MASK;\n// @ts-ignore: decorator\n@inline const HL_END: usize = HL_START + FL_BITS * SL_SIZE * sizeof<usize>();\n// @ts-ignore: decorator\n@inline const ROOT_SIZE: usize = HL_END + sizeof<usize>();\n\n// @ts-ignore: decorator\n@lazy export var ROOT: Root;\n\n/** Gets the second level map of the specified first level. */\n// @ts-ignore: decorator\n@inline function GETSL(root: Root, fl: usize): u32 {\n  return load<u32>(\n    changetype<usize>(root) + (fl << alignof<u32>()),\n    SL_START\n  );\n}\n\n/** Sets the second level map of the specified first level. */\n// @ts-ignore: decorator\n@inline function SETSL(root: Root, fl: usize, slMap: u32): void {\n  store<u32>(\n    changetype<usize>(root) + (fl << alignof<u32>()),\n    slMap,\n    SL_START\n  );\n}\n\n/** Gets the head of the free list for the specified combination of first and second level. */\n// @ts-ignore: decorator\n@inline function GETHEAD(root: Root, fl: usize, sl: u32): Block | null {\n  return load<Block>(\n    changetype<usize>(root) + (((fl << SL_BITS) + <usize>sl) << alignof<usize>()),\n    HL_START\n  );\n}\n\n/** Sets the head of the free list for the specified combination of first and second level. */\n// @ts-ignore: decorator\n@inline function SETHEAD(root: Root, fl: usize, sl: u32, head: Block | null): void {\n  store<Block | null>(\n    changetype<usize>(root) + (((fl << SL_BITS) + <usize>sl) << alignof<usize>()),\n    head,\n    HL_START\n  );\n}\n\n/** Gets the tail block.. */\n// @ts-ignore: decorator\n@inline function GETTAIL(root: Root): Block {\n  return load<Block>(\n    changetype<usize>(root),\n    HL_END\n  );\n}\n\n/** Sets the tail block. */\n// @ts-ignore: decorator\n@inline function SETTAIL(root: Root, tail: Block): void {\n  store<Block>(\n    changetype<usize>(root),\n    tail,\n    HL_END\n  );\n}\n\n/** Inserts a previously used block back into the free list. */\nfunction insertBlock(root: Root, block: Block): void {\n  if (DEBUG) assert(block); // cannot be null\n  var blockInfo = block.mmInfo;\n  if (DEBUG) assert(blockInfo & FREE); // must be free\n\n  var right = GETRIGHT(block);\n  var rightInfo = right.mmInfo;\n\n  // merge with right block if also free\n  if (rightInfo & FREE) {\n    removeBlock(root, right);\n    block.mmInfo = blockInfo = blockInfo + BLOCK_OVERHEAD + (rightInfo & ~TAGS_MASK); // keep block tags\n    right = GETRIGHT(block);\n    rightInfo = right.mmInfo;\n    // 'back' is set below\n  }\n\n  // merge with left block if also free\n  if (blockInfo & LEFTFREE) {\n    let left = GETFREELEFT(block);\n    let leftInfo = left.mmInfo;\n    if (DEBUG) assert(leftInfo & FREE); // must be free according to right tags\n    removeBlock(root, left);\n    block = left;\n    block.mmInfo = blockInfo = leftInfo + BLOCK_OVERHEAD + (blockInfo & ~TAGS_MASK); // keep left tags\n    // 'back' is set below\n  }\n\n  right.mmInfo = rightInfo | LEFTFREE;\n  // reference to right is no longer used now, hence rightInfo is not synced\n\n  // we now know the size of the block\n  var size = blockInfo & ~TAGS_MASK;\n  if (DEBUG) assert(size >= BLOCK_MINSIZE); // must be a valid size\n  if (DEBUG) assert(changetype<usize>(block) + BLOCK_OVERHEAD + size == changetype<usize>(right)); // must match\n\n  // set 'back' to itself at the end of block\n  store<Block>(changetype<usize>(right) - sizeof<usize>(), block);\n\n  // mapping_insert\n  var fl: usize, sl: u32;\n  if (size < SB_SIZE) {\n    fl = 0;\n    sl = <u32>(size >> AL_BITS);\n  } else {\n    const inv: usize = sizeof<usize>() * 8 - 1;\n    let boundedSize = min(size, BLOCK_MAXSIZE);\n    fl = inv - clz<usize>(boundedSize);\n    sl = <u32>((boundedSize >> (fl - SL_BITS)) ^ (1 << SL_BITS));\n    fl -= SB_BITS - 1;\n  }\n  if (DEBUG) assert(fl < FL_BITS && sl < SL_SIZE); // fl/sl out of range\n\n  // perform insertion\n  var head = GETHEAD(root, fl, sl);\n  block.prev = null;\n  block.next = head;\n  if (head) head.prev = block;\n  SETHEAD(root, fl, sl, block);\n\n  // update first and second level maps\n  root.flMap |= (1 << fl);\n  SETSL(root, fl, GETSL(root, fl) | (1 << sl));\n}\n\n/** Removes a free block from internal lists. */\nfunction removeBlock(root: Root, block: Block): void {\n  var blockInfo = block.mmInfo;\n  if (DEBUG) assert(blockInfo & FREE); // must be free\n  var size = blockInfo & ~TAGS_MASK;\n  if (DEBUG) assert(size >= BLOCK_MINSIZE); // must be valid\n\n  // mapping_insert\n  var fl: usize, sl: u32;\n  if (size < SB_SIZE) {\n    fl = 0;\n    sl = <u32>(size >> AL_BITS);\n  } else {\n    const inv: usize = sizeof<usize>() * 8 - 1;\n    let boundedSize = min(size, BLOCK_MAXSIZE);\n    fl = inv - clz<usize>(boundedSize);\n    sl = <u32>((boundedSize >> (fl - SL_BITS)) ^ (1 << SL_BITS));\n    fl -= SB_BITS - 1;\n  }\n  if (DEBUG) assert(fl < FL_BITS && sl < SL_SIZE); // fl/sl out of range\n\n  // link previous and next free block\n  var prev = block.prev;\n  var next = block.next;\n  if (prev) prev.next = next;\n  if (next) next.prev = prev;\n\n  // update head if we are removing it\n  if (block == GETHEAD(root, fl, sl)) {\n    SETHEAD(root, fl, sl, next);\n\n    // clear second level map if head is empty now\n    if (!next) {\n      let slMap = GETSL(root, fl);\n      SETSL(root, fl, slMap &= ~(1 << sl));\n\n      // clear first level map if second level is empty now\n      if (!slMap) root.flMap &= ~(1 << fl);\n    }\n  }\n  // note: does not alter left/back because it is likely that splitting\n  // is performed afterwards, invalidating those changes. so, the caller\n  // must perform those updates.\n}\n\n/** Searches for a free block of at least the specified size. */\nfunction searchBlock(root: Root, size: usize): Block | null {\n  // size was already asserted by caller\n\n  // mapping_search\n  var fl: usize, sl: u32;\n  if (size < SB_SIZE) {\n    fl = 0;\n    sl = <u32>(size >> AL_BITS);\n  } else {\n    const halfMaxSize = BLOCK_MAXSIZE >> 1; // don't round last fl\n    const inv: usize = sizeof<usize>() * 8 - 1;\n    const invRound = inv - SL_BITS;\n    let requestSize = size < halfMaxSize\n      ? size + (1 << (invRound - clz<usize>(size))) - 1\n      : size;\n    fl = inv - clz<usize>(requestSize);\n    sl = <u32>((requestSize >> (fl - SL_BITS)) ^ (1 << SL_BITS));\n    fl -= SB_BITS - 1;\n  }\n  if (DEBUG) assert(fl < FL_BITS && sl < SL_SIZE); // fl/sl out of range\n\n  // search second level\n  var slMap = GETSL(root, fl) & (~0 << sl);\n  var head: Block | null = null;\n  if (!slMap) {\n    // search next larger first level\n    let flMap = root.flMap & (~0 << (fl + 1));\n    if (!flMap) {\n      head = null;\n    } else {\n      fl = ctz<usize>(flMap);\n      slMap = GETSL(root, fl);\n      if (DEBUG) assert(slMap);  // can't be zero if fl points here\n      head = GETHEAD(root, fl, ctz<u32>(slMap));\n    }\n  } else {\n    head = GETHEAD(root, fl, ctz<u32>(slMap));\n  }\n  return head;\n}\n\n/** Prepares the specified block before (re-)use, possibly splitting it. */\nfunction prepareBlock(root: Root, block: Block, size: usize): void {\n  // size was already asserted by caller\n\n  var blockInfo = block.mmInfo;\n  if (DEBUG) assert(!((size + BLOCK_OVERHEAD) & AL_MASK)); // size must be aligned so the new block is\n\n  // split if the block can hold another MINSIZE block incl. overhead\n  var remaining = (blockInfo & ~TAGS_MASK) - size;\n  if (remaining >= BLOCK_OVERHEAD + BLOCK_MINSIZE) {\n    block.mmInfo = size | (blockInfo & LEFTFREE); // also discards FREE\n\n    let spare = changetype<Block>(changetype<usize>(block) + BLOCK_OVERHEAD + size);\n    spare.mmInfo = (remaining - BLOCK_OVERHEAD) | FREE; // not LEFTFREE\n    insertBlock(root, spare); // also sets 'back'\n\n  // otherwise tag block as no longer FREE and right as no longer LEFTFREE\n  } else {\n    block.mmInfo = blockInfo & ~FREE;\n    GETRIGHT(block).mmInfo &= ~LEFTFREE;\n  }\n}\n\n/** Adds more memory to the pool. */\nfunction addMemory(root: Root, start: usize, end: usize): bool {\n  if (DEBUG) assert(start <= end); // must be valid\n  start = ((start + BLOCK_OVERHEAD + AL_MASK) & ~AL_MASK) - BLOCK_OVERHEAD;\n  end &= ~AL_MASK;\n\n  var tail = GETTAIL(root);\n  var tailInfo: usize = 0;\n  if (tail) { // more memory\n    if (DEBUG) assert(start >= changetype<usize>(tail) + BLOCK_OVERHEAD);\n\n    // merge with current tail if adjacent\n    const offsetToTail = AL_SIZE;\n    if (start - offsetToTail == changetype<usize>(tail)) {\n      start -= offsetToTail;\n      tailInfo = tail.mmInfo;\n    } else {\n      // We don't do this, but a user might `memory.grow` manually\n      // leading to non-adjacent pages managed by TLSF.\n    }\n\n  } else if (DEBUG) { // first memory\n    assert(start >= changetype<usize>(root) + ROOT_SIZE); // starts after root\n  }\n\n  // check if size is large enough for a free block and the tail block\n  var size = end - start;\n  if (size < BLOCK_OVERHEAD + BLOCK_MINSIZE + BLOCK_OVERHEAD) {\n    return false;\n  }\n\n  // left size is total minus its own and the zero-length tail's header\n  var leftSize = size - 2 * BLOCK_OVERHEAD;\n  var left = changetype<Block>(start);\n  left.mmInfo = leftSize | FREE | (tailInfo & LEFTFREE);\n  left.prev = null;\n  left.next = null;\n\n  // tail is a zero-length used block\n  tail = changetype<Block>(start + BLOCK_OVERHEAD + leftSize);\n  tail.mmInfo = 0 | LEFTFREE;\n  SETTAIL(root, tail);\n\n  insertBlock(root, left); // also merges with free left before tail / sets 'back'\n\n  return true;\n}\n\n/** Grows memory to fit at least another block of the specified size. */\nfunction growMemory(root: Root, size: usize): void {\n  if (ASC_LOW_MEMORY_LIMIT) {\n    unreachable();\n    return;\n  }\n  // Here, both rounding performed in searchBlock ...\n  const halfMaxSize = BLOCK_MAXSIZE >> 1;\n  if (size < halfMaxSize) { // don't round last fl\n    const invRound = (sizeof<usize>() * 8 - 1) - SL_BITS;\n    size += (1 << (invRound - clz<usize>(size))) - 1;\n  }\n  // and additional BLOCK_OVERHEAD must be taken into account. If we are going\n  // to merge with the tail block, that's one time, otherwise it's two times.\n  var pagesBefore = memory.size();\n  size += BLOCK_OVERHEAD << usize((<usize>pagesBefore << 16) - BLOCK_OVERHEAD != changetype<usize>(GETTAIL(root)));\n  var pagesNeeded = <i32>(((size + 0xffff) & ~0xffff) >>> 16);\n  var pagesWanted = max(pagesBefore, pagesNeeded); // double memory\n  if (memory.grow(pagesWanted) < 0) {\n    if (memory.grow(pagesNeeded) < 0) unreachable();\n  }\n  var pagesAfter = memory.size();\n  addMemory(root, <usize>pagesBefore << 16, <usize>pagesAfter << 16);\n}\n\n/** Computes the size (excl. header) of a block. */\nfunction computeSize(size: usize): usize {\n  // Size must be large enough and aligned minus preceeding overhead\n  return size <= BLOCK_MINSIZE\n    ? BLOCK_MINSIZE\n    : ((size + BLOCK_OVERHEAD + AL_MASK) & ~AL_MASK) - BLOCK_OVERHEAD;\n}\n\n/** Prepares and checks an allocation size. */\nfunction prepareSize(size: usize): usize {\n  if (size > BLOCK_MAXSIZE) throw new Error(E_ALLOCATION_TOO_LARGE);\n  return computeSize(size);\n}\n\n/** Initializes the root structure. */\nfunction initialize(): void {\n  if (isDefined(ASC_RTRACE)) oninit(__heap_base);\n  var rootOffset = (__heap_base + AL_MASK) & ~AL_MASK;\n  var pagesBefore = memory.size();\n  var pagesNeeded = <i32>((((rootOffset + ROOT_SIZE) + 0xffff) & ~0xffff) >>> 16);\n  if (pagesNeeded > pagesBefore && memory.grow(pagesNeeded - pagesBefore) < 0) unreachable();\n  var root = changetype<Root>(rootOffset);\n  root.flMap = 0;\n  SETTAIL(root, changetype<Block>(0));\n  for (let fl: usize = 0; fl < FL_BITS; ++fl) {\n    SETSL(root, fl, 0);\n    for (let sl: u32 = 0; sl < SL_SIZE; ++sl) {\n      SETHEAD(root, fl, sl, null);\n    }\n  }\n  var memStart = rootOffset + ROOT_SIZE;\n  if (ASC_LOW_MEMORY_LIMIT) {\n    const memEnd = <usize>ASC_LOW_MEMORY_LIMIT & ~AL_MASK;\n    if (memStart <= memEnd) addMemory(root, memStart, memEnd);\n    else unreachable(); // low memory limit already exceeded\n  } else {\n    addMemory(root, memStart, memory.size() << 16);\n  }\n  ROOT = root;\n}\n\n/** Allocates a block of the specified size. */\nexport function allocateBlock(root: Root, size: usize): Block {\n  var payloadSize = prepareSize(size);\n  var block = searchBlock(root, payloadSize);\n  if (!block) {\n    growMemory(root, payloadSize);\n    block = changetype<Block>(searchBlock(root, payloadSize));\n    if (DEBUG) assert(block); // must be found now\n  }\n  if (DEBUG) assert((block.mmInfo & ~TAGS_MASK) >= payloadSize); // must fit\n  removeBlock(root, <Block>block);\n  prepareBlock(root, <Block>block, payloadSize);\n  if (isDefined(ASC_RTRACE)) onalloc(block);\n  return <Block>block;\n}\n\n/** Reallocates a block to the specified size. */\nexport function reallocateBlock(root: Root, block: Block, size: usize): Block {\n  var payloadSize = prepareSize(size);\n  var blockInfo = block.mmInfo;\n  var blockSize = blockInfo & ~TAGS_MASK;\n\n  // possibly split and update runtime size if it still fits\n  if (payloadSize <= blockSize) {\n    prepareBlock(root, block, payloadSize);\n    if (isDefined(ASC_RTRACE)) {\n      if (payloadSize != blockSize) onresize(block, BLOCK_OVERHEAD + blockSize);\n    }\n    return block;\n  }\n\n  // merge with right free block if merger is large enough\n  var right = GETRIGHT(block);\n  var rightInfo = right.mmInfo;\n  if (rightInfo & FREE) {\n    let mergeSize = blockSize + BLOCK_OVERHEAD + (rightInfo & ~TAGS_MASK);\n    if (mergeSize >= payloadSize) {\n      removeBlock(root, right);\n      block.mmInfo = (blockInfo & TAGS_MASK) | mergeSize;\n      prepareBlock(root, block, payloadSize);\n      if (isDefined(ASC_RTRACE)) onresize(block, BLOCK_OVERHEAD + blockSize);\n      return block;\n    }\n  }\n\n  // otherwise move the block\n  return moveBlock(root, block, size);\n}\n\n/** Moves a block to a new one of the specified size. */\nfunction moveBlock(root: Root, block: Block, newSize: usize): Block {\n  var newBlock = allocateBlock(root, newSize);\n  memory.copy(changetype<usize>(newBlock) + BLOCK_OVERHEAD, changetype<usize>(block) + BLOCK_OVERHEAD, block.mmInfo & ~TAGS_MASK);\n  if (changetype<usize>(block) >= __heap_base) {\n    if (isDefined(ASC_RTRACE)) onmove(block, newBlock);\n    freeBlock(root, block);\n  }\n  return newBlock;\n}\n\n/** Frees a block. */\nexport function freeBlock(root: Root, block: Block): void {\n  if (isDefined(ASC_RTRACE)) onfree(block);\n  block.mmInfo = block.mmInfo | FREE;\n  insertBlock(root, block);\n}\n\n/** Checks that a used block is valid to be freed or reallocated. */\nfunction checkUsedBlock(ptr: usize): Block {\n  var block = changetype<Block>(ptr - BLOCK_OVERHEAD);\n  assert(\n    ptr != 0 && !(ptr & AL_MASK) &&  // must exist and be aligned\n    !(block.mmInfo & FREE)           // must be used\n  );\n  return block;\n}\n\n// @ts-ignore: decorator\n@global @unsafe\nexport function __alloc(size: usize): usize {\n  if (!ROOT) initialize();\n  return changetype<usize>(allocateBlock(ROOT, size)) + BLOCK_OVERHEAD;\n}\n\n// @ts-ignore: decorator\n@global @unsafe\nexport function __realloc(ptr: usize, size: usize): usize {\n  if (!ROOT) initialize();\n  return (ptr < __heap_base\n    ? changetype<usize>(moveBlock(ROOT, checkUsedBlock(ptr), size))\n    : changetype<usize>(reallocateBlock(ROOT, checkUsedBlock(ptr), size))\n  ) + BLOCK_OVERHEAD;\n}\n\n// @ts-ignore: decorator\n@global @unsafe\nexport function __free(ptr: usize): void {\n  if (ptr < __heap_base) return;\n  if (!ROOT) initialize();\n  freeBlock(ROOT, checkUsedBlock(ptr));\n}\n","import { BLOCK, BLOCK_OVERHEAD, OBJECT_OVERHEAD, OBJECT_MAXSIZE, TOTAL_OVERHEAD, DEBUG, TRACE, RTRACE } from \"./common\";\nimport { onvisit, oncollect } from \"./rtrace\";\nimport { E_ALLOCATION_TOO_LARGE, E_ALREADY_PINNED, E_NOT_PINNED } from \"../util/error\";\n\n// === TCMS: A Two-Color Mark & Sweep garbage collector ===\n\n// ╒═════════════╤══════════════ Colors ═══════════════════════════╕\n// │ Color       │ Meaning                                         │\n// ├─────────────┼─────────────────────────────────────────────────┤\n// │ WHITE*      │ Unreachable                                     │\n// │ BLACK*      │ Reachable                                       │\n// │ TRANSPARENT │ Manually pinned (always reachable)              │\n// └─────────────┴─────────────────────────────────────────────────┘\n// * flipped between cycles\n\n// @ts-ignore: decorator\n@lazy var white = 0;\n// @ts-ignore: decorator\n@inline const transparent = 3;\n// @ts-ignore: decorator\n@inline const COLOR_MASK = 3;\n\n/** Size in memory of all objects currently managed by the GC. */\n// @ts-ignore: decorator\n@lazy var total: usize = 0;\n\n// @ts-ignore: decorator\n@lazy var fromSpace = initLazy(changetype<Object>(memory.data(offsetof<Object>())));\n// @ts-ignore: decorator\n@lazy var toSpace = initLazy(changetype<Object>(memory.data(offsetof<Object>())));\n// @ts-ignore: decorator\n@lazy var pinSpace = initLazy(changetype<Object>(memory.data(offsetof<Object>())));\n\nfunction initLazy(space: Object): Object {\n  space.nextWithColor = changetype<usize>(space);\n  space.prev = space;\n  return space;\n}\n\n/** Visit cookie indicating scanning of an object. */\n// @ts-ignore: decorator\n@inline const VISIT_SCAN = 0;\n\n// ╒═══════════════ Managed object layout (32-bit) ════════════════╕\n//    3                   2                   1\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┤\n// │                      Memory manager block                     │\n// ╞═══════════════════════════════════════════════════════════╤═══╡\n// │                              next                         │ C │ = nextWithColor\n// ├───────────────────────────────────────────────────────────┴───┤\n// │                              prev                             │\n// ├───────────────────────────────────────────────────────────────┤\n// │                              rtId                             │\n// ├───────────────────────────────────────────────────────────────┤\n// │                              rtSize                           │\n// ╞>ptr═══════════════════════════════════════════════════════════╡\n// │                               ...                             │\n// C: color\n\n/** Represents a managed object in memory, consisting of a header followed by the object's data. */\n@unmanaged class Object extends BLOCK {\n  /** Pointer to the next object with color flags stored in the alignment bits. */\n  nextWithColor: usize; // *u32\n  /** Pointer to the previous object. */\n  prev: Object; // *u32\n  /** Runtime id. */\n  rtId: u32;\n  /** Runtime size. */\n  rtSize: u32;\n\n  /** Gets the pointer to the next object. */\n  get next(): Object {\n    return changetype<Object>(this.nextWithColor & ~COLOR_MASK);\n  }\n\n  /** Sets the pointer to the next object. */\n  set next(obj: Object) {\n    this.nextWithColor = changetype<usize>(obj) | (this.nextWithColor & COLOR_MASK);\n  }\n\n  /** Gets this object's color. */\n  get color(): i32 {\n    return i32(this.nextWithColor & COLOR_MASK);\n  }\n\n  /** Sets this object's color. */\n  set color(color: i32) {\n    this.nextWithColor = (this.nextWithColor & ~COLOR_MASK) | color;\n  }\n\n  /** Gets the size of this object in memory. */\n  get size(): usize {\n    return BLOCK_OVERHEAD + (this.mmInfo & ~3);\n  }\n\n  /** Unlinks this object from its list. */\n  unlink(): void {\n    let next = this.next;\n    if (next == null) {\n      if (DEBUG) assert(this.prev == null && changetype<usize>(this) < __heap_base);\n      return; // static data not yet linked\n    }\n    let prev = this.prev;\n    if (DEBUG) assert(prev);\n    next.prev = prev;\n    prev.next = next;\n  }\n\n  /** Links this object to the specified list, with the given color. */\n  linkTo(list: Object, withColor: i32): void {\n    let prev = list.prev;\n    this.nextWithColor = changetype<usize>(list) | withColor;\n    this.prev = prev;\n    prev.next = this;\n    list.prev = this;\n  }\n}\n\n// Garbage collector interface\n\n// @ts-ignore: decorator\n@global @unsafe\nexport function __new(size: usize, id: i32): usize {\n  if (size > OBJECT_MAXSIZE) throw new Error(E_ALLOCATION_TOO_LARGE);\n  var obj = changetype<Object>(__alloc(OBJECT_OVERHEAD + size) - BLOCK_OVERHEAD);\n  obj.rtId = id;\n  obj.rtSize = <u32>size;\n  obj.linkTo(fromSpace, white);\n  total += obj.size;\n  return changetype<usize>(obj) + TOTAL_OVERHEAD;\n}\n\n// @ts-ignore: decorator\n@global @unsafe\nexport function __renew(oldPtr: usize, size: usize): usize {\n  var oldObj = changetype<Object>(oldPtr - TOTAL_OVERHEAD);\n  if (oldPtr < __heap_base) { // move to heap for simplicity\n    let newPtr = __new(size, oldObj.rtId);\n    memory.copy(newPtr, oldPtr, min(size, oldObj.rtSize));\n    return newPtr;\n  }\n  if (size > OBJECT_MAXSIZE) throw new Error(E_ALLOCATION_TOO_LARGE);\n  total -= oldObj.size;\n  var newPtr = __realloc(oldPtr - OBJECT_OVERHEAD, OBJECT_OVERHEAD + size) + OBJECT_OVERHEAD;\n  var newObj = changetype<Object>(newPtr - TOTAL_OVERHEAD);\n  newObj.rtSize = <u32>size;\n\n  // Replace with new object\n  newObj.next.prev = newObj;\n  newObj.prev.next = newObj;\n\n  total += newObj.size;\n  return newPtr;\n}\n\n// @ts-ignore: decorator\n@global @unsafe\nexport function __link(parentPtr: usize, childPtr: usize, expectMultiple: bool): void {\n  // nop\n}\n\n// @ts-ignore: decorator\n@global @unsafe\nexport function __visit(ptr: usize, cookie: i32): void {\n  if (!ptr) return;\n  let obj = changetype<Object>(ptr - TOTAL_OVERHEAD);\n  if (RTRACE) if (!onvisit(obj)) return;\n  if (obj.color == white) {\n    obj.unlink(); // from fromSpace\n    obj.linkTo(toSpace, i32(!white));\n  }\n}\n\n// @ts-ignore: decorator\n@global @unsafe\nexport function __pin(ptr: usize): usize {\n  if (ptr) {\n    let obj = changetype<Object>(ptr - TOTAL_OVERHEAD);\n    if (obj.color == transparent) {\n      throw new Error(E_ALREADY_PINNED);\n    }\n    obj.unlink(); // from fromSpace\n    obj.linkTo(pinSpace, transparent);\n  }\n  return ptr;\n}\n\n// @ts-ignore: decorator\n@global @unsafe\nexport function __unpin(ptr: usize): void {\n  if (!ptr) return;\n  var obj = changetype<Object>(ptr - TOTAL_OVERHEAD);\n  if (obj.color != transparent) {\n    throw new Error(E_NOT_PINNED);\n  }\n  obj.unlink(); // from pinSpace\n  obj.linkTo(fromSpace, white);\n}\n\n// @ts-ignore: decorator\n@global @unsafe\nexport function __collect(): void {\n  if (TRACE) trace(\"GC at\", 1, total);\n\n  // Mark roots (add to toSpace)\n  __visit_globals(VISIT_SCAN);\n\n  // Mark direct members of pinned objects (add to toSpace)\n  var pn = pinSpace;\n  var iter = pn.next;\n  while (iter != pn) {\n    if (DEBUG) assert(iter.color == transparent);\n    __visit_members(changetype<usize>(iter) + TOTAL_OVERHEAD, VISIT_SCAN);\n    iter = iter.next;\n  }\n\n  // Mark what's reachable from toSpace\n  var black = i32(!white);\n  var to = toSpace;\n  iter = to.next;\n  while (iter != to) {\n    if (DEBUG) assert(iter.color == black);\n    __visit_members(changetype<usize>(iter) + TOTAL_OVERHEAD, VISIT_SCAN);\n    iter = iter.next;\n  }\n\n  // Sweep what's left in fromSpace\n  var from = fromSpace;\n  iter = from.next;\n  while (iter != from) {\n    if (DEBUG) assert(iter.color == white);\n    let newNext = iter.next;\n    if (changetype<usize>(iter) < __heap_base) {\n      iter.nextWithColor = 0; // may become linked again\n      iter.prev = changetype<Object>(0);\n    } else {\n      total -= iter.size;\n      if (isDefined(__finalize)) __finalize(changetype<usize>(iter) + TOTAL_OVERHEAD);\n      __free(changetype<usize>(iter) + BLOCK_OVERHEAD);\n    }\n    iter = newNext;\n  }\n  from.nextWithColor = changetype<usize>(from);\n  from.prev = from;\n\n  // Flip spaces and colors\n  fromSpace = to;\n  toSpace = from;\n  white = black;\n\n  if (TRACE) trace(\"GC done at\", 1, total);\n  if (RTRACE) oncollect(total);\n}\n","/// <reference path=\"../rt/index.d.ts\" />\n\nimport { idof } from \"../builtins\";\nimport { CharCode } from \"./string\";\n\n// @ts-ignore: decorator\n@inline\nexport const MAX_DOUBLE_LENGTH = 28;\n\n// @ts-ignore: decorator\n@lazy @inline const POWERS10 = memory.data<u32>([\n  1,\n  10,\n  100,\n  1000,\n  10000,\n  100000,\n  1000000,\n  10000000,\n  100000000,\n  1000000000\n]);\n\n/*\n  Lookup table for pairwise char codes in range [0-99]\n\n  \"00\", \"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\",\n  \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\",\n  \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\",\n  \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\",\n  \"40\", \"41\", \"42\", \"43\", \"44\", \"45\", \"46\", \"47\", \"48\", \"49\",\n  \"50\", \"51\", \"52\", \"53\", \"54\", \"55\", \"56\", \"57\", \"58\", \"59\",\n  \"60\", \"61\", \"62\", \"63\", \"64\", \"65\", \"66\", \"67\", \"68\", \"69\",\n  \"70\", \"71\", \"72\", \"73\", \"74\", \"75\", \"76\", \"77\", \"78\", \"79\",\n  \"80\", \"81\", \"82\", \"83\", \"84\", \"85\", \"86\", \"87\", \"88\", \"89\",\n  \"90\", \"91\", \"92\", \"93\", \"94\", \"95\", \"96\", \"97\", \"98\", \"99\"\n*/\n// @ts-ignore: decorator\n@lazy @inline const DIGITS = memory.data<u32>([\n  0x00300030, 0x00310030, 0x00320030, 0x00330030, 0x00340030,\n  0x00350030, 0x00360030, 0x00370030, 0x00380030, 0x00390030,\n  0x00300031, 0x00310031, 0x00320031, 0x00330031, 0x00340031,\n  0x00350031, 0x00360031, 0x00370031, 0x00380031, 0x00390031,\n  0x00300032, 0x00310032, 0x00320032, 0x00330032, 0x00340032,\n  0x00350032, 0x00360032, 0x00370032, 0x00380032, 0x00390032,\n  0x00300033, 0x00310033, 0x00320033, 0x00330033, 0x00340033,\n  0x00350033, 0x00360033, 0x00370033, 0x00380033, 0x00390033,\n  0x00300034, 0x00310034, 0x00320034, 0x00330034, 0x00340034,\n  0x00350034, 0x00360034, 0x00370034, 0x00380034, 0x00390034,\n  0x00300035, 0x00310035, 0x00320035, 0x00330035, 0x00340035,\n  0x00350035, 0x00360035, 0x00370035, 0x00380035, 0x00390035,\n  0x00300036, 0x00310036, 0x00320036, 0x00330036, 0x00340036,\n  0x00350036, 0x00360036, 0x00370036, 0x00380036, 0x00390036,\n  0x00300037, 0x00310037, 0x00320037, 0x00330037, 0x00340037,\n  0x00350037, 0x00360037, 0x00370037, 0x00380037, 0x00390037,\n  0x00300038, 0x00310038, 0x00320038, 0x00330038, 0x00340038,\n  0x00350038, 0x00360038, 0x00370038, 0x00380038, 0x00390038,\n  0x00300039, 0x00310039, 0x00320039, 0x00330039, 0x00340039,\n  0x00350039, 0x00360039, 0x00370039, 0x00380039, 0x00390039\n]);\n\n// Lookup table for pairwise char codes in range [0x00-0xFF]\n// @ts-ignore: decorator\n@lazy @inline const HEX_DIGITS =\n\"000102030405060708090a0b0c0d0e0f\\\n101112131415161718191a1b1c1d1e1f\\\n202122232425262728292a2b2c2d2e2f\\\n303132333435363738393a3b3c3d3e3f\\\n404142434445464748494a4b4c4d4e4f\\\n505152535455565758595a5b5c5d5e5f\\\n606162636465666768696a6b6c6d6e6f\\\n707172737475767778797a7b7c7d7e7f\\\n808182838485868788898a8b8c8d8e8f\\\n909192939495969798999a9b9c9d9e9f\\\na0a1a2a3a4a5a6a7a8a9aaabacadaeaf\\\nb0b1b2b3b4b5b6b7b8b9babbbcbdbebf\\\nc0c1c2c3c4c5c6c7c8c9cacbcccdcecf\\\nd0d1d2d3d4d5d6d7d8d9dadbdcdddedf\\\ne0e1e2e3e4e5e6e7e8e9eaebecedeeef\\\nf0f1f2f3f4f5f6f7f8f9fafbfcfdfeff\";\n\n// @ts-ignore: decorator\n@lazy @inline const ANY_DIGITS = \"0123456789abcdefghijklmnopqrstuvwxyz\";\n\n// @ts-ignore: decorator\n@lazy @inline const EXP_POWERS = memory.data<i16>([/* eslint-disable indent */\n  -1220, -1193, -1166, -1140, -1113, -1087, -1060, -1034, -1007,  -980,\n   -954,  -927,  -901,  -874,  -847,  -821,  -794,  -768,  -741,  -715,\n   -688,  -661,  -635,  -608,  -582,  -555,  -529,  -502,  -475,  -449,\n   -422,  -396,  -369,  -343,  -316,  -289,  -263,  -236,  -210,  -183,\n   -157,  -130,  -103,   -77,   -50,   -24,     3,    30,    56,    83,\n    109,   136,   162,   189,   216,   242,   269,   295,   322,   348,\n    375,   402,   428,   455,   481,   508,   534,   561,   588,   614,\n    641,   667,   694,   720,   747,   774,   800,   827,   853,   880,\n    907,   933,   960,   986,  1013,  1039,  1066\n/* eslint-enable indent */]);\n\n// 1e-348, 1e-340, ..., 1e340\n// @ts-ignore: decorator\n@lazy @inline const FRC_POWERS = memory.data<u64>([\n  0xFA8FD5A0081C0288, 0xBAAEE17FA23EBF76, 0x8B16FB203055AC76, 0xCF42894A5DCE35EA,\n  0x9A6BB0AA55653B2D, 0xE61ACF033D1A45DF, 0xAB70FE17C79AC6CA, 0xFF77B1FCBEBCDC4F,\n  0xBE5691EF416BD60C, 0x8DD01FAD907FFC3C, 0xD3515C2831559A83, 0x9D71AC8FADA6C9B5,\n  0xEA9C227723EE8BCB, 0xAECC49914078536D, 0x823C12795DB6CE57, 0xC21094364DFB5637,\n  0x9096EA6F3848984F, 0xD77485CB25823AC7, 0xA086CFCD97BF97F4, 0xEF340A98172AACE5,\n  0xB23867FB2A35B28E, 0x84C8D4DFD2C63F3B, 0xC5DD44271AD3CDBA, 0x936B9FCEBB25C996,\n  0xDBAC6C247D62A584, 0xA3AB66580D5FDAF6, 0xF3E2F893DEC3F126, 0xB5B5ADA8AAFF80B8,\n  0x87625F056C7C4A8B, 0xC9BCFF6034C13053, 0x964E858C91BA2655, 0xDFF9772470297EBD,\n  0xA6DFBD9FB8E5B88F, 0xF8A95FCF88747D94, 0xB94470938FA89BCF, 0x8A08F0F8BF0F156B,\n  0xCDB02555653131B6, 0x993FE2C6D07B7FAC, 0xE45C10C42A2B3B06, 0xAA242499697392D3,\n  0xFD87B5F28300CA0E, 0xBCE5086492111AEB, 0x8CBCCC096F5088CC, 0xD1B71758E219652C,\n  0x9C40000000000000, 0xE8D4A51000000000, 0xAD78EBC5AC620000, 0x813F3978F8940984,\n  0xC097CE7BC90715B3, 0x8F7E32CE7BEA5C70, 0xD5D238A4ABE98068, 0x9F4F2726179A2245,\n  0xED63A231D4C4FB27, 0xB0DE65388CC8ADA8, 0x83C7088E1AAB65DB, 0xC45D1DF942711D9A,\n  0x924D692CA61BE758, 0xDA01EE641A708DEA, 0xA26DA3999AEF774A, 0xF209787BB47D6B85,\n  0xB454E4A179DD1877, 0x865B86925B9BC5C2, 0xC83553C5C8965D3D, 0x952AB45CFA97A0B3,\n  0xDE469FBD99A05FE3, 0xA59BC234DB398C25, 0xF6C69A72A3989F5C, 0xB7DCBF5354E9BECE,\n  0x88FCF317F22241E2, 0xCC20CE9BD35C78A5, 0x98165AF37B2153DF, 0xE2A0B5DC971F303A,\n  0xA8D9D1535CE3B396, 0xFB9B7CD9A4A7443C, 0xBB764C4CA7A44410, 0x8BAB8EEFB6409C1A,\n  0xD01FEF10A657842C, 0x9B10A4E5E9913129, 0xE7109BFBA19C0C9D, 0xAC2820D9623BF429,\n  0x80444B5E7AA7CF85, 0xBF21E44003ACDD2D, 0x8E679C2F5E44FF8F, 0xD433179D9C8CB841,\n  0x9E19DB92B4E31BA9, 0xEB96BF6EBADF77D9, 0xAF87023B9BF0EE6B\n]);\n\n// @ts-ignore: decorator\n@inline\nexport function isPowerOf2<T extends number>(value: T): bool {\n  return popcnt<T>(value) == 1;\n}\n\n// Count number of decimals for u32 values\n// In our case input value always non-zero so we can simplify some parts\nexport function decimalCount32(value: u32): u32 {\n  if (value < 100000) {\n    if (value < 100) {\n      return 1 + u32(value >= 10);\n    } else {\n      return 3 + u32(value >= 10000) + u32(value >= 1000);\n    }\n  } else {\n    if (value < 10000000) {\n      return 6 + u32(value >= 1000000);\n    } else {\n      return 8 + u32(value >= 1000000000) + u32(value >= 100000000);\n    }\n  }\n}\n\n// Count number of decimals for u64 values\n// In our case input value always greater than 2^32-1 so we can skip some parts\nexport function decimalCount64High(value: u64): u32 {\n  if (value < 1000000000000000) {\n    if (value < 1000000000000) {\n      return 10 + u32(value >= 100000000000) + u32(value >= 10000000000);\n    } else {\n      return 13 + u32(value >= 100000000000000) + u32(value >= 10000000000000);\n    }\n  } else {\n    if (value < 100000000000000000) {\n      return 16 + u32(value >= 10000000000000000);\n    } else {\n      return 18 + u32(value >= 10000000000000000000) + u32(value >= 1000000000000000000);\n    }\n  }\n}\n\nfunction ulog_base(num: u64, base: i32): u32 {\n  if (isPowerOf2(base)) {\n    return (63 - <u32>clz(num)) / (31 - <u32>clz(base)) + 1;\n  }\n  var b64 = u64(base), b = b64, e: u32 = 1;\n  while (num >= b) {\n    num /= b;\n    b *= b;\n    e <<= 1;\n  }\n  while (num >= 1) {\n    num /= b64;\n    e++;\n  }\n  return e - 1;\n}\n\nfunction utoa32_dec_lut(buffer: usize, num: u32, offset: usize): void {\n  while (num >= 10000) {\n    // in most VMs i32/u32 div and modulo by constant can be shared and simplificate\n    let t = num / 10000;\n    let r = num % 10000;\n    num = t;\n\n    let d1 = r / 100;\n    let d2 = r % 100;\n\n    let digits1 = <u64>load<u32>(DIGITS + (<usize>d1 << alignof<u32>()));\n    let digits2 = <u64>load<u32>(DIGITS + (<usize>d2 << alignof<u32>()));\n\n    offset -= 4;\n    store<u64>(buffer + (offset << 1), digits1 | (digits2 << 32));\n  }\n\n  if (num >= 100) {\n    let t  = num / 100;\n    let d1 = num % 100;\n    num = t;\n    offset -= 2;\n    let digits = load<u32>(DIGITS + (<usize>d1 << alignof<u32>()));\n    store<u32>(buffer + (offset << 1), digits);\n  }\n\n  if (num >= 10) {\n    offset -= 2;\n    let digits = load<u32>(DIGITS + (<usize>num << alignof<u32>()));\n    store<u32>(buffer + (offset << 1), digits);\n  } else {\n    offset -= 1;\n    let digit = CharCode._0 + num;\n    store<u16>(buffer + (offset << 1), digit);\n  }\n}\n\nfunction utoa64_dec_lut(buffer: usize, num: u64, offset: usize): void {\n  while (num >= 100000000) {\n    let t = num / 100000000;\n    let r = <usize>(num - t * 100000000);\n    num = t;\n\n    let b = r / 10000;\n    let c = r % 10000;\n\n    let b1 = b / 100;\n    let b2 = b % 100;\n    let c1 = c / 100;\n    let c2 = c % 100;\n\n    let digits1 = <u64>load<u32>(DIGITS + (<usize>c1 << alignof<u32>()));\n    let digits2 = <u64>load<u32>(DIGITS + (<usize>c2 << alignof<u32>()));\n\n    offset -= 4;\n    store<u64>(buffer + (offset << 1), digits1 | (digits2 << 32));\n\n    digits1 = <u64>load<u32>(DIGITS + (<usize>b1 << alignof<u32>()));\n    digits2 = <u64>load<u32>(DIGITS + (<usize>b2 << alignof<u32>()));\n\n    offset -= 4;\n    store<u64>(buffer + (offset << 1), digits1 | (digits2 << 32));\n  }\n\n  utoa32_dec_lut(buffer, <u32>num, offset);\n}\n\nfunction utoa_hex_lut(buffer: usize, num: u64, offset: usize): void {\n  const lut = changetype<usize>(HEX_DIGITS);\n  while (offset >= 2) {\n    offset -= 2;\n    store<u32>(\n      buffer + (offset << 1),\n      load<u32>(lut + ((<usize>num & 0xFF) << alignof<u32>()))\n    );\n    num >>= 8;\n  }\n  if (offset & 1) {\n    store<u16>(buffer, load<u16>(lut + (<usize>num << 6)));\n  }\n}\n\nfunction utoa_dec_simple<T extends number>(buffer: usize, num: T, offset: usize): void {\n  do {\n    let t = num / 10;\n    let r = <u32>(num % 10);\n    num = changetype<T>(t);\n    offset--;\n    store<u16>(buffer + (offset << 1), CharCode._0 + r);\n  } while (num);\n}\n\nfunction utoa_hex_simple<T extends number>(buffer: usize, num: T, offset: usize): void {\n  do {\n    let d = num & 0x0F | CharCode._0;\n    d += select<T>(<T>0x27, <T>0, d > <T>CharCode._9);\n    offset--;\n    store<u16>(buffer + (offset << 1), d);\n    // @ts-ignore: type\n    num >>= 4;\n  } while (num);\n}\n\n// @ts-ignore: decorator\n@inline\nexport function utoa32_dec_core(buffer: usize, num: u32, offset: usize): void {\n  if (ASC_SHRINK_LEVEL >= 1) {\n    utoa_dec_simple<u32>(buffer, num, offset);\n  } else {\n    utoa32_dec_lut(buffer, num, offset);\n  }\n}\n\n// @ts-ignore: decorator\n@inline\nfunction utoa32_hex_core(buffer: usize, num: u32, offset: usize): void {\n  if (ASC_SHRINK_LEVEL >= 1) {\n    utoa_hex_simple<u32>(buffer, num, offset);\n  } else {\n    utoa_hex_lut(buffer, num, offset);\n  }\n}\n\n// @ts-ignore: decorator\n@inline\nfunction utoa64_dec_core(buffer: usize, num: u64, offset: usize): void {\n  if (ASC_SHRINK_LEVEL >= 1) {\n    utoa_dec_simple<u64>(buffer, num, offset);\n  } else {\n    utoa64_dec_lut(buffer, num, offset);\n  }\n}\n\n// @ts-ignore: decorator\n@inline\nfunction utoa64_hex_core(buffer: usize, num: u64, offset: usize): void {\n  if (ASC_SHRINK_LEVEL >= 1) {\n    utoa_hex_simple<u64>(buffer, num, offset);\n  } else {\n    utoa_hex_lut(buffer, num, offset);\n  }\n}\n\nfunction utoa64_any_core(buffer: usize, num: u64, offset: usize, radix: i32): void {\n  const lut = changetype<usize>(ANY_DIGITS);\n  var base = u64(radix);\n  if ((radix & (radix - 1)) == 0) { // for radix which pow of two\n    let shift = u64(ctz(radix) & 7);\n    let mask = base - 1;\n    do {\n      offset--;\n      store<u16>(buffer + (offset << 1), load<u16>(lut + (usize(num & mask) << 1)));\n      num >>= shift;\n    } while (num);\n  } else {\n    do {\n      offset--;\n      let q = num / base;\n      store<u16>(buffer + (offset << 1), load<u16>(lut + (usize(num - q * base) << 1)));\n      num = q;\n    } while (num);\n  }\n}\n\nexport function utoa32(value: u32, radix: i32): String {\n  if (radix < 2 || radix > 36) {\n    throw new RangeError(\"toString() radix argument must be between 2 and 36\");\n  }\n  if (!value) return \"0\";\n  var out: String;\n\n  if (radix == 10) {\n    let decimals = decimalCount32(value);\n    out = changetype<String>(__new(decimals << 1, idof<String>()));\n    utoa32_dec_core(changetype<usize>(out), value, decimals);\n  } else if (radix == 16) {\n    let decimals = (31 - clz(value) >> 2) + 1;\n    out = changetype<String>(__new(decimals << 1, idof<String>()));\n    utoa32_hex_core(changetype<usize>(out), value, decimals);\n  } else {\n    let decimals = ulog_base(value, radix);\n    out = changetype<String>(__new(decimals << 1, idof<String>()));\n    utoa64_any_core(changetype<usize>(out), value, decimals, radix);\n  }\n  return out;\n}\n\nexport function itoa32(value: i32, radix: i32): String {\n  if (radix < 2 || radix > 36) {\n    throw new RangeError(\"toString() radix argument must be between 2 and 36\");\n  }\n  if (!value) return \"0\";\n\n  var sign = value >>> 31;\n  if (sign) value = -value;\n  var out: String;\n\n  if (radix == 10) {\n    let decimals = decimalCount32(value) + sign;\n    out = changetype<String>(__new(decimals << 1, idof<String>()));\n    utoa32_dec_core(changetype<usize>(out), value, decimals);\n  } else if (radix == 16) {\n    let decimals = (31 - clz(value) >> 2) + 1 + sign;\n    out = changetype<String>(__new(decimals << 1, idof<String>()));\n    utoa32_hex_core(changetype<usize>(out), value, decimals);\n  } else {\n    let val32 = u32(value);\n    let decimals = ulog_base(val32, radix) + sign;\n    out = changetype<String>(__new(decimals << 1, idof<String>()));\n    utoa64_any_core(changetype<usize>(out), val32, decimals, radix);\n  }\n  if (sign) store<u16>(changetype<usize>(out), CharCode.MINUS);\n  return out;\n}\n\nexport function utoa64(value: u64, radix: i32): String {\n  if (radix < 2 || radix > 36) {\n    throw new RangeError(\"toString() radix argument must be between 2 and 36\");\n  }\n  if (!value) return \"0\";\n  var out: String;\n\n  if (radix == 10) {\n    if (value <= u32.MAX_VALUE) {\n      let val32    = <u32>value;\n      let decimals = decimalCount32(val32);\n      out = changetype<String>(__new(decimals << 1, idof<String>()));\n      utoa32_dec_core(changetype<usize>(out), val32, decimals);\n    } else {\n      let decimals = decimalCount64High(value);\n      out = changetype<String>(__new(decimals << 1, idof<String>()));\n      utoa64_dec_core(changetype<usize>(out), value, decimals);\n    }\n  } else if (radix == 16) {\n    let decimals = (63 - u32(clz(value)) >> 2) + 1;\n    out = changetype<String>(__new(decimals << 1, idof<String>()));\n    utoa64_hex_core(changetype<usize>(out), value, decimals);\n  } else {\n    let decimals = ulog_base(value, radix);\n    out = changetype<String>(__new(decimals << 1, idof<String>()));\n    utoa64_any_core(changetype<usize>(out), value, decimals, radix);\n  }\n  return out;\n}\n\nexport function itoa64(value: i64, radix: i32): String {\n  if (radix < 2 || radix > 36) {\n    throw new RangeError(\"toString() radix argument must be between 2 and 36\");\n  }\n  if (!value) return \"0\";\n\n  var sign = u32(value >>> 63);\n  if (sign) value = -value;\n  var out: String;\n\n  if (radix == 10) {\n    if (<u64>value <= <u64>u32.MAX_VALUE) {\n      let val32    = <u32>value;\n      let decimals = decimalCount32(val32) + sign;\n      out = changetype<String>(__new(decimals << 1, idof<String>()));\n      utoa32_dec_core(changetype<usize>(out), val32, decimals);\n    } else {\n      let decimals = decimalCount64High(value) + sign;\n      out = changetype<String>(__new(decimals << 1, idof<String>()));\n      utoa64_dec_core(changetype<usize>(out), value, decimals);\n    }\n  } else if (radix == 16) {\n    let decimals = (63 - u32(clz(value)) >> 2) + 1 + sign;\n    out = changetype<String>(__new(decimals << 1, idof<String>()));\n    utoa64_hex_core(changetype<usize>(out), value, decimals);\n  } else {\n    let decimals = ulog_base(value, radix) + sign;\n    out = changetype<String>(__new(decimals << 1, idof<String>()));\n    utoa64_any_core(changetype<usize>(out), value, decimals, radix);\n  }\n  if (sign) store<u16>(changetype<usize>(out), CharCode.MINUS);\n  return out;\n}\n\n// @ts-ignore: decorator\n@lazy var _K: i32 = 0;\n\n// // @ts-ignore: decorator\n// @lazy\n// var _frc: u64 = 0;\n\n// @ts-ignore: decorator\n@lazy var _exp: i32 = 0;\n\n// @ts-ignore: decorator\n@lazy var _frc_minus: u64 = 0;\n\n// @ts-ignore: decorator\n@lazy var _frc_plus:  u64 = 0;\n\n// @ts-ignore: decorator\n@lazy var _frc_pow: u64 = 0;\n\n// @ts-ignore: decorator\n@lazy var _exp_pow: i32 = 0;\n\n// @ts-ignore: decorator\n@inline\nfunction umul64f(u: u64, v: u64): u64 {\n  var u0 = u & 0xFFFFFFFF;\n  var v0 = v & 0xFFFFFFFF;\n\n  var u1 = u >> 32;\n  var v1 = v >> 32;\n\n  var l = u0 * v0;\n  var t = u1 * v0 + (l >> 32);\n  var w = u0 * v1 + (t & 0xFFFFFFFF);\n\n  w += 0x7FFFFFFF; // rounding\n\n  t >>= 32;\n  w >>= 32;\n\n  return u1 * v1 + t + w;\n}\n\n// @ts-ignore: decorator\n@inline\nfunction umul64e(e1: i32, e2: i32): i32 {\n  return e1 + e2 + 64; // where 64 is significand size\n}\n\n// @ts-ignore: decorator\n@inline\nfunction normalizedBoundaries(f: u64, e: i32): void {\n  var frc = (f << 1) + 1;\n  var exp = e - 1;\n  var off = <i32>clz<u64>(frc);\n  frc <<= off;\n  exp  -= off;\n\n  var m = 1 + i32(f == 0x0010000000000000);\n\n  _frc_plus  = frc;\n  _frc_minus = ((f << m) - 1) << e - m - exp;\n  _exp = exp;\n}\n\n// @ts-ignore: decorator\n@inline\nfunction grisuRound(buffer: usize, len: i32, delta: u64, rest: u64, ten_kappa: u64, wp_w: u64): void {\n  var lastp = buffer + ((len - 1) << 1);\n  var digit = load<u16>(lastp);\n  while (\n    rest < wp_w &&\n    delta - rest >= ten_kappa && (\n      rest + ten_kappa < wp_w ||\n      wp_w - rest > rest + ten_kappa - wp_w\n    )\n  ) {\n    --digit;\n    rest += ten_kappa;\n  }\n  store<u16>(lastp, digit);\n}\n\n// @ts-ignore: decorator\n@inline\nfunction getCachedPower(minExp: i32): void {\n  const c = reinterpret<f64>(0x3FD34413509F79FE); // 1 / lg(10) = 0.30102999566398114\n  var dk = (-61 - minExp) * c + 347;\t            // dk must be positive, so can do ceiling in positive\n  var k = <i32>dk;\n  k += i32(k != dk); // conversion with ceil\n\n  var index = (k >> 3) + 1;\n  _K = 348 - (index << 3);\t// decimal exponent no need lookup table\n  _frc_pow = load<u64>(FRC_POWERS + (<usize>index << alignof<u64>()));\n  _exp_pow = load<i16>(EXP_POWERS + (<usize>index << alignof<i16>()));\n}\n\n// @ts-ignore: decorator\n@inline\nfunction grisu2(value: f64, buffer: usize, sign: i32): i32 {\n\n  // frexp routine\n  var uv  = reinterpret<u64>(value);\n  var exp = i32((uv & 0x7FF0000000000000) >>> 52);\n  var sid = uv & 0x000FFFFFFFFFFFFF;\n  var frc = (u64(exp != 0) << 52) + sid;\n  exp = select<i32>(exp, 1, exp) - (0x3FF + 52);\n\n  normalizedBoundaries(frc, exp);\n  getCachedPower(_exp);\n\n  // normalize\n  var off = <i32>clz<u64>(frc);\n  frc <<= off;\n  exp  -= off;\n\n  var frc_pow = _frc_pow;\n  var exp_pow = _exp_pow;\n\n  var w_frc = umul64f(frc, frc_pow);\n  var w_exp = umul64e(exp, exp_pow);\n\n  var wp_frc = umul64f(_frc_plus, frc_pow) - 1;\n  var wp_exp = umul64e(_exp, exp_pow);\n\n  var wm_frc = umul64f(_frc_minus, frc_pow) + 1;\n  var delta  = wp_frc - wm_frc;\n\n  return genDigits(buffer, w_frc, w_exp, wp_frc, wp_exp, delta, sign);\n}\n\nfunction genDigits(buffer: usize, w_frc: u64, w_exp: i32, mp_frc: u64, mp_exp: i32, delta: u64, sign: i32): i32 {\n  var one_exp = -mp_exp;\n  var one_frc = (<u64>1) << one_exp;\n  var mask    = one_frc - 1;\n\n  var wp_w_frc = mp_frc - w_frc;\n\n  var p1 = u32(mp_frc >> one_exp);\n  var p2 = mp_frc & mask;\n\n  var kappa = <i32>decimalCount32(p1);\n  var len = sign;\n\n  while (kappa > 0) {\n    let d: u32;\n    switch (kappa) {\n      case 10: { d = p1 / 1000000000; p1 %= 1000000000; break; }\n      case  9: { d = p1 /  100000000; p1 %=  100000000; break; }\n      case  8: { d = p1 /   10000000; p1 %=   10000000; break; }\n      case  7: { d = p1 /    1000000; p1 %=    1000000; break; }\n      case  6: { d = p1 /     100000; p1 %=     100000; break; }\n      case  5: { d = p1 /      10000; p1 %=      10000; break; }\n      case  4: { d = p1 /       1000; p1 %=       1000; break; }\n      case  3: { d = p1 /        100; p1 %=        100; break; }\n      case  2: { d = p1 /         10; p1 %=         10; break; }\n      case  1: { d = p1;              p1 =           0; break; }\n      default: { d = 0; break; }\n    }\n\n    if (d | len) store<u16>(buffer + (len++ << 1), CharCode._0 + <u16>d);\n\n    --kappa;\n    let tmp = ((<u64>p1) << one_exp) + p2;\n    if (tmp <= delta) {\n      _K += kappa;\n      grisuRound(buffer, len, delta, tmp, <u64>load<u32>(POWERS10 + (<usize>kappa << alignof<u32>())) << one_exp, wp_w_frc);\n      return len;\n    }\n  }\n\n  while (true) {\n    p2    *= 10;\n    delta *= 10;\n\n    let d = p2 >> one_exp;\n    if (d | len) store<u16>(buffer + (len++ << 1), CharCode._0 + <u16>d);\n\n    p2 &= mask;\n    --kappa;\n    if (p2 < delta) {\n      _K += kappa;\n      wp_w_frc *= <u64>load<u32>(POWERS10 + (<usize>-kappa << alignof<u32>()));\n      grisuRound(buffer, len, delta, p2, one_frc, wp_w_frc);\n      return len;\n    }\n  }\n}\n\n// @ts-ignore: decorator\n@inline\nfunction genExponent(buffer: usize, k: i32): i32 {\n  var sign = k < 0;\n  if (sign) k = -k;\n  var decimals = decimalCount32(k) + 1;\n  utoa32_dec_core(buffer, k, decimals);\n  store<u16>(buffer, <u16>select<u32>(CharCode.MINUS, CharCode.PLUS, sign));\n  return decimals;\n}\n\nfunction prettify(buffer: usize, length: i32, k: i32): i32 {\n  if (!k) {\n    store<u32>(buffer + (length << 1), CharCode.DOT | (CharCode._0 << 16));\n    return length + 2;\n  }\n\n  var kk = length + k;\n  if (length <= kk && kk <= 21) {\n    // 1234e7 -> 12340000000\n    for (let i = length; i < kk; ++i) {\n      store<u16>(buffer + (i << 1), CharCode._0);\n    }\n    store<u32>(buffer + (kk << 1), CharCode.DOT | (CharCode._0 << 16));\n    return kk + 2;\n  } else if (kk > 0 && kk <= 21) {\n    // 1234e-2 -> 12.34\n    let ptr = buffer + (kk << 1);\n    memory.copy(\n      ptr + 2,\n      ptr,\n      -k << 1\n    );\n    store<u16>(buffer + (kk << 1), CharCode.DOT);\n    return length + 1;\n  } else if (-6 < kk && kk <= 0) {\n    // 1234e-6 -> 0.001234\n    let offset = 2 - kk;\n    memory.copy(\n      buffer + (offset << 1),\n      buffer,\n      length << 1\n    );\n    store<u32>(buffer, CharCode._0 | (CharCode.DOT << 16));\n    for (let i = 2; i < offset; ++i) {\n      store<u16>(buffer + (i << 1), CharCode._0);\n    }\n    return length + offset;\n  } else if (length == 1) {\n    // 1e30\n    store<u16>(buffer, CharCode.e, 2);\n    length = genExponent(buffer + 4, kk - 1);\n    return length + 2;\n  } else {\n    let len = length << 1;\n    memory.copy(\n      buffer + 4,\n      buffer + 2,\n      len - 2\n    );\n    store<u16>(buffer,       CharCode.DOT, 2);\n    store<u16>(buffer + len, CharCode.e,   2);\n    length += genExponent(buffer + len + 4, kk - 1);\n    return length + 2;\n  }\n}\n\nfunction dtoa_core(buffer: usize, value: f64): i32 {\n  var sign = i32(value < 0);\n  if (sign) {\n    value = -value;\n    store<u16>(buffer, CharCode.MINUS);\n  }\n  // assert(value > 0 && value <= 1.7976931348623157e308);\n  var len = grisu2(value, buffer, sign);\n  len = prettify(buffer + (sign << 1), len - sign, _K);\n  return len + sign;\n}\n\n// @ts-ignore: decorator\n@lazy @inline const dtoa_buf = memory.data(MAX_DOUBLE_LENGTH << 1);\n\nexport function dtoa(value: f64): String {\n  if (value == 0) return \"0.0\";\n  if (!isFinite(value)) {\n    if (isNaN(value)) return \"NaN\";\n    return select<String>(\"-Infinity\", \"Infinity\", value < 0);\n  }\n  var size = dtoa_core(dtoa_buf, value) << 1;\n  var result = changetype<String>(__new(size, idof<String>()));\n  memory.copy(changetype<usize>(result), dtoa_buf, size);\n  return result;\n}\n\nexport function itoa_buffered<T extends number>(buffer: usize, value: T): u32 {\n  var sign: u32 = 0;\n  if (isSigned<T>()) {\n    sign = u32(value < 0);\n    if (sign) {\n      value = changetype<T>(-value);\n      store<u16>(buffer, CharCode.MINUS);\n    }\n  }\n  if (ASC_SHRINK_LEVEL <= 1) {\n    if (isSigned<T>()) {\n      if (sizeof<T>() <= 4) {\n        if (<u32>value < 10) {\n          store<u16>(buffer + (sign << 1), value | CharCode._0);\n          return 1 + sign;\n        }\n      } else {\n        if (<u64>value < 10) {\n          store<u16>(buffer + (sign << 1), value | CharCode._0);\n          return 1 + sign;\n        }\n      }\n    } else {\n      if (value < 10) {\n        store<u16>(buffer, value | CharCode._0);\n        return 1;\n      }\n    }\n  }\n  var decimals = sign;\n  if (sizeof<T>() <= 4) {\n    decimals += decimalCount32(value);\n    utoa32_dec_core(buffer, value, decimals);\n  } else {\n    if (<u64>value <= <u64>u32.MAX_VALUE) {\n      let val32 = <u32>value;\n      decimals += decimalCount32(val32);\n      utoa32_dec_core(buffer, val32, decimals);\n    } else {\n      decimals += decimalCount64High(value);\n      utoa64_dec_core(buffer, value, decimals);\n    }\n  }\n  return decimals;\n}\n\nexport function dtoa_buffered(buffer: usize, value: f64): u32 {\n  if (value == 0) {\n    store<u16>(buffer, CharCode._0);\n    store<u16>(buffer, CharCode.DOT, 2);\n    store<u16>(buffer, CharCode._0,  4);\n    return 3;\n  }\n  if (!isFinite(value)) {\n    if (isNaN(value)) {\n      store<u16>(buffer, CharCode.N);\n      store<u16>(buffer, CharCode.a, 2);\n      store<u16>(buffer, CharCode.N, 4);\n      return 3;\n    } else {\n      let sign = value < 0;\n      if (sign) {\n        store<u16>(buffer, CharCode.MINUS); // -\n        buffer += 2;\n      }\n      store<u64>(buffer, 0x690066006E0049, 0); // ifnI\n      store<u64>(buffer, 0x7900740069006E, 8); // ytin\n      return 8 + u32(sign);\n    }\n  }\n  return dtoa_core(buffer, value);\n}\n","//\n// Lookup data for exp2f\n//\n\n// @ts-ignore: decorator\n@inline const EXP2F_TABLE_BITS = 5;\n\n// @ts-ignore: decorator\n@lazy @inline const EXP2F_DATA_TAB = memory.data<u64>([\n  // exp2f_data_tab[i] = uint(2^(i/N)) - (i << 52-BITS)\n  // used for computing 2^(k/N) for an int |k| < 150 N as\n  // double(tab[k%N] + (k << 52-BITS))\n  0x3FF0000000000000, 0x3FEFD9B0D3158574, 0x3FEFB5586CF9890F, 0x3FEF9301D0125B51,\n  0x3FEF72B83C7D517B, 0x3FEF54873168B9AA, 0x3FEF387A6E756238, 0x3FEF1E9DF51FDEE1,\n  0x3FEF06FE0A31B715, 0x3FEEF1A7373AA9CB, 0x3FEEDEA64C123422, 0x3FEECE086061892D,\n  0x3FEEBFDAD5362A27, 0x3FEEB42B569D4F82, 0x3FEEAB07DD485429, 0x3FEEA47EB03A5585,\n  0x3FEEA09E667F3BCD, 0x3FEE9F75E8EC5F74, 0x3FEEA11473EB0187, 0x3FEEA589994CCE13,\n  0x3FEEACE5422AA0DB, 0x3FEEB737B0CDC5E5, 0x3FEEC49182A3F090, 0x3FEED503B23E255D,\n  0x3FEEE89F995AD3AD, 0x3FEEFF76F2FB5E47, 0x3FEF199BDD85529C, 0x3FEF3720DCEF9069,\n  0x3FEF5818DCFBA487, 0x3FEF7C97337B9B5F, 0x3FEFA4AFA2A490DA, 0x3FEFD0765B6E4540\n]);\n\n// ULP error: 0.502 (nearest rounding.)\n// Relative error: 1.69 * 2^-34 in [-1/64, 1/64] (before rounding.)\n// Wrong count: 168353 (all nearest rounding wrong results with fma.)\n// @ts-ignore: decorator\n@inline\nexport function exp2f_lut(x: f32): f32 {\n  const\n    N      = 1 << EXP2F_TABLE_BITS,\n    N_MASK = N - 1,\n    shift  = reinterpret<f64>(0x4338000000000000) / N, // 0x1.8p+52\n    Ox127f = reinterpret<f32>(0x7F000000);\n\n  const\n    C0 = reinterpret<f64>(0x3FAC6AF84B912394), // 0x1.c6af84b912394p-5\n    C1 = reinterpret<f64>(0x3FCEBFCE50FAC4F3), // 0x1.ebfce50fac4f3p-3\n    C2 = reinterpret<f64>(0x3FE62E42FF0C52D6); // 0x1.62e42ff0c52d6p-1\n\n  var xd = <f64>x;\n  var ix = reinterpret<u32>(x);\n  var ux = ix >> 20 & 0x7FF;\n  if (ux >= 0x430) {\n    // |x| >= 128 or x is nan.\n    if (ix == 0xFF800000) return 0; // x == -Inf    -> 0\n    if (ux >= 0x7F8) return x + x;  // x == Inf/NaN -> Inf/NaN\n    if (x > 0) return x * Ox127f;   // x >     0    -> HugeVal (Owerflow)\n    if (x <= -150) return 0;        // x <= -150    -> 0 (Underflow)\n  }\n\n  // x = k/N + r with r in [-1/(2N), 1/(2N)] and int k.\n  var kd = xd + shift;\n  var ki = reinterpret<u64>(kd);\n  var r  = xd - (kd - shift);\n  var t: u64, y: f64, s: f64;\n\n  // exp2(x) = 2^(k/N) * 2^r ~= s * (C0*r^3 + C1*r^2 + C2*r + 1)\n  t  = load<u64>(EXP2F_DATA_TAB + ((<usize>ki & N_MASK) << alignof<u64>()));\n  t += ki << (52 - EXP2F_TABLE_BITS);\n  s  = reinterpret<f64>(t);\n  y  = C2 * r + 1;\n  y += (C0 * r + C1) * (r  * r);\n  y *= s;\n\n  return <f32>y;\n}\n\n// ULP error: 0.502 (nearest rounding.)\n// Relative error: 1.69 * 2^-34 in [-ln2/64, ln2/64] (before rounding.)\n// Wrong count: 170635 (all nearest rounding wrong results with fma.)\n// @ts-ignore: decorator\n@inline\nexport function expf_lut(x: f32): f32 {\n  const\n    N        = 1 << EXP2F_TABLE_BITS,\n    N_MASK   = N - 1,\n    shift    = reinterpret<f64>(0x4338000000000000),        // 0x1.8p+52\n    InvLn2N  = reinterpret<f64>(0x3FF71547652B82FE) * N,    // 0x1.71547652b82fep+0\n    Ox1p127f = reinterpret<f32>(0x7F000000);\n\n  const\n    C0 = reinterpret<f64>(0x3FAC6AF84B912394) / N / N / N, // 0x1.c6af84b912394p-5\n    C1 = reinterpret<f64>(0x3FCEBFCE50FAC4F3) / N / N,     // 0x1.ebfce50fac4f3p-3\n    C2 = reinterpret<f64>(0x3FE62E42FF0C52D6) / N;         // 0x1.62e42ff0c52d6p-1\n\n  var xd = <f64>x;\n  var ix = reinterpret<u32>(x);\n  var ux = ix >> 20 & 0x7FF;\n  if (ux >= 0x42B) {\n    // |x| >= 88 or x is nan.\n    if (ix == 0xFF800000) return 0;                            // x == -Inf    -> 0\n    if (ux >= 0x7F8) return x + x;                             // x == Inf/NaN -> Inf/NaN\n    if (x > reinterpret<f32>(0x42B17217)) return x * Ox1p127f; // x > log(0x1p128)  ~=  88.72 -> HugeVal (Owerflow)\n    if (x < reinterpret<f32>(0xC2CFF1B4)) return 0;            // x < log(0x1p-150) ~= -103.97 -> 0 (Underflow)\n  }\n\n  // x*N/Ln2 = k + r with r in [-1/2, 1/2] and int k.\n  var z = InvLn2N * xd;\n\n  // Round and convert z to int, the result is in [-150*N, 128*N] and\n  // ideally ties-to-even rule is used, otherwise the magnitude of r\n  // can be bigger which gives larger approximation error.\n  var kd = <f64>(z + shift);\n  var ki = reinterpret<u64>(kd);\n  var r  = z - (kd - shift);\n  var s: f64, y: f64, t: u64;\n\n  // exp(x) = 2^(k/N) * 2^(r/N) ~= s * (C0*r^3 + C1*r^2 + C2*r + 1)\n  t  = load<u64>(EXP2F_DATA_TAB + ((<usize>ki & N_MASK) << alignof<u64>()));\n  t += ki << (52 - EXP2F_TABLE_BITS);\n  s  = reinterpret<f64>(t);\n  z  = C0 * r + C1;\n  y  = C2 * r + 1;\n  y += z * (r * r);\n  y *= s;\n\n  return <f32>y;\n}\n\n//\n// Lookup data for log2f\n//\n\n// @ts-ignore: decorator\n@inline const LOG2F_TABLE_BITS = 4;\n\n// @ts-ignore: decorator\n@lazy @inline const LOG2F_DATA_TAB = memory.data<f64>([\n  reinterpret<f64>(0x3FF661EC79F8F3BE), reinterpret<f64>(0xBFDEFEC65B963019), // 0x1.661ec79f8f3bep+0, -0x1.efec65b963019p-2,\n  reinterpret<f64>(0x3FF571ED4AAF883D), reinterpret<f64>(0xBFDB0B6832D4FCA4), // 0x1.571ed4aaf883dp+0, -0x1.b0b6832d4fca4p-2,\n  reinterpret<f64>(0x3FF49539F0F010B0), reinterpret<f64>(0xBFD7418B0A1FB77B), // 0x1.49539f0f010bp+0 , -0x1.7418b0a1fb77bp-2,\n  reinterpret<f64>(0x3FF3C995B0B80385), reinterpret<f64>(0xBFD39DE91A6DCF7B), // 0x1.3c995b0b80385p+0, -0x1.39de91a6dcf7bp-2,\n  reinterpret<f64>(0x3FF30D190C8864A5), reinterpret<f64>(0xBFD01D9BF3F2B631), // 0x1.30d190c8864a5p+0, -0x1.01d9bf3f2b631p-2,\n  reinterpret<f64>(0x3FF25E227B0B8EA0), reinterpret<f64>(0xBFC97C1D1B3B7AF0), // 0x1.25e227b0b8eap+0 , -0x1.97c1d1b3b7afp-3 ,\n  reinterpret<f64>(0x3FF1BB4A4A1A343F), reinterpret<f64>(0xBFC2F9E393AF3C9F), // 0x1.1bb4a4a1a343fp+0, -0x1.2f9e393af3c9fp-3,\n  reinterpret<f64>(0x3FF12358F08AE5BA), reinterpret<f64>(0xBFB960CBBF788D5C), // 0x1.12358f08ae5bap+0, -0x1.960cbbf788d5cp-4,\n  reinterpret<f64>(0x3FF0953F419900A7), reinterpret<f64>(0xBFAA6F9DB6475FCE), // 0x1.0953f419900a7p+0, -0x1.a6f9db6475fcep-5,\n  reinterpret<f64>(0x3FF0000000000000), 0,                                    // 0x1p+0,                0x0,\n  reinterpret<f64>(0x3FEE608CFD9A47AC), reinterpret<f64>(0x3FB338CA9F24F53D), // 0x1.e608cfd9a47acp-1,  0x1.338ca9f24f53dp-4,\n  reinterpret<f64>(0x3FECA4B31F026AA0), reinterpret<f64>(0x3FC476A9543891BA), // 0x1.ca4b31f026aap-1 ,  0x1.476a9543891bap-3,\n  reinterpret<f64>(0x3FEB2036576AFCE6), reinterpret<f64>(0x3FCE840B4AC4E4D2), // 0x1.b2036576afce6p-1,  0x1.e840b4ac4e4d2p-3,\n  reinterpret<f64>(0x3FE9C2D163A1AA2D), reinterpret<f64>(0x3FD40645F0C6651C), // 0x1.9c2d163a1aa2dp-1,  0x1.40645f0c6651cp-2,\n  reinterpret<f64>(0x3FE886E6037841ED), reinterpret<f64>(0x3FD88E9C2C1B9FF8), // 0x1.886e6037841edp-1,  0x1.88e9c2c1b9ff8p-2,\n  reinterpret<f64>(0x3FE767DCF5534862), reinterpret<f64>(0x3FDCE0A44EB17BCC)  // 0x1.767dcf5534862p-1,  0x1.ce0a44eb17bccp-2\n]);\n\n// ULP error: 0.752 (nearest rounding.)\n// Relative error: 1.9 * 2^-26 (before rounding.)\n// @ts-ignore: decorator\n@inline\nexport function log2f_lut(x: f32): f32 {\n  const\n    N_MASK  = (1 << LOG2F_TABLE_BITS) - 1,\n    Ox1p23f = reinterpret<f32>(0x4B000000); // 0x1p23f\n\n  const\n    A0 = reinterpret<f64>(0xBFD712B6F70A7E4D), // -0x1.712b6f70a7e4dp-2\n    A1 = reinterpret<f64>(0x3FDECABF496832E0), //  0x1.ecabf496832ep-2\n    A2 = reinterpret<f64>(0xBFE715479FFAE3DE), // -0x1.715479ffae3dep-1\n    A3 = reinterpret<f64>(0x3FF715475F35C8B8); //  0x1.715475f35c8b8p0\n\n  var ux = reinterpret<u32>(x);\n  // Fix sign of zero with downward rounding when x==1.\n  // if (WANT_ROUNDING && predict_false(ix == 0x3f800000)) return 0;\n  if (ux - 0x00800000 >= 0x7F800000 - 0x00800000) {\n    // x < 0x1p-126 or inf or nan.\n    if (ux * 2 == 0) return -Infinity;\n    if (ux == 0x7F800000) return x; // log2(inf) == inf.\n    if ((ux >> 31) || ux * 2 >= 0xFF000000) return (x - x) / (x - x);\n    // x is subnormal, normalize it.\n    ux = reinterpret<u32>(x * Ox1p23f);\n    ux -= 23 << 23;\n  }\n  // x = 2^k z; where z is in range [OFF,2*OFF] and exact.\n  // The range is split into N subintervals.\n  // The ith subinterval contains z and c is near its center.\n  var tmp  = ux - 0x3F330000;\n  var i    = (tmp >> (23 - LOG2F_TABLE_BITS)) & N_MASK;\n  var top  = tmp & 0xFF800000;\n  var iz   = ux - top;\n  var k    = <i32>tmp >> 23;\n\n  var invc = load<f64>(LOG2F_DATA_TAB + (i << (1 + alignof<f64>())), 0 << alignof<f64>());\n  var logc = load<f64>(LOG2F_DATA_TAB + (i << (1 + alignof<f64>())), 1 << alignof<f64>());\n  var z    = <f64>reinterpret<f32>(iz);\n\n  // log2(x) = log1p(z/c-1)/ln2 + log2(c) + k\n  var r  = z * invc - 1;\n  var y0 = logc + <f64>k;\n\n  // Pipelined polynomial evaluation to approximate log1p(r)/ln2.\n  var y  = A1 * r + A2;\n  var p  = A3 * r + y0;\n  var r2 = r * r;\n  y += A0 * r2;\n  y  = y * r2 + p;\n\n  return <f32>y;\n}\n\n//\n// Lookup data for logf. See: https://git.musl-libc.org/cgit/musl/tree/src/math/logf.c\n//\n\n// @ts-ignore: decorator\n@inline const LOGF_TABLE_BITS = 4;\n\n// @ts-ignore: decorator\n@lazy @inline const LOGF_DATA_TAB = memory.data<f64>([\n  reinterpret<f64>(0x3FF661EC79F8F3BE), reinterpret<f64>(0xBFD57BF7808CAADE), // 0x1.661ec79f8f3bep+0, -0x1.57bf7808caadep-2,\n  reinterpret<f64>(0x3FF571ED4AAF883D), reinterpret<f64>(0xBFD2BEF0A7C06DDB), // 0x1.571ed4aaf883dp+0, -0x1.2bef0a7c06ddbp-2,\n  reinterpret<f64>(0x3FF49539F0F010B0), reinterpret<f64>(0xBFD01EAE7F513A67), // 0x1.49539f0f010bp+0 , -0x1.01eae7f513a67p-2,\n  reinterpret<f64>(0x3FF3C995B0B80385), reinterpret<f64>(0xBFCB31D8A68224E9), // 0x1.3c995b0b80385p+0, -0x1.b31d8a68224e9p-3,\n  reinterpret<f64>(0x3FF30D190C8864A5), reinterpret<f64>(0xBFC6574F0AC07758), // 0x1.30d190c8864a5p+0, -0x1.6574f0ac07758p-3,\n  reinterpret<f64>(0x3FF25E227B0B8EA0), reinterpret<f64>(0xBFC1AA2BC79C8100), // 0x1.25e227b0b8eap+0 , -0x1.1aa2bc79c81p-3  ,\n  reinterpret<f64>(0x3FF1BB4A4A1A343F), reinterpret<f64>(0xBFBA4E76CE8C0E5E), // 0x1.1bb4a4a1a343fp+0, -0x1.a4e76ce8c0e5ep-4,\n  reinterpret<f64>(0x3FF12358F08AE5BA), reinterpret<f64>(0xBFB1973C5A611CCC), // 0x1.12358f08ae5bap+0, -0x1.1973c5a611cccp-4,\n  reinterpret<f64>(0x3FF0953F419900A7), reinterpret<f64>(0xBFA252F438E10C1E), // 0x1.0953f419900a7p+0, -0x1.252f438e10c1ep-5,\n  reinterpret<f64>(0x3FF0000000000000), 0,                                    // 0x1p+0,                0,\n  reinterpret<f64>(0x3FEE608CFD9A47AC), reinterpret<f64>(0x3FAAA5AA5DF25984), // 0x1.e608cfd9a47acp-1,  0x1.aa5aa5df25984p-5,\n  reinterpret<f64>(0x3FECA4B31F026AA0), reinterpret<f64>(0x3FBC5E53AA362EB4), // 0x1.ca4b31f026aap-1 ,  0x1.c5e53aa362eb4p-4,\n  reinterpret<f64>(0x3FEB2036576AFCE6), reinterpret<f64>(0x3FC526E57720DB08), // 0x1.b2036576afce6p-1,  0x1.526e57720db08p-3,\n  reinterpret<f64>(0x3FE9C2D163A1AA2D), reinterpret<f64>(0x3FCBC2860D224770), // 0x1.9c2d163a1aa2dp-1,  0x1.bc2860d22477p-3 ,\n  reinterpret<f64>(0x3FE886E6037841ED), reinterpret<f64>(0x3FD1058BC8A07EE1), // 0x1.886e6037841edp-1,  0x1.1058bc8a07ee1p-2,\n  reinterpret<f64>(0x3FE767DCF5534862), reinterpret<f64>(0x3FD4043057B6EE09)  // 0x1.767dcf5534862p-1,  0x1.4043057b6ee09p-2\n]);\n\n// ULP error: 0.818 (nearest rounding.)\n// Relative error: 1.957 * 2^-26 (before rounding.)\n// @ts-ignore: decorator\n@inline\nexport function logf_lut(x: f32): f32 {\n  const\n    N_MASK  = (1 << LOGF_TABLE_BITS) - 1,\n    Ox1p23f = reinterpret<f32>(0x4B000000); // 0x1p23f\n\n  const\n    Ln2 = reinterpret<f64>(0x3FE62E42FEFA39EF), // 0x1.62e42fefa39efp-1;\n    A0  = reinterpret<f64>(0xBFD00EA348B88334), // -0x1.00ea348b88334p-2\n    A1  = reinterpret<f64>(0x3FD5575B0BE00B6A), //  0x1.5575b0be00b6ap-2\n    A2  = reinterpret<f64>(0xBFDFFFFEF20A4123); // -0x1.ffffef20a4123p-2\n\n  var ux = reinterpret<u32>(x);\n  // Fix sign of zero with downward rounding when x==1.\n  // if (WANT_ROUNDING && ux == 0x3f800000) return 0;\n  if (ux - 0x00800000 >= 0x7F800000 - 0x00800000) {\n    // x < 0x1p-126 or inf or nan.\n    if ((ux << 1) == 0) return -Infinity;\n    if (ux == 0x7F800000) return x; // log(inf) == inf.\n    if ((ux >> 31) || (ux << 1) >= 0xFF000000) return (x - x) / (x - x);\n    // x is subnormal, normalize it.\n    ux = reinterpret<u32>(x * Ox1p23f);\n    ux -= 23 << 23;\n  }\n  // x = 2^k z; where z is in range [OFF,2*OFF] and exact.\n  // The range is split into N subintervals.\n  // The ith subinterval contains z and c is near its center.\n  var tmp = ux - 0x3F330000;\n  var i   = (tmp >> (23 - LOGF_TABLE_BITS)) & N_MASK;\n  var k   = <i32>tmp >> 23;\n  var iz  = ux - (tmp & 0x1FF << 23);\n\n  var invc = load<f64>(LOGF_DATA_TAB + (i << (1 + alignof<f64>())), 0 << alignof<f64>());\n  var logc = load<f64>(LOGF_DATA_TAB + (i << (1 + alignof<f64>())), 1 << alignof<f64>());\n\n  var z = <f64>reinterpret<f32>(iz);\n\n  // log(x) = log1p(z/c-1) + log(c) + k*Ln2\n  var r = z * invc - 1;\n  var y0 = logc + <f64>k * Ln2;\n\n  // Pipelined polynomial evaluation to approximate log1p(r).\n  var r2 = r * r;\n  var y  = A1 * r + A2;\n  y += A0 * r2;\n  y = y * r2 + (y0 + r);\n\n  return <f32>y;\n}\n\n//\n// Lookup data for powf. See: https://git.musl-libc.org/cgit/musl/tree/src/math/powf.c\n//\n\n// @ts-ignore: decorator\n@inline\nfunction zeroinfnanf(ux: u32): bool {\n  return (ux << 1) - 1 >= (<u32>0x7f800000 << 1) - 1;\n}\n\n// Returns 0 if not int, 1 if odd int, 2 if even int. The argument is\n// the bit representation of a non-zero finite floating-point value.\n// @ts-ignore: decorator\n@inline\nfunction checkintf(iy: u32): i32 {\n  var e = iy >> 23 & 0xFF;\n  if (e < 0x7F     ) return 0;\n  if (e > 0x7F + 23) return 2;\n  e = 1 << (0x7F + 23 - e);\n  if (iy & (e - 1)) return 0;\n  if (iy &  e     ) return 1;\n  return 2;\n}\n\n// Subnormal input is normalized so ix has negative biased exponent.\n// Output is multiplied by N (POWF_SCALE) if TOINT_INTRINICS is set.\n// @ts-ignore: decorator\n@inline\nfunction log2f_inline(ux: u32): f64 {\n  const N_MASK = (1 << LOG2F_TABLE_BITS) - 1;\n\n  const\n    A0 = reinterpret<f64>(0x3FD27616C9496E0B), //  0x1.27616c9496e0bp-2\n    A1 = reinterpret<f64>(0xBFD71969A075C67A), // -0x1.71969a075c67ap-2\n    A2 = reinterpret<f64>(0x3FDEC70A6CA7BADD), //  0x1.ec70a6ca7baddp-2\n    A3 = reinterpret<f64>(0xBFE7154748BEF6C8), // -0x1.7154748bef6c8p-1\n    A4 = reinterpret<f64>(0x3FF71547652AB82B); //  0x1.71547652ab82bp+0\n\n  // x = 2^k z; where z is in range [OFF,2*OFF] and exact.\n  // The range is split into N subintervals.\n  // The ith subinterval contains z and c is near its center.\n  var tmp  = ux - 0x3F330000;\n  var i    = <usize>((tmp >> (23 - LOG2F_TABLE_BITS)) & N_MASK);\n  var top  = tmp & 0xFF800000;\n  var uz   = ux - top;\n  var k    = <i32>(<i32>top >> 23);\n\n  var invc = load<f64>(LOG2F_DATA_TAB + (i << (1 + alignof<f64>())), 0 << alignof<f64>());\n  var logc = load<f64>(LOG2F_DATA_TAB + (i << (1 + alignof<f64>())), 1 << alignof<f64>());\n  var z    = <f64>reinterpret<f32>(uz);\n\n  // log2(x) = log1p(z/c-1)/ln2 + log2(c) + k\n  var r  = z * invc - 1;\n  var y0 = logc + <f64>k;\n\n  // Pipelined polynomial evaluation to approximate log1p(r)/ln2.\n  var y = A0 * r + A1;\n  var p = A2 * r + A3;\n  var q = A4 * r + y0;\n\n  r *= r;\n  q += p * r;\n  y  = y * (r * r) + q;\n\n  return y;\n}\n\n// The output of log2 and thus the input of exp2 is either scaled by N\n// (in case of fast toint intrinsics) or not.  The unscaled xd must be\n// in [-1021,1023], sign_bias sets the sign of the result.\n// @ts-ignore: decorator\n@inline\nfunction exp2f_inline(xd: f64, signBias: u32): f32 {\n  const\n    N      = 1 << EXP2F_TABLE_BITS,\n    N_MASK = N - 1,\n    shift  = reinterpret<f64>(0x4338000000000000) / N; // 0x1.8p+52\n\n  const\n    C0 = reinterpret<f64>(0x3FAC6AF84B912394), // 0x1.c6af84b912394p-5\n    C1 = reinterpret<f64>(0x3FCEBFCE50FAC4F3), // 0x1.ebfce50fac4f3p-3\n    C2 = reinterpret<f64>(0x3FE62E42FF0C52D6); // 0x1.62e42ff0c52d6p-1\n\n  // x = k/N + r with r in [-1/(2N), 1/(2N)]\n  var kd = <f64>(xd + shift);\n  var ki = reinterpret<u64>(kd);\n  var r  = xd - (kd - shift);\n  var t: u64, z: f64, y: f64, s: f64;\n\n  // exp2(x) = 2^(k/N) * 2^r ~= s * (C0*r^3 + C1*r^2 + C2*r + 1)\n  t  = load<u64>(EXP2F_DATA_TAB + ((<usize>ki & N_MASK) << alignof<u64>()));\n  t += (ki + signBias) << (52 - EXP2F_TABLE_BITS);\n  s  = reinterpret<f64>(t);\n  z  = C0 * r + C1;\n  y  = C2 * r + 1;\n  y += z * (r * r);\n  y *= s;\n  return <f32>y;\n}\n\n// @ts-ignore: decorator\n@inline\nfunction xflowf(sign: u32, y: f32): f32 {\n  return select<f32>(-y, y, sign) * y;\n}\n\n// @ts-ignore: decorator\n@inline\nfunction oflowf(sign: u32): f32 {\n  return xflowf(sign, reinterpret<f32>(0x70000000)); // 0x1p97f\n}\n\n// @ts-ignore: decorator\n@inline\nfunction uflowf(sign: u32): f32 {\n  return xflowf(sign, reinterpret<f32>(0x10000000)); // 0x1p-95f\n}\n\n// @ts-ignore: decorator\n@inline\nexport function powf_lut(x: f32, y: f32): f32 {\n  const\n    Ox1p23f     = reinterpret<f32>(0x4B000000), // 0x1p23f\n    UPPER_LIMIT = reinterpret<f64>(0x405FFFFFFFD1D571), // 0x1.fffffffd1d571p+6\n    LOWER_LIMIT = -150.0,\n    SIGN_BIAS   = 1 << (EXP2F_TABLE_BITS + 11);\n\n  var signBias: u32 = 0;\n  var ix = reinterpret<u32>(x);\n  var iy = reinterpret<u32>(y);\n  var ny = 0;\n\n  if (i32(ix - 0x00800000 >= 0x7f800000 - 0x00800000) | (ny = i32(zeroinfnanf(iy)))) {\n    // Either (x < 0x1p-126 or inf or nan) or (y is 0 or inf or nan).\n    if (ny) {\n      if ((iy << 1) == 0) return 1.0;\n      if (ix == 0x3F800000) return NaN; // original: 1.0\n      if ((ix << 1) > (<u32>0x7F800000 << 1) || (iy << 1) > (<u32>0x7F800000 << 1)) return x + y;\n      if ((ix << 1) == (0x3F800000 << 1)) return NaN; // original: 1.0\n      if (((ix << 1) < (0x3F800000 << 1)) == !(iy >> 31)) return 0; // |x| < 1 && y==inf or |x| > 1 && y==-inf.\n      return y * y;\n    }\n    if (zeroinfnanf(ix)) {\n      let x2 = x * x;\n      if ((ix >> 31) && checkintf(iy) == 1) x2 = -x2;\n      return iy >> 31 ? 1 / x2 : x2;\n    }\n    // x and y are non-zero finite.\n    if (ix >> 31) {\n      // Finite x < 0.\n      let yint = checkintf(iy);\n      if (yint == 0) return (x - x) / (x - x);\n      if (yint == 1) signBias = SIGN_BIAS;\n      ix &= 0x7FFFFFFF;\n    }\n    if (ix < 0x00800000) {\n      // Normalize subnormal x so exponent becomes negative.\n      ix = reinterpret<u32>(x * Ox1p23f);\n      ix &= 0x7FFFFFFF;\n      ix -= 23 << 23;\n    }\n  }\n  var logx = log2f_inline(ix);\n  var ylogx = y * logx; // cannot overflow, y is single prec.\n  if ((reinterpret<u64>(ylogx) >> 47 & 0xFFFF) >= 0x80BF) { // reinterpret<u64>(126.0) >> 47\n    // |y * log(x)| >= 126\n    if (ylogx  > UPPER_LIMIT) return oflowf(signBias); // overflow\n    if (ylogx <= LOWER_LIMIT) return uflowf(signBias); // underflow\n  }\n  return exp2f_inline(ylogx, signBias);\n}\n\n//\n// Lookup data for exp. See: https://git.musl-libc.org/cgit/musl/tree/src/math/exp.c\n//\n\n// @ts-ignore: decorator\n@inline const EXP_TABLE_BITS = 7;\n\n// @ts-ignore: decorator\n@lazy @inline const EXP_DATA_TAB = memory.data<u64>([\n  0x0000000000000000, 0x3FF0000000000000,\n  0x3C9B3B4F1A88BF6E, 0x3FEFF63DA9FB3335,\n  0xBC7160139CD8DC5D, 0x3FEFEC9A3E778061,\n  0xBC905E7A108766D1, 0x3FEFE315E86E7F85,\n  0x3C8CD2523567F613, 0x3FEFD9B0D3158574,\n  0xBC8BCE8023F98EFA, 0x3FEFD06B29DDF6DE,\n  0x3C60F74E61E6C861, 0x3FEFC74518759BC8,\n  0x3C90A3E45B33D399, 0x3FEFBE3ECAC6F383,\n  0x3C979AA65D837B6D, 0x3FEFB5586CF9890F,\n  0x3C8EB51A92FDEFFC, 0x3FEFAC922B7247F7,\n  0x3C3EBE3D702F9CD1, 0x3FEFA3EC32D3D1A2,\n  0xBC6A033489906E0B, 0x3FEF9B66AFFED31B,\n  0xBC9556522A2FBD0E, 0x3FEF9301D0125B51,\n  0xBC5080EF8C4EEA55, 0x3FEF8ABDC06C31CC,\n  0xBC91C923B9D5F416, 0x3FEF829AAEA92DE0,\n  0x3C80D3E3E95C55AF, 0x3FEF7A98C8A58E51,\n  0xBC801B15EAA59348, 0x3FEF72B83C7D517B,\n  0xBC8F1FF055DE323D, 0x3FEF6AF9388C8DEA,\n  0x3C8B898C3F1353BF, 0x3FEF635BEB6FCB75,\n  0xBC96D99C7611EB26, 0x3FEF5BE084045CD4,\n  0x3C9AECF73E3A2F60, 0x3FEF54873168B9AA,\n  0xBC8FE782CB86389D, 0x3FEF4D5022FCD91D,\n  0x3C8A6F4144A6C38D, 0x3FEF463B88628CD6,\n  0x3C807A05B0E4047D, 0x3FEF3F49917DDC96,\n  0x3C968EFDE3A8A894, 0x3FEF387A6E756238,\n  0x3C875E18F274487D, 0x3FEF31CE4FB2A63F,\n  0x3C80472B981FE7F2, 0x3FEF2B4565E27CDD,\n  0xBC96B87B3F71085E, 0x3FEF24DFE1F56381,\n  0x3C82F7E16D09AB31, 0x3FEF1E9DF51FDEE1,\n  0xBC3D219B1A6FBFFA, 0x3FEF187FD0DAD990,\n  0x3C8B3782720C0AB4, 0x3FEF1285A6E4030B,\n  0x3C6E149289CECB8F, 0x3FEF0CAFA93E2F56,\n  0x3C834D754DB0ABB6, 0x3FEF06FE0A31B715,\n  0x3C864201E2AC744C, 0x3FEF0170FC4CD831,\n  0x3C8FDD395DD3F84A, 0x3FEEFC08B26416FF,\n  0xBC86A3803B8E5B04, 0x3FEEF6C55F929FF1,\n  0xBC924AEDCC4B5068, 0x3FEEF1A7373AA9CB,\n  0xBC9907F81B512D8E, 0x3FEEECAE6D05D866,\n  0xBC71D1E83E9436D2, 0x3FEEE7DB34E59FF7,\n  0xBC991919B3CE1B15, 0x3FEEE32DC313A8E5,\n  0x3C859F48A72A4C6D, 0x3FEEDEA64C123422,\n  0xBC9312607A28698A, 0x3FEEDA4504AC801C,\n  0xBC58A78F4817895B, 0x3FEED60A21F72E2A,\n  0xBC7C2C9B67499A1B, 0x3FEED1F5D950A897,\n  0x3C4363ED60C2AC11, 0x3FEECE086061892D,\n  0x3C9666093B0664EF, 0x3FEECA41ED1D0057,\n  0x3C6ECCE1DAA10379, 0x3FEEC6A2B5C13CD0,\n  0x3C93FF8E3F0F1230, 0x3FEEC32AF0D7D3DE,\n  0x3C7690CEBB7AAFB0, 0x3FEEBFDAD5362A27,\n  0x3C931DBDEB54E077, 0x3FEEBCB299FDDD0D,\n  0xBC8F94340071A38E, 0x3FEEB9B2769D2CA7,\n  0xBC87DECCDC93A349, 0x3FEEB6DAA2CF6642,\n  0xBC78DEC6BD0F385F, 0x3FEEB42B569D4F82,\n  0xBC861246EC7B5CF6, 0x3FEEB1A4CA5D920F,\n  0x3C93350518FDD78E, 0x3FEEAF4736B527DA,\n  0x3C7B98B72F8A9B05, 0x3FEEAD12D497C7FD,\n  0x3C9063E1E21C5409, 0x3FEEAB07DD485429,\n  0x3C34C7855019C6EA, 0x3FEEA9268A5946B7,\n  0x3C9432E62B64C035, 0x3FEEA76F15AD2148,\n  0xBC8CE44A6199769F, 0x3FEEA5E1B976DC09,\n  0xBC8C33C53BEF4DA8, 0x3FEEA47EB03A5585,\n  0xBC845378892BE9AE, 0x3FEEA34634CCC320,\n  0xBC93CEDD78565858, 0x3FEEA23882552225,\n  0x3C5710AA807E1964, 0x3FEEA155D44CA973,\n  0xBC93B3EFBF5E2228, 0x3FEEA09E667F3BCD,\n  0xBC6A12AD8734B982, 0x3FEEA012750BDABF,\n  0xBC6367EFB86DA9EE, 0x3FEE9FB23C651A2F,\n  0xBC80DC3D54E08851, 0x3FEE9F7DF9519484,\n  0xBC781F647E5A3ECF, 0x3FEE9F75E8EC5F74,\n  0xBC86EE4AC08B7DB0, 0x3FEE9F9A48A58174,\n  0xBC8619321E55E68A, 0x3FEE9FEB564267C9,\n  0x3C909CCB5E09D4D3, 0x3FEEA0694FDE5D3F,\n  0xBC7B32DCB94DA51D, 0x3FEEA11473EB0187,\n  0x3C94ECFD5467C06B, 0x3FEEA1ED0130C132,\n  0x3C65EBE1ABD66C55, 0x3FEEA2F336CF4E62,\n  0xBC88A1C52FB3CF42, 0x3FEEA427543E1A12,\n  0xBC9369B6F13B3734, 0x3FEEA589994CCE13,\n  0xBC805E843A19FF1E, 0x3FEEA71A4623C7AD,\n  0xBC94D450D872576E, 0x3FEEA8D99B4492ED,\n  0x3C90AD675B0E8A00, 0x3FEEAAC7D98A6699,\n  0x3C8DB72FC1F0EAB4, 0x3FEEACE5422AA0DB,\n  0xBC65B6609CC5E7FF, 0x3FEEAF3216B5448C,\n  0x3C7BF68359F35F44, 0x3FEEB1AE99157736,\n  0xBC93091FA71E3D83, 0x3FEEB45B0B91FFC6,\n  0xBC5DA9B88B6C1E29, 0x3FEEB737B0CDC5E5,\n  0xBC6C23F97C90B959, 0x3FEEBA44CBC8520F,\n  0xBC92434322F4F9AA, 0x3FEEBD829FDE4E50,\n  0xBC85CA6CD7668E4B, 0x3FEEC0F170CA07BA,\n  0x3C71AFFC2B91CE27, 0x3FEEC49182A3F090,\n  0x3C6DD235E10A73BB, 0x3FEEC86319E32323,\n  0xBC87C50422622263, 0x3FEECC667B5DE565,\n  0x3C8B1C86E3E231D5, 0x3FEED09BEC4A2D33,\n  0xBC91BBD1D3BCBB15, 0x3FEED503B23E255D,\n  0x3C90CC319CEE31D2, 0x3FEED99E1330B358,\n  0x3C8469846E735AB3, 0x3FEEDE6B5579FDBF,\n  0xBC82DFCD978E9DB4, 0x3FEEE36BBFD3F37A,\n  0x3C8C1A7792CB3387, 0x3FEEE89F995AD3AD,\n  0xBC907B8F4AD1D9FA, 0x3FEEEE07298DB666,\n  0xBC55C3D956DCAEBA, 0x3FEEF3A2B84F15FB,\n  0xBC90A40E3DA6F640, 0x3FEEF9728DE5593A,\n  0xBC68D6F438AD9334, 0x3FEEFF76F2FB5E47,\n  0xBC91EEE26B588A35, 0x3FEF05B030A1064A,\n  0x3C74FFD70A5FDDCD, 0x3FEF0C1E904BC1D2,\n  0xBC91BDFBFA9298AC, 0x3FEF12C25BD71E09,\n  0x3C736EAE30AF0CB3, 0x3FEF199BDD85529C,\n  0x3C8EE3325C9FFD94, 0x3FEF20AB5FFFD07A,\n  0x3C84E08FD10959AC, 0x3FEF27F12E57D14B,\n  0x3C63CDAF384E1A67, 0x3FEF2F6D9406E7B5,\n  0x3C676B2C6C921968, 0x3FEF3720DCEF9069,\n  0xBC808A1883CCB5D2, 0x3FEF3F0B555DC3FA,\n  0xBC8FAD5D3FFFFA6F, 0x3FEF472D4A07897C,\n  0xBC900DAE3875A949, 0x3FEF4F87080D89F2,\n  0x3C74A385A63D07A7, 0x3FEF5818DCFBA487,\n  0xBC82919E2040220F, 0x3FEF60E316C98398,\n  0x3C8E5A50D5C192AC, 0x3FEF69E603DB3285,\n  0x3C843A59AC016B4B, 0x3FEF7321F301B460,\n  0xBC82D52107B43E1F, 0x3FEF7C97337B9B5F,\n  0xBC892AB93B470DC9, 0x3FEF864614F5A129,\n  0x3C74B604603A88D3, 0x3FEF902EE78B3FF6,\n  0x3C83C5EC519D7271, 0x3FEF9A51FBC74C83,\n  0xBC8FF7128FD391F0, 0x3FEFA4AFA2A490DA,\n  0xBC8DAE98E223747D, 0x3FEFAF482D8E67F1,\n  0x3C8EC3BC41AA2008, 0x3FEFBA1BEE615A27,\n  0x3C842B94C3A9EB32, 0x3FEFC52B376BBA97,\n  0x3C8A64A931D185EE, 0x3FEFD0765B6E4540,\n  0xBC8E37BAE43BE3ED, 0x3FEFDBFDAD9CBE14,\n  0x3C77893B4D91CD9D, 0x3FEFE7C1819E90D8,\n  0x3C5305C14160CC89, 0x3FEFF3C22B8F71F1\n]);\n\n// Handle cases that may overflow or underflow when computing the result that\n// is scale*(1+TMP) without intermediate rounding. The bit representation of\n// scale is in SBITS, however it has a computed exponent that may have\n// overflown into the sign bit so that needs to be adjusted before using it as\n// a double.  (int32_t)KI is the k used in the argument reduction and exponent\n// adjustment of scale, positive k here means the result may overflow and\n// negative k means the result may underflow.\n// @ts-ignore: decorator\n@inline\nfunction specialcase(tmp: f64, sbits: u64, ki: u64): f64 {\n  const\n    Ox1p_1022 = reinterpret<f64>(0x0010000000000000), // 0x1p-1022\n    Ox1p1009  = reinterpret<f64>(0x7F00000000000000); // 0x1p1009\n\n  var scale: f64;\n  if (!(ki & 0x80000000)) {\n    // k > 0, the exponent of scale might have overflowed by <= 460.\n    sbits -= u64(1009) << 52;\n    scale = reinterpret<f64>(sbits);\n    return Ox1p1009 * (scale + scale * tmp); // 0x1p1009\n  }\n  // k < 0, need special care in the subnormal range.\n  sbits += u64(1022) << 52;\n  // Note: sbits is signed scale.\n  scale = reinterpret<f64>(sbits);\n  var y = scale + scale * tmp;\n  if (abs(y) < 1.0) {\n    // Round y to the right precision before scaling it into the subnormal\n    // range to avoid double rounding that can cause 0.5+E/2 ulp error where\n    // E is the worst-case ulp error outside the subnormal range.  So this\n    // is only useful if the goal is better than 1 ulp worst-case error.\n    let one = copysign(1.0, y);\n    let lo = scale - y + scale * tmp;\n    let hi = one + y;\n    lo = one - hi + y + lo;\n    y  = (hi + lo) - one;\n    // Fix the sign of 0.\n    if (y == 0.0) y = reinterpret<f64>(sbits & 0x8000000000000000);\n  }\n  return y * Ox1p_1022;\n}\n\n// @ts-ignore: decorator\n@inline\nexport function exp_lut(x: f64): f64 {\n  const\n    N      = 1 << EXP_TABLE_BITS,\n    N_MASK = N - 1;\n\n  const\n    InvLn2N   = reinterpret<f64>(0x3FF71547652B82FE) * N, // 0x1.71547652b82fep0\n    NegLn2hiN = reinterpret<f64>(0xBF762E42FEFA0000),     // -0x1.62e42fefa0000p-8\n    NegLn2loN = reinterpret<f64>(0xBD0CF79ABC9E3B3A),     // -0x1.cf79abc9e3b3ap-47\n    shift     = reinterpret<f64>(0x4338000000000000);     // 0x1.8p52;\n\n  const\n    C2 = reinterpret<f64>(0x3FDFFFFFFFFFFDBD), // __exp_data.poly[0] (0x1.ffffffffffdbdp-2)\n    C3 = reinterpret<f64>(0x3FC555555555543C), // __exp_data.poly[1] (0x1.555555555543cp-3)\n    C4 = reinterpret<f64>(0x3FA55555CF172B91), // __exp_data.poly[2] (0x1.55555cf172b91p-5)\n    C5 = reinterpret<f64>(0x3F81111167A4D017); // __exp_data.poly[3] (0x1.1111167a4d017p-7)\n\n  var ux = reinterpret<u64>(x);\n  var abstop = <u32>(ux >> 52 & 0x7FF);\n  if (abstop - 0x3C9 >= 0x03F) {\n    if (abstop - 0x3C9 >= 0x80000000) return 1;\n    if (abstop >= 0x409) {\n      if (ux == 0xFFF0000000000000) return 0;\n      if (abstop >= 0x7FF) return 1.0 + x;\n      return select<f64>(0, Infinity, ux >> 63);\n    }\n    // Large x is special cased below.\n    abstop = 0;\n  }\n\n  // exp(x) = 2^(k/N) * exp(r), with exp(r) in [2^(-1/2N),2^(1/2N)]\n  // x = ln2/N*k + r, with int k and r in [-ln2/2N, ln2/2N]\n  var z = InvLn2N * x;\n  // #if TOINT_INTRINSICS\n  // \tkd = roundtoint(z);\n  // \tki = converttoint(z);\n  // #elif EXP_USE_TOINT_NARROW\n  // \t// z - kd is in [-0.5-2^-16, 0.5] in all rounding modes.\n  // var kd = z + shift;\n  // var ki = reinterpret<u64>(kd) >> 16;\n  // var kd = <f64><i32>ki;\n  // #else\n  // z - kd is in [-1, 1] in non-nearest rounding modes.\n  var kd = z + shift;\n  var ki = reinterpret<u64>(kd);\n  kd -= shift;\n  // #endif\n  var r = x + kd * NegLn2hiN + kd * NegLn2loN;\n  // 2^(k/N) ~= scale * (1 + tail).\n  var idx = <usize>((ki & N_MASK) << 1);\n  var top = ki << (52 - EXP_TABLE_BITS);\n\n  var tail = reinterpret<f64>(load<u64>(EXP_DATA_TAB + (idx << alignof<u64>()))); // T[idx]\n  // This is only a valid scale when -1023*N < k < 1024*N\n  var sbits = load<u64>(EXP_DATA_TAB + (idx << alignof<u64>()), 1 << alignof<u64>()) + top; // T[idx + 1]\n  // exp(x) = 2^(k/N) * exp(r) ~= scale + scale * (tail + exp(r) - 1).\n  // Evaluation is optimized assuming superscalar pipelined execution.\n  var r2 = r * r;\n  // Without fma the worst case error is 0.25/N ulp larger.\n  // Worst case error is less than 0.5+1.11/N+(abs poly error * 2^53) ulp.\n  var tmp = tail + r + r2 * (C2 + r * C3) + r2 * r2 * (C4 + r * C5);\n  if (abstop == 0) return specialcase(tmp, sbits, ki);\n  var scale = reinterpret<f64>(sbits);\n  // Note: tmp == 0 or |tmp| > 2^-200 and scale > 2^-739, so there\n  // is no spurious underflow here even without fma.\n  return scale + scale * tmp;\n}\n\n//\n// Lookup data for exp2. See: https://git.musl-libc.org/cgit/musl/tree/src/math/exp2.c\n//\n\n// Handle cases that may overflow or underflow when computing the result that\n// is scale*(1+TMP) without intermediate rounding.  The bit representation of\n// scale is in SBITS, however it has a computed exponent that may have\n// overflown into the sign bit so that needs to be adjusted before using it as\n// a double.  (int32_t)KI is the k used in the argument reduction and exponent\n// adjustment of scale, positive k here means the result may overflow and\n// negative k means the result may underflow.\n// @ts-ignore: decorator\n@inline\nfunction specialcase2(tmp: f64, sbits: u64, ki: u64): f64 {\n  const Ox1p_1022 = reinterpret<f64>(0x10000000000000); // 0x1p-1022\n  var scale: f64;\n  if ((ki & 0x80000000) == 0) {\n    // k > 0, the exponent of scale might have overflowed by 1\n    sbits -= u64(1) << 52;\n    scale = reinterpret<f64>(sbits);\n    return 2 * (scale * tmp + scale);\n  }\n  // k < 0, need special care in the subnormal range\n  sbits += u64(1022) << 52;\n  scale = reinterpret<f64>(sbits);\n  var y = scale * tmp + scale;\n  if (y < 1.0) {\n    // Round y to the right precision before scaling it into the subnormal\n    // range to avoid double rounding that can cause 0.5+E/2 ulp error where\n    // E is the worst-case ulp error outside the subnormal range. So this\n    // is only useful if the goal is better than 1 ulp worst-case error.\n    let hi: f64, lo: f64;\n    lo = scale - y + scale * tmp;\n    hi = 1.0 + y;\n    lo = 1.0 - hi + y + lo;\n    y = (hi + lo) - 1.0;\n  }\n  return y * Ox1p_1022;\n}\n\n// @ts-ignore: decorator\n@inline\nexport function exp2_lut(x: f64): f64 {\n  const\n    N      = 1 << EXP_TABLE_BITS,\n    N_MASK = N - 1,\n    shift  = reinterpret<f64>(0x4338000000000000) / N; // 0x1.8p52\n\n  const\n    C1 = reinterpret<f64>(0x3FE62E42FEFA39EF), // 0x1.62e42fefa39efp-1\n    C2 = reinterpret<f64>(0x3FCEBFBDFF82C424), // 0x1.ebfbdff82c424p-3\n    C3 = reinterpret<f64>(0x3FAC6B08D70CF4B5), // 0x1.c6b08d70cf4b5p-5\n    C4 = reinterpret<f64>(0x3F83B2ABD24650CC), // 0x1.3b2abd24650ccp-7\n    C5 = reinterpret<f64>(0x3F55D7E09B4E3A84); // 0x1.5d7e09b4e3a84p-10\n\n  var ux = reinterpret<u64>(x);\n  var abstop = <u32>(ux >> 52 & 0x7ff);\n  if (abstop - 0x3C9 >= 0x03F) {\n    if (abstop - 0x3C9 >= 0x80000000) return 1.0;\n    if (abstop >= 0x409) {\n      if (ux == 0xFFF0000000000000) return 0;\n      if (abstop >= 0x7FF) return 1.0 + x;\n      if (!(ux >> 63)) return Infinity;\n      else if (ux >= 0xC090CC0000000000) return 0;\n    }\n    if ((ux << 1) > 0x811A000000000000) abstop = 0; // Large x is special cased below.\n  }\n\n  // exp2(x) = 2^(k/N) * 2^r, with 2^r in [2^(-1/2N),2^(1/2N)].\n  // x = k/N + r, with int k and r in [-1/2N, 1/2N]\n  var kd = x + shift;\n  var ki = reinterpret<u64>(kd);\n  kd -= shift; // k/N for int k\n  var r = x - kd;\n  // 2^(k/N) ~= scale * (1 + tail)\n  var idx = <usize>((ki & N_MASK) << 1);\n  var top = ki << (52 - EXP_TABLE_BITS);\n\n  var tail = reinterpret<f64>(load<u64>(EXP_DATA_TAB + (idx << alignof<u64>()), 0 << alignof<u64>())); // T[idx])\n  // This is only a valid scale when -1023*N < k < 1024*N\n  var sbits = load<u64>(EXP_DATA_TAB + (idx << alignof<u64>()), 1 << alignof<u64>()) + top; // T[idx + 1]\n  // exp2(x) = 2^(k/N) * 2^r ~= scale + scale * (tail + 2^r - 1).\n  // Evaluation is optimized assuming superscalar pipelined execution\n  var r2 = r * r;\n  // Without fma the worst case error is 0.5/N ulp larger.\n  // Worst case error is less than 0.5+0.86/N+(abs poly error * 2^53) ulp.\n  var tmp = tail + r * C1 + r2 * (C2 + r * C3) + r2 * r2 * (C4 + r * C5);\n  if (abstop == 0) return specialcase2(tmp, sbits, ki);\n  var scale = reinterpret<f64>(sbits);\n  // Note: tmp == 0 or |tmp| > 2^-65 and scale > 2^-928, so there\n  // is no spurious underflow here even without fma.\n  return scale * tmp + scale;\n}\n\n//\n// Lookup data for log2. See: https://git.musl-libc.org/cgit/musl/tree/src/math/log2.c\n//\n\n// @ts-ignore: decorator\n@inline const LOG2_TABLE_BITS = 6;\n\n/* Algorithm:\n\n  x = 2^k z\n  log2(x) = k + log2(c) + log2(z/c)\n  log2(z/c) = poly(z/c - 1)\n\nwhere z is in [1.6p-1; 1.6p0] which is split into N subintervals and z falls\ninto the ith one, then table entries are computed as\n\n  tab[i].invc = 1/c\n  tab[i].logc = (double)log2(c)\n  tab2[i].chi = (double)c\n  tab2[i].clo = (double)(c - (double)c)\n\nwhere c is near the center of the subinterval and is chosen by trying +-2^29\nfloating point invc candidates around 1/center and selecting one for which\n\n  1) the rounding error in 0x1.8p10 + logc is 0,\n  2) the rounding error in z - chi - clo is < 0x1p-64 and\n  3) the rounding error in (double)log2(c) is minimized (< 0x1p-68).\n\nNote: 1) ensures that k + logc can be computed without rounding error, 2)\nensures that z/c - 1 can be computed as (z - chi - clo)*invc with close to a\nsingle rounding error when there is no fast fma for z*invc - 1, 3) ensures\nthat logc + poly(z/c - 1) has small error, however near x == 1 when\n|log2(x)| < 0x1p-4, this is not enough so that is special cased. */\n\n// @ts-ignore: decorator\n@lazy @inline const LOG2_DATA_TAB1 = memory.data<f64>([\n  //            invc                  ,                logc\n  reinterpret<f64>(0x3FF724286BB1ACF8), reinterpret<f64>(0xBFE1095FEECDB000),\n  reinterpret<f64>(0x3FF6E1F766D2CCA1), reinterpret<f64>(0xBFE08494BD76D000),\n  reinterpret<f64>(0x3FF6A13D0E30D48A), reinterpret<f64>(0xBFE00143AEE8F800),\n  reinterpret<f64>(0x3FF661EC32D06C85), reinterpret<f64>(0xBFDEFEC5360B4000),\n  reinterpret<f64>(0x3FF623FA951198F8), reinterpret<f64>(0xBFDDFDD91AB7E000),\n  reinterpret<f64>(0x3FF5E75BA4CF026C), reinterpret<f64>(0xBFDCFFAE0CC79000),\n  reinterpret<f64>(0x3FF5AC055A214FB8), reinterpret<f64>(0xBFDC043811FDA000),\n  reinterpret<f64>(0x3FF571ED0F166E1E), reinterpret<f64>(0xBFDB0B67323AE000),\n  reinterpret<f64>(0x3FF53909590BF835), reinterpret<f64>(0xBFDA152F5A2DB000),\n  reinterpret<f64>(0x3FF5014FED61ADDD), reinterpret<f64>(0xBFD9217F5AF86000),\n  reinterpret<f64>(0x3FF4CAB88E487BD0), reinterpret<f64>(0xBFD8304DB0719000),\n  reinterpret<f64>(0x3FF49539B4334FEE), reinterpret<f64>(0xBFD74189F9A9E000),\n  reinterpret<f64>(0x3FF460CBDFAFD569), reinterpret<f64>(0xBFD6552BB5199000),\n  reinterpret<f64>(0x3FF42D664EE4B953), reinterpret<f64>(0xBFD56B23A29B1000),\n  reinterpret<f64>(0x3FF3FB01111DD8A6), reinterpret<f64>(0xBFD483650F5FA000),\n  reinterpret<f64>(0x3FF3C995B70C5836), reinterpret<f64>(0xBFD39DE937F6A000),\n  reinterpret<f64>(0x3FF3991C4AB6FD4A), reinterpret<f64>(0xBFD2BAA1538D6000),\n  reinterpret<f64>(0x3FF3698E0CE099B5), reinterpret<f64>(0xBFD1D98340CA4000),\n  reinterpret<f64>(0x3FF33AE48213E7B2), reinterpret<f64>(0xBFD0FA853A40E000),\n  reinterpret<f64>(0x3FF30D191985BDB1), reinterpret<f64>(0xBFD01D9C32E73000),\n  reinterpret<f64>(0x3FF2E025CAB271D7), reinterpret<f64>(0xBFCE857DA2FA6000),\n  reinterpret<f64>(0x3FF2B404CF13CD82), reinterpret<f64>(0xBFCCD3C8633D8000),\n  reinterpret<f64>(0x3FF288B02C7CCB50), reinterpret<f64>(0xBFCB26034C14A000),\n  reinterpret<f64>(0x3FF25E2263944DE5), reinterpret<f64>(0xBFC97C1C2F4FE000),\n  reinterpret<f64>(0x3FF234563D8615B1), reinterpret<f64>(0xBFC7D6023F800000),\n  reinterpret<f64>(0x3FF20B46E33EAF38), reinterpret<f64>(0xBFC633A71A05E000),\n  reinterpret<f64>(0x3FF1E2EEFDCDA3DD), reinterpret<f64>(0xBFC494F5E9570000),\n  reinterpret<f64>(0x3FF1BB4A580B3930), reinterpret<f64>(0xBFC2F9E424E0A000),\n  reinterpret<f64>(0x3FF19453847F2200), reinterpret<f64>(0xBFC162595AFDC000),\n  reinterpret<f64>(0x3FF16E06C0D5D73C), reinterpret<f64>(0xBFBF9C9A75BD8000),\n  reinterpret<f64>(0x3FF1485F47B7E4C2), reinterpret<f64>(0xBFBC7B575BF9C000),\n  reinterpret<f64>(0x3FF12358AD0085D1), reinterpret<f64>(0xBFB960C60FF48000),\n  reinterpret<f64>(0x3FF0FEF00F532227), reinterpret<f64>(0xBFB64CE247B60000),\n  reinterpret<f64>(0x3FF0DB2077D03A8F), reinterpret<f64>(0xBFB33F78B2014000),\n  reinterpret<f64>(0x3FF0B7E6D65980D9), reinterpret<f64>(0xBFB0387D1A42C000),\n  reinterpret<f64>(0x3FF0953EFE7B408D), reinterpret<f64>(0xBFAA6F9208B50000),\n  reinterpret<f64>(0x3FF07325CAC53B83), reinterpret<f64>(0xBFA47A954F770000),\n  reinterpret<f64>(0x3FF05197E40D1B5C), reinterpret<f64>(0xBF9D23A8C50C0000),\n  reinterpret<f64>(0x3FF03091C1208EA2), reinterpret<f64>(0xBF916A2629780000),\n  reinterpret<f64>(0x3FF0101025B37E21), reinterpret<f64>(0xBF7720F8D8E80000),\n  reinterpret<f64>(0x3FEFC07EF9CAA76B), reinterpret<f64>(0x3F86FE53B1500000),\n  reinterpret<f64>(0x3FEF4465D3F6F184), reinterpret<f64>(0x3FA11CCCE10F8000),\n  reinterpret<f64>(0x3FEECC079F84107F), reinterpret<f64>(0x3FAC4DFC8C8B8000),\n  reinterpret<f64>(0x3FEE573A99975AE8), reinterpret<f64>(0x3FB3AA321E574000),\n  reinterpret<f64>(0x3FEDE5D6F0BD3DE6), reinterpret<f64>(0x3FB918A0D08B8000),\n  reinterpret<f64>(0x3FED77B681FF38B3), reinterpret<f64>(0x3FBE72E9DA044000),\n  reinterpret<f64>(0x3FED0CB5724DE943), reinterpret<f64>(0x3FC1DCD2507F6000),\n  reinterpret<f64>(0x3FECA4B2DC0E7563), reinterpret<f64>(0x3FC476AB03DEA000),\n  reinterpret<f64>(0x3FEC3F8EE8D6CB51), reinterpret<f64>(0x3FC7074377E22000),\n  reinterpret<f64>(0x3FEBDD2B4F020C4C), reinterpret<f64>(0x3FC98EDE8BA94000),\n  reinterpret<f64>(0x3FEB7D6C006015CA), reinterpret<f64>(0x3FCC0DB86AD2E000),\n  reinterpret<f64>(0x3FEB20366E2E338F), reinterpret<f64>(0x3FCE840AAFCEE000),\n  reinterpret<f64>(0x3FEAC57026295039), reinterpret<f64>(0x3FD0790AB4678000),\n  reinterpret<f64>(0x3FEA6D01BC2731DD), reinterpret<f64>(0x3FD1AC056801C000),\n  reinterpret<f64>(0x3FEA16D3BC3FF18B), reinterpret<f64>(0x3FD2DB11D4FEE000),\n  reinterpret<f64>(0x3FE9C2D14967FEAD), reinterpret<f64>(0x3FD406464EC58000),\n  reinterpret<f64>(0x3FE970E4F47C9902), reinterpret<f64>(0x3FD52DBE093AF000),\n  reinterpret<f64>(0x3FE920FB3982BCF2), reinterpret<f64>(0x3FD651902050D000),\n  reinterpret<f64>(0x3FE8D30187F759F1), reinterpret<f64>(0x3FD771D2CDEAF000),\n  reinterpret<f64>(0x3FE886E5EBB9F66D), reinterpret<f64>(0x3FD88E9C857D9000),\n  reinterpret<f64>(0x3FE83C97B658B994), reinterpret<f64>(0x3FD9A80155E16000),\n  reinterpret<f64>(0x3FE7F405FFC61022), reinterpret<f64>(0x3FDABE186ED3D000),\n  reinterpret<f64>(0x3FE7AD22181415CA), reinterpret<f64>(0x3FDBD0F2AEA0E000),\n  reinterpret<f64>(0x3FE767DCF99EFF8C), reinterpret<f64>(0x3FDCE0A43DBF4000)\n]);\n\n// @ts-ignore: decorator\n@lazy @inline const LOG2_DATA_TAB2 = memory.data<f64>([\n  //              chi                 ,                 clo\n  reinterpret<f64>(0x3FE6200012B90A8E), reinterpret<f64>(0x3C8904AB0644B605),\n  reinterpret<f64>(0x3FE66000045734A6), reinterpret<f64>(0x3C61FF9BEA62F7A9),\n  reinterpret<f64>(0x3FE69FFFC325F2C5), reinterpret<f64>(0x3C827ECFCB3C90BA),\n  reinterpret<f64>(0x3FE6E00038B95A04), reinterpret<f64>(0x3C88FF8856739326),\n  reinterpret<f64>(0x3FE71FFFE09994E3), reinterpret<f64>(0x3C8AFD40275F82B1),\n  reinterpret<f64>(0x3FE7600015590E10), reinterpret<f64>(0xBC72FD75B4238341),\n  reinterpret<f64>(0x3FE7A00012655BD5), reinterpret<f64>(0x3C7808E67C242B76),\n  reinterpret<f64>(0x3FE7E0003259E9A6), reinterpret<f64>(0xBC6208E426F622B7),\n  reinterpret<f64>(0x3FE81FFFEDB4B2D2), reinterpret<f64>(0xBC8402461EA5C92F),\n  reinterpret<f64>(0x3FE860002DFAFCC3), reinterpret<f64>(0x3C6DF7F4A2F29A1F),\n  reinterpret<f64>(0x3FE89FFFF78C6B50), reinterpret<f64>(0xBC8E0453094995FD),\n  reinterpret<f64>(0x3FE8E00039671566), reinterpret<f64>(0xBC8A04F3BEC77B45),\n  reinterpret<f64>(0x3FE91FFFE2BF1745), reinterpret<f64>(0xBC77FA34400E203C),\n  reinterpret<f64>(0x3FE95FFFCC5C9FD1), reinterpret<f64>(0xBC76FF8005A0695D),\n  reinterpret<f64>(0x3FE9A0003BBA4767), reinterpret<f64>(0x3C70F8C4C4EC7E03),\n  reinterpret<f64>(0x3FE9DFFFE7B92DA5), reinterpret<f64>(0x3C8E7FD9478C4602),\n  reinterpret<f64>(0x3FEA1FFFD72EFDAF), reinterpret<f64>(0xBC6A0C554DCDAE7E),\n  reinterpret<f64>(0x3FEA5FFFDE04FF95), reinterpret<f64>(0x3C867DA98CE9B26B),\n  reinterpret<f64>(0x3FEA9FFFCA5E8D2B), reinterpret<f64>(0xBC8284C9B54C13DE),\n  reinterpret<f64>(0x3FEADFFFDDAD03EA), reinterpret<f64>(0x3C5812C8EA602E3C),\n  reinterpret<f64>(0x3FEB1FFFF10D3D4D), reinterpret<f64>(0xBC8EFADDAD27789C),\n  reinterpret<f64>(0x3FEB5FFFCE21165A), reinterpret<f64>(0x3C53CB1719C61237),\n  reinterpret<f64>(0x3FEB9FFFD950E674), reinterpret<f64>(0x3C73F7D94194CE00),\n  reinterpret<f64>(0x3FEBE000139CA8AF), reinterpret<f64>(0x3C750AC4215D9BC0),\n  reinterpret<f64>(0x3FEC20005B46DF99), reinterpret<f64>(0x3C6BEEA653E9C1C9),\n  reinterpret<f64>(0x3FEC600040B9F7AE), reinterpret<f64>(0xBC7C079F274A70D6),\n  reinterpret<f64>(0x3FECA0006255FD8A), reinterpret<f64>(0xBC7A0B4076E84C1F),\n  reinterpret<f64>(0x3FECDFFFD94C095D), reinterpret<f64>(0x3C88F933F99AB5D7),\n  reinterpret<f64>(0x3FED1FFFF975D6CF), reinterpret<f64>(0xBC582C08665FE1BE),\n  reinterpret<f64>(0x3FED5FFFA2561C93), reinterpret<f64>(0xBC7B04289BD295F3),\n  reinterpret<f64>(0x3FED9FFF9D228B0C), reinterpret<f64>(0x3C870251340FA236),\n  reinterpret<f64>(0x3FEDE00065BC7E16), reinterpret<f64>(0xBC75011E16A4D80C),\n  reinterpret<f64>(0x3FEE200002F64791), reinterpret<f64>(0x3C89802F09EF62E0),\n  reinterpret<f64>(0x3FEE600057D7A6D8), reinterpret<f64>(0xBC7E0B75580CF7FA),\n  reinterpret<f64>(0x3FEEA00027EDC00C), reinterpret<f64>(0xBC8C848309459811),\n  reinterpret<f64>(0x3FEEE0006CF5CB7C), reinterpret<f64>(0xBC8F8027951576F4),\n  reinterpret<f64>(0x3FEF2000782B7DCC), reinterpret<f64>(0xBC8F81D97274538F),\n  reinterpret<f64>(0x3FEF6000260C450A), reinterpret<f64>(0xBC4071002727FFDC),\n  reinterpret<f64>(0x3FEF9FFFE88CD533), reinterpret<f64>(0xBC581BDCE1FDA8B0),\n  reinterpret<f64>(0x3FEFDFFFD50F8689), reinterpret<f64>(0x3C87F91ACB918E6E),\n  reinterpret<f64>(0x3FF0200004292367), reinterpret<f64>(0x3C9B7FF365324681),\n  reinterpret<f64>(0x3FF05FFFE3E3D668), reinterpret<f64>(0x3C86FA08DDAE957B),\n  reinterpret<f64>(0x3FF0A0000A85A757), reinterpret<f64>(0xBC57E2DE80D3FB91),\n  reinterpret<f64>(0x3FF0E0001A5F3FCC), reinterpret<f64>(0xBC91823305C5F014),\n  reinterpret<f64>(0x3FF11FFFF8AFBAF5), reinterpret<f64>(0xBC8BFABB6680BAC2),\n  reinterpret<f64>(0x3FF15FFFE54D91AD), reinterpret<f64>(0xBC9D7F121737E7EF),\n  reinterpret<f64>(0x3FF1A00011AC36E1), reinterpret<f64>(0x3C9C000A0516F5FF),\n  reinterpret<f64>(0x3FF1E00019C84248), reinterpret<f64>(0xBC9082FBE4DA5DA0),\n  reinterpret<f64>(0x3FF220000FFE5E6E), reinterpret<f64>(0xBC88FDD04C9CFB43),\n  reinterpret<f64>(0x3FF26000269FD891), reinterpret<f64>(0x3C8CFE2A7994D182),\n  reinterpret<f64>(0x3FF2A00029A6E6DA), reinterpret<f64>(0xBC700273715E8BC5),\n  reinterpret<f64>(0x3FF2DFFFE0293E39), reinterpret<f64>(0x3C9B7C39DAB2A6F9),\n  reinterpret<f64>(0x3FF31FFFF7DCF082), reinterpret<f64>(0x3C7DF1336EDC5254),\n  reinterpret<f64>(0x3FF35FFFF05A8B60), reinterpret<f64>(0xBC9E03564CCD31EB),\n  reinterpret<f64>(0x3FF3A0002E0EAECC), reinterpret<f64>(0x3C75F0E74BD3A477),\n  reinterpret<f64>(0x3FF3E000043BB236), reinterpret<f64>(0x3C9C7DCB149D8833),\n  reinterpret<f64>(0x3FF4200002D187FF), reinterpret<f64>(0x3C7E08AFCF2D3D28),\n  reinterpret<f64>(0x3FF460000D387CB1), reinterpret<f64>(0x3C820837856599A6),\n  reinterpret<f64>(0x3FF4A00004569F89), reinterpret<f64>(0xBC89FA5C904FBCD2),\n  reinterpret<f64>(0x3FF4E000043543F3), reinterpret<f64>(0xBC781125ED175329),\n  reinterpret<f64>(0x3FF51FFFCC027F0F), reinterpret<f64>(0x3C9883D8847754DC),\n  reinterpret<f64>(0x3FF55FFFFD87B36F), reinterpret<f64>(0xBC8709E731D02807),\n  reinterpret<f64>(0x3FF59FFFF21DF7BA), reinterpret<f64>(0x3C87F79F68727B02),\n  reinterpret<f64>(0x3FF5DFFFEBFC3481), reinterpret<f64>(0xBC9180902E30E93E)\n]);\n\n// @ts-ignore: decorator\n@inline\nexport function log2_lut(x: f64): f64 {\n  const N_MASK = (1 << LOG2_TABLE_BITS) - 1;\n\n  const\n    LO: u64 = 0x3FEEA4AF00000000, // reinterpret<u64>(1.0 - 0x1.5b51p-5)\n    HI: u64 = 0x3FF0B55900000000; // reinterpret<u64>(1.0 + 0x1.6ab2p-5)\n\n  const\n    InvLn2hi = reinterpret<f64>(0x3FF7154765200000), // 0x1.7154765200000p+0\n    InvLn2lo = reinterpret<f64>(0x3DE705FC2EEFA200), // 0x1.705fc2eefa200p-33\n    Ox1p52   = reinterpret<f64>(0x4330000000000000); // 0x1p52\n\n  const\n    B0 = reinterpret<f64>(0xBFE71547652B82FE), // -0x1.71547652b82fep-1\n    B1 = reinterpret<f64>(0x3FDEC709DC3A03F7), //  0x1.ec709dc3a03f7p-2\n    B2 = reinterpret<f64>(0xBFD71547652B7C3F), // -0x1.71547652b7c3fp-2\n    B3 = reinterpret<f64>(0x3FD2776C50F05BE4), //  0x1.2776c50f05be4p-2\n    B4 = reinterpret<f64>(0xBFCEC709DD768FE5), // -0x1.ec709dd768fe5p-3\n    B5 = reinterpret<f64>(0x3FCA61761EC4E736), //  0x1.a61761ec4e736p-3\n    B6 = reinterpret<f64>(0xBFC7153FBC64A79B), // -0x1.7153fbc64a79bp-3\n    B7 = reinterpret<f64>(0x3FC484D154F01B4A), //  0x1.484d154f01b4ap-3\n    B8 = reinterpret<f64>(0xBFC289E4A72C383C), // -0x1.289e4a72c383cp-3\n    B9 = reinterpret<f64>(0x3FC0B32F285AEE66); //  0x1.0b32f285aee66p-3\n\n  const\n    A0 = reinterpret<f64>(0xBFE71547652B8339), // -0x1.71547652b8339p-1\n    A1 = reinterpret<f64>(0x3FDEC709DC3A04BE), //  0x1.ec709dc3a04bep-2\n    A2 = reinterpret<f64>(0xBFD7154764702FFB), // -0x1.7154764702ffbp-2\n    A3 = reinterpret<f64>(0x3FD2776C50034C48), //  0x1.2776c50034c48p-2\n    A4 = reinterpret<f64>(0xBFCEC7B328EA92BC), // -0x1.ec7b328ea92bcp-3\n    A5 = reinterpret<f64>(0x3FCA6225E117F92E); //  0x1.a6225e117f92ep-3\n\n  var ix = reinterpret<u64>(x);\n  if (ix - LO < HI - LO) {\n    let r = x - 1.0;\n    // #if __FP_FAST_FMA\n    //     hi = r * InvLn2hi;\n    //     lo = r * InvLn2lo + __builtin_fma(r, InvLn2hi, -hi);\n    // #else\n    let rhi = reinterpret<f64>(reinterpret<u64>(r) & 0xFFFFFFFF00000000);\n    let rlo = r - rhi;\n    let hi  = rhi * InvLn2hi;\n    let lo  = rlo * InvLn2hi + r * InvLn2lo;\n    // #endif\n    let r2 = r * r; // rounding error: 0x1p-62\n    let r4 = r2 * r2;\n    // Worst-case error is less than 0.54 ULP (0.55 ULP without fma)\n    let p = r2 * (B0 + r * B1);\n    let y = hi + p;\n    lo += hi - y + p;\n    lo += r4 * (B2 + r * B3 + r2 * (B4 + r * B5) +\n          r4 * (B6 + r * B7 + r2 * (B8 + r * B9)));\n    return y + lo;\n  }\n  var top = <u32>(ix >> 48);\n  if (top - 0x0010 >= 0x7ff0 - 0x0010) {\n    // x < 0x1p-1022 or inf or nan.\n    if ((ix << 1) == 0) return -1.0 / (x * x);\n    if (ix == 0x7FF0000000000000) return x; // log(inf) == inf\n    if ((top & 0x8000) || (top & 0x7FF0) == 0x7FF0) return (x - x) / (x - x);\n    // x is subnormal, normalize it.\n    ix = reinterpret<u64>(x * Ox1p52);\n    ix -= u64(52) << 52;\n  }\n\n  // x = 2^k z; where z is in range [OFF,2*OFF) and exact.\n  // The range is split into N subintervals.\n  // The ith subinterval contains z and c is near its center.\n  var tmp  = ix - 0x3FE6000000000000;\n  var i    = <usize>((tmp >> (52 - LOG2_TABLE_BITS)) & N_MASK);\n  var k    = <i64>tmp >> 52;\n  var iz   = ix - (tmp & 0xFFF0000000000000);\n\n  var invc = load<f64>(LOG2_DATA_TAB1  + (i << (1 + alignof<f64>())), 0 << alignof<f64>()); // T[i].invc;\n  var logc = load<f64>(LOG2_DATA_TAB1  + (i << (1 + alignof<f64>())), 1 << alignof<f64>()); // T[i].logc;\n  var z    = reinterpret<f64>(iz);\n  var kd   = <f64>k;\n\n  // log2(x) = log2(z/c) + log2(c) + k.\n  // r ~= z/c - 1, |r| < 1/(2*N).\n  // #if __FP_FAST_FMA\n  // \t// rounding error: 0x1p-55/N.\n  // \tr = __builtin_fma(z, invc, -1.0);\n  // \tt1 = r * InvLn2hi;\n  // \tt2 = r * InvLn2lo + __builtin_fma(r, InvLn2hi, -t1);\n  // #else\n  // rounding error: 0x1p-55/N + 0x1p-65.\n  var chi = load<f64>(LOG2_DATA_TAB2 + (i << (1 + alignof<f64>())), 0 << alignof<f64>()); // T[i].chi;\n  var clo = load<f64>(LOG2_DATA_TAB2 + (i << (1 + alignof<f64>())), 1 << alignof<f64>()); // T[i].clo;\n\n  var r   = (z - chi - clo) * invc;\n  var rhi = reinterpret<f64>(reinterpret<u64>(r) & 0xFFFFFFFF00000000);\n  var rlo = r - rhi;\n  var t1  = rhi * InvLn2hi;\n  var t2  = rlo * InvLn2hi + r * InvLn2lo;\n  // #endif\n\n  // hi + lo = r/ln2 + log2(c) + k\n  var t3 = kd + logc;\n  var hi = t3 + t1;\n  var lo = t3 - hi + t1 + t2;\n\n  // log2(r+1) = r/ln2 + r^2*poly(r)\n  // Evaluation is optimized assuming superscalar pipelined execution\n  var r2 = r * r; // rounding error: 0x1p-54/N^2\n  // Worst-case error if |y| > 0x1p-4: 0.547 ULP (0.550 ULP without fma).\n  // ~ 0.5 + 2/N/ln2 + abs-poly-error*0x1p56 ULP (+ 0.003 ULP without fma).\n  var p = A0 + r * A1 + r2 * (A2 + r * A3) + (r2 * r2) * (A4 + r * A5);\n  return lo + r2 * p + hi;\n}\n\n//\n// Lookup data for log. See: https://git.musl-libc.org/cgit/musl/tree/src/math/log.c\n//\n\n// @ts-ignore: decorator\n@inline const LOG_TABLE_BITS = 7;\n\n/* Algorithm:\n\n  x = 2^k z\n  log(x) = k ln2 + log(c) + log(z/c)\n  log(z/c) = poly(z/c - 1)\n\nwhere z is in [1.6p-1; 1.6p0] which is split into N subintervals and z falls\ninto the ith one, then table entries are computed as\n\n  tab[i].invc = 1/c\n  tab[i].logc = (double)log(c)\n  tab2[i].chi = (double)c\n  tab2[i].clo = (double)(c - (double)c)\n\nwhere c is near the center of the subinterval and is chosen by trying +-2^29\nfloating point invc candidates around 1/center and selecting one for which\n\n  1) the rounding error in 0x1.8p9 + logc is 0,\n  2) the rounding error in z - chi - clo is < 0x1p-66 and\n  3) the rounding error in (double)log(c) is minimized (< 0x1p-66).\n\nNote: 1) ensures that k*ln2hi + logc can be computed without rounding error,\n2) ensures that z/c - 1 can be computed as (z - chi - clo)*invc with close to\na single rounding error when there is no fast fma for z*invc - 1, 3) ensures\nthat logc + poly(z/c - 1) has small error, however near x == 1 when\n|log(x)| < 0x1p-4, this is not enough so that is special cased.*/\n\n// @ts-ignore: decorator\n@lazy @inline const LOG_DATA_TAB1 = memory.data<f64>([\n  //              invc                ,                 logc\n  reinterpret<f64>(0x3FF734F0C3E0DE9F), reinterpret<f64>(0xBFD7CC7F79E69000),\n  reinterpret<f64>(0x3FF713786A2CE91F), reinterpret<f64>(0xBFD76FEEC20D0000),\n  reinterpret<f64>(0x3FF6F26008FAB5A0), reinterpret<f64>(0xBFD713E31351E000),\n  reinterpret<f64>(0x3FF6D1A61F138C7D), reinterpret<f64>(0xBFD6B85B38287800),\n  reinterpret<f64>(0x3FF6B1490BC5B4D1), reinterpret<f64>(0xBFD65D5590807800),\n  reinterpret<f64>(0x3FF69147332F0CBA), reinterpret<f64>(0xBFD602D076180000),\n  reinterpret<f64>(0x3FF6719F18224223), reinterpret<f64>(0xBFD5A8CA86909000),\n  reinterpret<f64>(0x3FF6524F99A51ED9), reinterpret<f64>(0xBFD54F4356035000),\n  reinterpret<f64>(0x3FF63356AA8F24C4), reinterpret<f64>(0xBFD4F637C36B4000),\n  reinterpret<f64>(0x3FF614B36B9DDC14), reinterpret<f64>(0xBFD49DA7FDA85000),\n  reinterpret<f64>(0x3FF5F66452C65C4C), reinterpret<f64>(0xBFD445923989A800),\n  reinterpret<f64>(0x3FF5D867B5912C4F), reinterpret<f64>(0xBFD3EDF439B0B800),\n  reinterpret<f64>(0x3FF5BABCCB5B90DE), reinterpret<f64>(0xBFD396CE448F7000),\n  reinterpret<f64>(0x3FF59D61F2D91A78), reinterpret<f64>(0xBFD3401E17BDA000),\n  reinterpret<f64>(0x3FF5805612465687), reinterpret<f64>(0xBFD2E9E2EF468000),\n  reinterpret<f64>(0x3FF56397CEE76BD3), reinterpret<f64>(0xBFD2941B3830E000),\n  reinterpret<f64>(0x3FF54725E2A77F93), reinterpret<f64>(0xBFD23EC58CDA8800),\n  reinterpret<f64>(0x3FF52AFF42064583), reinterpret<f64>(0xBFD1E9E129279000),\n  reinterpret<f64>(0x3FF50F22DBB2BDDF), reinterpret<f64>(0xBFD1956D2B48F800),\n  reinterpret<f64>(0x3FF4F38F4734DED7), reinterpret<f64>(0xBFD141679AB9F800),\n  reinterpret<f64>(0x3FF4D843CFDE2840), reinterpret<f64>(0xBFD0EDD094EF9800),\n  reinterpret<f64>(0x3FF4BD3EC078A3C8), reinterpret<f64>(0xBFD09AA518DB1000),\n  reinterpret<f64>(0x3FF4A27FC3E0258A), reinterpret<f64>(0xBFD047E65263B800),\n  reinterpret<f64>(0x3FF4880524D48434), reinterpret<f64>(0xBFCFEB224586F000),\n  reinterpret<f64>(0x3FF46DCE1B192D0B), reinterpret<f64>(0xBFCF474A7517B000),\n  reinterpret<f64>(0x3FF453D9D3391854), reinterpret<f64>(0xBFCEA4443D103000),\n  reinterpret<f64>(0x3FF43A2744B4845A), reinterpret<f64>(0xBFCE020D44E9B000),\n  reinterpret<f64>(0x3FF420B54115F8FB), reinterpret<f64>(0xBFCD60A22977F000),\n  reinterpret<f64>(0x3FF40782DA3EF4B1), reinterpret<f64>(0xBFCCC00104959000),\n  reinterpret<f64>(0x3FF3EE8F5D57FE8F), reinterpret<f64>(0xBFCC202956891000),\n  reinterpret<f64>(0x3FF3D5D9A00B4CE9), reinterpret<f64>(0xBFCB81178D811000),\n  reinterpret<f64>(0x3FF3BD60C010C12B), reinterpret<f64>(0xBFCAE2C9CCD3D000),\n  reinterpret<f64>(0x3FF3A5242B75DAB8), reinterpret<f64>(0xBFCA45402E129000),\n  reinterpret<f64>(0x3FF38D22CD9FD002), reinterpret<f64>(0xBFC9A877681DF000),\n  reinterpret<f64>(0x3FF3755BC5847A1C), reinterpret<f64>(0xBFC90C6D69483000),\n  reinterpret<f64>(0x3FF35DCE49AD36E2), reinterpret<f64>(0xBFC87120A645C000),\n  reinterpret<f64>(0x3FF34679984DD440), reinterpret<f64>(0xBFC7D68FB4143000),\n  reinterpret<f64>(0x3FF32F5CCEFFCB24), reinterpret<f64>(0xBFC73CB83C627000),\n  reinterpret<f64>(0x3FF3187775A10D49), reinterpret<f64>(0xBFC6A39A9B376000),\n  reinterpret<f64>(0x3FF301C8373E3990), reinterpret<f64>(0xBFC60B3154B7A000),\n  reinterpret<f64>(0x3FF2EB4EBB95F841), reinterpret<f64>(0xBFC5737D76243000),\n  reinterpret<f64>(0x3FF2D50A0219A9D1), reinterpret<f64>(0xBFC4DC7B8FC23000),\n  reinterpret<f64>(0x3FF2BEF9A8B7FD2A), reinterpret<f64>(0xBFC4462C51D20000),\n  reinterpret<f64>(0x3FF2A91C7A0C1BAB), reinterpret<f64>(0xBFC3B08ABC830000),\n  reinterpret<f64>(0x3FF293726014B530), reinterpret<f64>(0xBFC31B996B490000),\n  reinterpret<f64>(0x3FF27DFA5757A1F5), reinterpret<f64>(0xBFC2875490A44000),\n  reinterpret<f64>(0x3FF268B39B1D3BBF), reinterpret<f64>(0xBFC1F3B9F879A000),\n  reinterpret<f64>(0x3FF2539D838FF5BD), reinterpret<f64>(0xBFC160C8252CA000),\n  reinterpret<f64>(0x3FF23EB7AAC9083B), reinterpret<f64>(0xBFC0CE7F57F72000),\n  reinterpret<f64>(0x3FF22A012BA940B6), reinterpret<f64>(0xBFC03CDC49FEA000),\n  reinterpret<f64>(0x3FF2157996CC4132), reinterpret<f64>(0xBFBF57BDBC4B8000),\n  reinterpret<f64>(0x3FF201201DD2FC9B), reinterpret<f64>(0xBFBE370896404000),\n  reinterpret<f64>(0x3FF1ECF4494D480B), reinterpret<f64>(0xBFBD17983EF94000),\n  reinterpret<f64>(0x3FF1D8F5528F6569), reinterpret<f64>(0xBFBBF9674ED8A000),\n  reinterpret<f64>(0x3FF1C52311577E7C), reinterpret<f64>(0xBFBADC79202F6000),\n  reinterpret<f64>(0x3FF1B17C74CB26E9), reinterpret<f64>(0xBFB9C0C3E7288000),\n  reinterpret<f64>(0x3FF19E010C2C1AB6), reinterpret<f64>(0xBFB8A646B372C000),\n  reinterpret<f64>(0x3FF18AB07BB670BD), reinterpret<f64>(0xBFB78D01B3AC0000),\n  reinterpret<f64>(0x3FF1778A25EFBCB6), reinterpret<f64>(0xBFB674F145380000),\n  reinterpret<f64>(0x3FF1648D354C31DA), reinterpret<f64>(0xBFB55E0E6D878000),\n  reinterpret<f64>(0x3FF151B990275FDD), reinterpret<f64>(0xBFB4485CDEA1E000),\n  reinterpret<f64>(0x3FF13F0EA432D24C), reinterpret<f64>(0xBFB333D94D6AA000),\n  reinterpret<f64>(0x3FF12C8B7210F9DA), reinterpret<f64>(0xBFB22079F8C56000),\n  reinterpret<f64>(0x3FF11A3028ECB531), reinterpret<f64>(0xBFB10E4698622000),\n  reinterpret<f64>(0x3FF107FBDA8434AF), reinterpret<f64>(0xBFAFFA6C6AD20000),\n  reinterpret<f64>(0x3FF0F5EE0F4E6BB3), reinterpret<f64>(0xBFADDA8D4A774000),\n  reinterpret<f64>(0x3FF0E4065D2A9FCE), reinterpret<f64>(0xBFABBCECE4850000),\n  reinterpret<f64>(0x3FF0D244632CA521), reinterpret<f64>(0xBFA9A1894012C000),\n  reinterpret<f64>(0x3FF0C0A77CE2981A), reinterpret<f64>(0xBFA788583302C000),\n  reinterpret<f64>(0x3FF0AF2F83C636D1), reinterpret<f64>(0xBFA5715E67D68000),\n  reinterpret<f64>(0x3FF09DDB98A01339), reinterpret<f64>(0xBFA35C8A49658000),\n  reinterpret<f64>(0x3FF08CABAF52E7DF), reinterpret<f64>(0xBFA149E364154000),\n  reinterpret<f64>(0x3FF07B9F2F4E28FB), reinterpret<f64>(0xBF9E72C082EB8000),\n  reinterpret<f64>(0x3FF06AB58C358F19), reinterpret<f64>(0xBF9A55F152528000),\n  reinterpret<f64>(0x3FF059EEA5ECF92C), reinterpret<f64>(0xBF963D62CF818000),\n  reinterpret<f64>(0x3FF04949CDD12C90), reinterpret<f64>(0xBF9228FB8CAA0000),\n  reinterpret<f64>(0x3FF038C6C6F0ADA9), reinterpret<f64>(0xBF8C317B20F90000),\n  reinterpret<f64>(0x3FF02865137932A9), reinterpret<f64>(0xBF8419355DAA0000),\n  reinterpret<f64>(0x3FF0182427EA7348), reinterpret<f64>(0xBF781203C2EC0000),\n  reinterpret<f64>(0x3FF008040614B195), reinterpret<f64>(0xBF60040979240000),\n  reinterpret<f64>(0x3FEFE01FF726FA1A), reinterpret<f64>(0x3F6FEFF384900000),\n  reinterpret<f64>(0x3FEFA11CC261EA74), reinterpret<f64>(0x3F87DC41353D0000),\n  reinterpret<f64>(0x3FEF6310B081992E), reinterpret<f64>(0x3F93CEA3C4C28000),\n  reinterpret<f64>(0x3FEF25F63CEEADCD), reinterpret<f64>(0x3F9B9FC114890000),\n  reinterpret<f64>(0x3FEEE9C8039113E7), reinterpret<f64>(0x3FA1B0D8CE110000),\n  reinterpret<f64>(0x3FEEAE8078CBB1AB), reinterpret<f64>(0x3FA58A5BD001C000),\n  reinterpret<f64>(0x3FEE741AA29D0C9B), reinterpret<f64>(0x3FA95C8340D88000),\n  reinterpret<f64>(0x3FEE3A91830A99B5), reinterpret<f64>(0x3FAD276AEF578000),\n  reinterpret<f64>(0x3FEE01E009609A56), reinterpret<f64>(0x3FB07598E598C000),\n  reinterpret<f64>(0x3FEDCA01E577BB98), reinterpret<f64>(0x3FB253F5E30D2000),\n  reinterpret<f64>(0x3FED92F20B7C9103), reinterpret<f64>(0x3FB42EDD8B380000),\n  reinterpret<f64>(0x3FED5CAC66FB5CCE), reinterpret<f64>(0x3FB606598757C000),\n  reinterpret<f64>(0x3FED272CAA5EDE9D), reinterpret<f64>(0x3FB7DA76356A0000),\n  reinterpret<f64>(0x3FECF26E3E6B2CCD), reinterpret<f64>(0x3FB9AB434E1C6000),\n  reinterpret<f64>(0x3FECBE6DA2A77902), reinterpret<f64>(0x3FBB78C7BB0D6000),\n  reinterpret<f64>(0x3FEC8B266D37086D), reinterpret<f64>(0x3FBD431332E72000),\n  reinterpret<f64>(0x3FEC5894BD5D5804), reinterpret<f64>(0x3FBF0A3171DE6000),\n  reinterpret<f64>(0x3FEC26B533BB9F8C), reinterpret<f64>(0x3FC067152B914000),\n  reinterpret<f64>(0x3FEBF583EEECE73F), reinterpret<f64>(0x3FC147858292B000),\n  reinterpret<f64>(0x3FEBC4FD75DB96C1), reinterpret<f64>(0x3FC2266ECDCA3000),\n  reinterpret<f64>(0x3FEB951E0C864A28), reinterpret<f64>(0x3FC303D7A6C55000),\n  reinterpret<f64>(0x3FEB65E2C5EF3E2C), reinterpret<f64>(0x3FC3DFC33C331000),\n  reinterpret<f64>(0x3FEB374867C9888B), reinterpret<f64>(0x3FC4BA366B7A8000),\n  reinterpret<f64>(0x3FEB094B211D304A), reinterpret<f64>(0x3FC5933928D1F000),\n  reinterpret<f64>(0x3FEADBE885F2EF7E), reinterpret<f64>(0x3FC66ACD2418F000),\n  reinterpret<f64>(0x3FEAAF1D31603DA2), reinterpret<f64>(0x3FC740F8EC669000),\n  reinterpret<f64>(0x3FEA82E63FD358A7), reinterpret<f64>(0x3FC815C0F51AF000),\n  reinterpret<f64>(0x3FEA5740EF09738B), reinterpret<f64>(0x3FC8E92954F68000),\n  reinterpret<f64>(0x3FEA2C2A90AB4B27), reinterpret<f64>(0x3FC9BB3602F84000),\n  reinterpret<f64>(0x3FEA01A01393F2D1), reinterpret<f64>(0x3FCA8BED1C2C0000),\n  reinterpret<f64>(0x3FE9D79F24DB3C1B), reinterpret<f64>(0x3FCB5B515C01D000),\n  reinterpret<f64>(0x3FE9AE2505C7B190), reinterpret<f64>(0x3FCC2967CCBCC000),\n  reinterpret<f64>(0x3FE9852EF297CE2F), reinterpret<f64>(0x3FCCF635D5486000),\n  reinterpret<f64>(0x3FE95CBAEEA44B75), reinterpret<f64>(0x3FCDC1BD3446C000),\n  reinterpret<f64>(0x3FE934C69DE74838), reinterpret<f64>(0x3FCE8C01B8CFE000),\n  reinterpret<f64>(0x3FE90D4F2F6752E6), reinterpret<f64>(0x3FCF5509C0179000),\n  reinterpret<f64>(0x3FE8E6528EFFD79D), reinterpret<f64>(0x3FD00E6C121FB800),\n  reinterpret<f64>(0x3FE8BFCE9FCC007C), reinterpret<f64>(0x3FD071B80E93D000),\n  reinterpret<f64>(0x3FE899C0DABEC30E), reinterpret<f64>(0x3FD0D46B9E867000),\n  reinterpret<f64>(0x3FE87427AA2317FB), reinterpret<f64>(0x3FD13687334BD000),\n  reinterpret<f64>(0x3FE84F00ACB39A08), reinterpret<f64>(0x3FD1980D67234800),\n  reinterpret<f64>(0x3FE82A49E8653E55), reinterpret<f64>(0x3FD1F8FFE0CC8000),\n  reinterpret<f64>(0x3FE8060195F40260), reinterpret<f64>(0x3FD2595FD7636800),\n  reinterpret<f64>(0x3FE7E22563E0A329), reinterpret<f64>(0x3FD2B9300914A800),\n  reinterpret<f64>(0x3FE7BEB377DCB5AD), reinterpret<f64>(0x3FD3187210436000),\n  reinterpret<f64>(0x3FE79BAA679725C2), reinterpret<f64>(0x3FD377266DEC1800),\n  reinterpret<f64>(0x3FE77907F2170657), reinterpret<f64>(0x3FD3D54FFBAF3000),\n  reinterpret<f64>(0x3FE756CADBD6130C), reinterpret<f64>(0x3FD432EEE32FE000)\n]);\n\n// @ts-ignore: decorator\n@lazy @inline const LOG_DATA_TAB2 = memory.data<f64>([\n  //               chi                ,                  clo\n  reinterpret<f64>(0x3FE61000014FB66B), reinterpret<f64>(0x3C7E026C91425B3C),\n  reinterpret<f64>(0x3FE63000034DB495), reinterpret<f64>(0x3C8DBFEA48005D41),\n  reinterpret<f64>(0x3FE650000D94D478), reinterpret<f64>(0x3C8E7FA786D6A5B7),\n  reinterpret<f64>(0x3FE67000074E6FAD), reinterpret<f64>(0x3C61FCEA6B54254C),\n  reinterpret<f64>(0x3FE68FFFFEDF0FAE), reinterpret<f64>(0xBC7C7E274C590EFD),\n  reinterpret<f64>(0x3FE6B0000763C5BC), reinterpret<f64>(0xBC8AC16848DCDA01),\n  reinterpret<f64>(0x3FE6D0001E5CC1F6), reinterpret<f64>(0x3C833F1C9D499311),\n  reinterpret<f64>(0x3FE6EFFFEB05F63E), reinterpret<f64>(0xBC7E80041AE22D53),\n  reinterpret<f64>(0x3FE710000E869780), reinterpret<f64>(0x3C7BFF6671097952),\n  reinterpret<f64>(0x3FE72FFFFC67E912), reinterpret<f64>(0x3C8C00E226BD8724),\n  reinterpret<f64>(0x3FE74FFFDF81116A), reinterpret<f64>(0xBC6E02916EF101D2),\n  reinterpret<f64>(0x3FE770000F679C90), reinterpret<f64>(0xBC67FC71CD549C74),\n  reinterpret<f64>(0x3FE78FFFFA7EC835), reinterpret<f64>(0x3C81BEC19EF50483),\n  reinterpret<f64>(0x3FE7AFFFFE20C2E6), reinterpret<f64>(0xBC707E1729CC6465),\n  reinterpret<f64>(0x3FE7CFFFED3FC900), reinterpret<f64>(0xBC808072087B8B1C),\n  reinterpret<f64>(0x3FE7EFFFE9261A76), reinterpret<f64>(0x3C8DC0286D9DF9AE),\n  reinterpret<f64>(0x3FE81000049CA3E8), reinterpret<f64>(0x3C897FD251E54C33),\n  reinterpret<f64>(0x3FE8300017932C8F), reinterpret<f64>(0xBC8AFEE9B630F381),\n  reinterpret<f64>(0x3FE850000633739C), reinterpret<f64>(0x3C89BFBF6B6535BC),\n  reinterpret<f64>(0x3FE87000204289C6), reinterpret<f64>(0xBC8BBF65F3117B75),\n  reinterpret<f64>(0x3FE88FFFEBF57904), reinterpret<f64>(0xBC89006EA23DCB57),\n  reinterpret<f64>(0x3FE8B00022BC04DF), reinterpret<f64>(0xBC7D00DF38E04B0A),\n  reinterpret<f64>(0x3FE8CFFFE50C1B8A), reinterpret<f64>(0xBC88007146FF9F05),\n  reinterpret<f64>(0x3FE8EFFFFC918E43), reinterpret<f64>(0x3C83817BD07A7038),\n  reinterpret<f64>(0x3FE910001EFA5FC7), reinterpret<f64>(0x3C893E9176DFB403),\n  reinterpret<f64>(0x3FE9300013467BB9), reinterpret<f64>(0x3C7F804E4B980276),\n  reinterpret<f64>(0x3FE94FFFE6EE076F), reinterpret<f64>(0xBC8F7EF0D9FF622E),\n  reinterpret<f64>(0x3FE96FFFDE3C12D1), reinterpret<f64>(0xBC7082AA962638BA),\n  reinterpret<f64>(0x3FE98FFFF4458A0D), reinterpret<f64>(0xBC87801B9164A8EF),\n  reinterpret<f64>(0x3FE9AFFFDD982E3E), reinterpret<f64>(0xBC8740E08A5A9337),\n  reinterpret<f64>(0x3FE9CFFFED49FB66), reinterpret<f64>(0x3C3FCE08C19BE000),\n  reinterpret<f64>(0x3FE9F00020F19C51), reinterpret<f64>(0xBC8A3FAA27885B0A),\n  reinterpret<f64>(0x3FEA10001145B006), reinterpret<f64>(0x3C74FF489958DA56),\n  reinterpret<f64>(0x3FEA300007BBF6FA), reinterpret<f64>(0x3C8CBEAB8A2B6D18),\n  reinterpret<f64>(0x3FEA500010971D79), reinterpret<f64>(0x3C88FECADD787930),\n  reinterpret<f64>(0x3FEA70001DF52E48), reinterpret<f64>(0xBC8F41763DD8ABDB),\n  reinterpret<f64>(0x3FEA90001C593352), reinterpret<f64>(0xBC8EBF0284C27612),\n  reinterpret<f64>(0x3FEAB0002A4F3E4B), reinterpret<f64>(0xBC69FD043CFF3F5F),\n  reinterpret<f64>(0x3FEACFFFD7AE1ED1), reinterpret<f64>(0xBC823EE7129070B4),\n  reinterpret<f64>(0x3FEAEFFFEE510478), reinterpret<f64>(0x3C6A063EE00EDEA3),\n  reinterpret<f64>(0x3FEB0FFFDB650D5B), reinterpret<f64>(0x3C5A06C8381F0AB9),\n  reinterpret<f64>(0x3FEB2FFFFEAACA57), reinterpret<f64>(0xBC79011E74233C1D),\n  reinterpret<f64>(0x3FEB4FFFD995BADC), reinterpret<f64>(0xBC79FF1068862A9F),\n  reinterpret<f64>(0x3FEB7000249E659C), reinterpret<f64>(0x3C8AFF45D0864F3E),\n  reinterpret<f64>(0x3FEB8FFFF9871640), reinterpret<f64>(0x3C7CFE7796C2C3F9),\n  reinterpret<f64>(0x3FEBAFFFD204CB4F), reinterpret<f64>(0xBC63FF27EEF22BC4),\n  reinterpret<f64>(0x3FEBCFFFD2415C45), reinterpret<f64>(0xBC6CFFB7EE3BEA21),\n  reinterpret<f64>(0x3FEBEFFFF86309DF), reinterpret<f64>(0xBC814103972E0B5C),\n  reinterpret<f64>(0x3FEC0FFFE1B57653), reinterpret<f64>(0x3C8BC16494B76A19),\n  reinterpret<f64>(0x3FEC2FFFF1FA57E3), reinterpret<f64>(0xBC64FEEF8D30C6ED),\n  reinterpret<f64>(0x3FEC4FFFDCBFE424), reinterpret<f64>(0xBC843F68BCEC4775),\n  reinterpret<f64>(0x3FEC6FFFED54B9F7), reinterpret<f64>(0x3C847EA3F053E0EC),\n  reinterpret<f64>(0x3FEC8FFFEB998FD5), reinterpret<f64>(0x3C7383068DF992F1),\n  reinterpret<f64>(0x3FECB0002125219A), reinterpret<f64>(0xBC68FD8E64180E04),\n  reinterpret<f64>(0x3FECCFFFDD94469C), reinterpret<f64>(0x3C8E7EBE1CC7EA72),\n  reinterpret<f64>(0x3FECEFFFEAFDC476), reinterpret<f64>(0x3C8EBE39AD9F88FE),\n  reinterpret<f64>(0x3FED1000169AF82B), reinterpret<f64>(0x3C757D91A8B95A71),\n  reinterpret<f64>(0x3FED30000D0FF71D), reinterpret<f64>(0x3C89C1906970C7DA),\n  reinterpret<f64>(0x3FED4FFFEA790FC4), reinterpret<f64>(0xBC580E37C558FE0C),\n  reinterpret<f64>(0x3FED70002EDC87E5), reinterpret<f64>(0xBC7F80D64DC10F44),\n  reinterpret<f64>(0x3FED900021DC82AA), reinterpret<f64>(0xBC747C8F94FD5C5C),\n  reinterpret<f64>(0x3FEDAFFFD86B0283), reinterpret<f64>(0x3C8C7F1DC521617E),\n  reinterpret<f64>(0x3FEDD000296C4739), reinterpret<f64>(0x3C88019EB2FFB153),\n  reinterpret<f64>(0x3FEDEFFFE54490F5), reinterpret<f64>(0x3C6E00D2C652CC89),\n  reinterpret<f64>(0x3FEE0FFFCDABF694), reinterpret<f64>(0xBC7F8340202D69D2),\n  reinterpret<f64>(0x3FEE2FFFDB52C8DD), reinterpret<f64>(0x3C7B00C1CA1B0864),\n  reinterpret<f64>(0x3FEE4FFFF24216EF), reinterpret<f64>(0x3C72FFA8B094AB51),\n  reinterpret<f64>(0x3FEE6FFFE88A5E11), reinterpret<f64>(0xBC57F673B1EFBE59),\n  reinterpret<f64>(0x3FEE9000119EFF0D), reinterpret<f64>(0xBC84808D5E0BC801),\n  reinterpret<f64>(0x3FEEAFFFDFA51744), reinterpret<f64>(0x3C780006D54320B5),\n  reinterpret<f64>(0x3FEED0001A127FA1), reinterpret<f64>(0xBC5002F860565C92),\n  reinterpret<f64>(0x3FEEF00007BABCC4), reinterpret<f64>(0xBC8540445D35E611),\n  reinterpret<f64>(0x3FEF0FFFF57A8D02), reinterpret<f64>(0xBC4FFB3139EF9105),\n  reinterpret<f64>(0x3FEF30001EE58AC7), reinterpret<f64>(0x3C8A81ACF2731155),\n  reinterpret<f64>(0x3FEF4FFFF5823494), reinterpret<f64>(0x3C8A3F41D4D7C743),\n  reinterpret<f64>(0x3FEF6FFFFCA94C6B), reinterpret<f64>(0xBC6202F41C987875),\n  reinterpret<f64>(0x3FEF8FFFE1F9C441), reinterpret<f64>(0x3C777DD1F477E74B),\n  reinterpret<f64>(0x3FEFAFFFD2E0E37E), reinterpret<f64>(0xBC6F01199A7CA331),\n  reinterpret<f64>(0x3FEFD0001C77E49E), reinterpret<f64>(0x3C7181EE4BCEACB1),\n  reinterpret<f64>(0x3FEFEFFFF7E0C331), reinterpret<f64>(0xBC6E05370170875A),\n  reinterpret<f64>(0x3FF00FFFF465606E), reinterpret<f64>(0xBC8A7EAD491C0ADA),\n  reinterpret<f64>(0x3FF02FFFF3867A58), reinterpret<f64>(0xBC977F69C3FCB2E0),\n  reinterpret<f64>(0x3FF04FFFFDFC0D17), reinterpret<f64>(0x3C97BFFE34CB945B),\n  reinterpret<f64>(0x3FF0700003CD4D82), reinterpret<f64>(0x3C820083C0E456CB),\n  reinterpret<f64>(0x3FF08FFFF9F2CBE8), reinterpret<f64>(0xBC6DFFDFBE37751A),\n  reinterpret<f64>(0x3FF0B000010CDA65), reinterpret<f64>(0xBC913F7FAEE626EB),\n  reinterpret<f64>(0x3FF0D00001A4D338), reinterpret<f64>(0x3C807DFA79489FF7),\n  reinterpret<f64>(0x3FF0EFFFFADAFDFD), reinterpret<f64>(0xBC77040570D66BC0),\n  reinterpret<f64>(0x3FF110000BBAFD96), reinterpret<f64>(0x3C8E80D4846D0B62),\n  reinterpret<f64>(0x3FF12FFFFAE5F45D), reinterpret<f64>(0x3C9DBFFA64FD36EF),\n  reinterpret<f64>(0x3FF150000DD59AD9), reinterpret<f64>(0x3C9A0077701250AE),\n  reinterpret<f64>(0x3FF170000F21559A), reinterpret<f64>(0x3C8DFDF9E2E3DEEE),\n  reinterpret<f64>(0x3FF18FFFFC275426), reinterpret<f64>(0x3C910030DC3B7273),\n  reinterpret<f64>(0x3FF1B000123D3C59), reinterpret<f64>(0x3C997F7980030188),\n  reinterpret<f64>(0x3FF1CFFFF8299EB7), reinterpret<f64>(0xBC65F932AB9F8C67),\n  reinterpret<f64>(0x3FF1EFFFF48AD400), reinterpret<f64>(0x3C937FBF9DA75BEB),\n  reinterpret<f64>(0x3FF210000C8B86A4), reinterpret<f64>(0x3C9F806B91FD5B22),\n  reinterpret<f64>(0x3FF2300003854303), reinterpret<f64>(0x3C93FFC2EB9FBF33),\n  reinterpret<f64>(0x3FF24FFFFFBCF684), reinterpret<f64>(0x3C7601E77E2E2E72),\n  reinterpret<f64>(0x3FF26FFFF52921D9), reinterpret<f64>(0x3C7FFCBB767F0C61),\n  reinterpret<f64>(0x3FF2900014933A3C), reinterpret<f64>(0xBC7202CA3C02412B),\n  reinterpret<f64>(0x3FF2B00014556313), reinterpret<f64>(0xBC92808233F21F02),\n  reinterpret<f64>(0x3FF2CFFFEBFE523B), reinterpret<f64>(0xBC88FF7E384FDCF2),\n  reinterpret<f64>(0x3FF2F0000BB8AD96), reinterpret<f64>(0xBC85FF51503041C5),\n  reinterpret<f64>(0x3FF30FFFFB7AE2AF), reinterpret<f64>(0xBC810071885E289D),\n  reinterpret<f64>(0x3FF32FFFFEAC5F7F), reinterpret<f64>(0xBC91FF5D3FB7B715),\n  reinterpret<f64>(0x3FF350000CA66756), reinterpret<f64>(0x3C957F82228B82BD),\n  reinterpret<f64>(0x3FF3700011FBF721), reinterpret<f64>(0x3C8000BAC40DD5CC),\n  reinterpret<f64>(0x3FF38FFFF9592FB9), reinterpret<f64>(0xBC943F9D2DB2A751),\n  reinterpret<f64>(0x3FF3B00004DDD242), reinterpret<f64>(0x3C857F6B707638E1),\n  reinterpret<f64>(0x3FF3CFFFF5B2C957), reinterpret<f64>(0x3C7A023A10BF1231),\n  reinterpret<f64>(0x3FF3EFFFEAB0B418), reinterpret<f64>(0x3C987F6D66B152B0),\n  reinterpret<f64>(0x3FF410001532AFF4), reinterpret<f64>(0x3C67F8375F198524),\n  reinterpret<f64>(0x3FF4300017478B29), reinterpret<f64>(0x3C8301E672DC5143),\n  reinterpret<f64>(0x3FF44FFFE795B463), reinterpret<f64>(0x3C89FF69B8B2895A),\n  reinterpret<f64>(0x3FF46FFFE80475E0), reinterpret<f64>(0xBC95C0B19BC2F254),\n  reinterpret<f64>(0x3FF48FFFEF6FC1E7), reinterpret<f64>(0x3C9B4009F23A2A72),\n  reinterpret<f64>(0x3FF4AFFFE5BEA704), reinterpret<f64>(0xBC94FFB7BF0D7D45),\n  reinterpret<f64>(0x3FF4D000171027DE), reinterpret<f64>(0xBC99C06471DC6A3D),\n  reinterpret<f64>(0x3FF4F0000FF03EE2), reinterpret<f64>(0x3C977F890B85531C),\n  reinterpret<f64>(0x3FF5100012DC4BD1), reinterpret<f64>(0x3C6004657166A436),\n  reinterpret<f64>(0x3FF530001605277A), reinterpret<f64>(0xBC96BFCECE233209),\n  reinterpret<f64>(0x3FF54FFFECDB704C), reinterpret<f64>(0xBC8902720505A1D7),\n  reinterpret<f64>(0x3FF56FFFEF5F54A9), reinterpret<f64>(0x3C9BBFE60EC96412),\n  reinterpret<f64>(0x3FF5900017E61012), reinterpret<f64>(0x3C887EC581AFEF90),\n  reinterpret<f64>(0x3FF5B00003C93E92), reinterpret<f64>(0xBC9F41080ABF0CC0),\n  reinterpret<f64>(0x3FF5D0001D4919BC), reinterpret<f64>(0xBC98812AFB254729),\n  reinterpret<f64>(0x3FF5EFFFE7B87A89), reinterpret<f64>(0xBC947EB780ED6904)\n]);\n\n// @ts-ignore: decorator\n@inline\nexport function log_lut(x: f64): f64 {\n  const N_MASK = (1 << LOG_TABLE_BITS) - 1;\n\n  const\n    B0  = reinterpret<f64>(0xBFE0000000000000), // -0x1p-1\n    B1  = reinterpret<f64>(0x3FD5555555555577), //  0x1.5555555555577p-2\n    B2  = reinterpret<f64>(0xBFCFFFFFFFFFFDCB), // -0x1.ffffffffffdcbp-3\n    B3  = reinterpret<f64>(0x3FC999999995DD0C), //  0x1.999999995dd0cp-3\n    B4  = reinterpret<f64>(0xBFC55555556745A7), // -0x1.55555556745a7p-3\n    B5  = reinterpret<f64>(0x3FC24924A344DE30), //  0x1.24924a344de3p-3\n    B6  = reinterpret<f64>(0xBFBFFFFFA4423D65), // -0x1.fffffa4423d65p-4\n    B7  = reinterpret<f64>(0x3FBC7184282AD6CA), //  0x1.c7184282ad6cap-4\n    B8  = reinterpret<f64>(0xBFB999EB43B068FF), // -0x1.999eb43b068ffp-4\n    B9  = reinterpret<f64>(0x3FB78182F7AFD085), //  0x1.78182f7afd085p-4\n    B10 = reinterpret<f64>(0xBFB5521375D145CD); // -0x1.5521375d145cdp-4\n\n  const\n    A0 = reinterpret<f64>(0xBFE0000000000001),  // -0x1.0000000000001p-1\n    A1 = reinterpret<f64>(0x3FD555555551305B),  //  0x1.555555551305bp-2\n    A2 = reinterpret<f64>(0xBFCFFFFFFFEB4590),  // -0x1.fffffffeb459p-3\n    A3 = reinterpret<f64>(0x3FC999B324F10111),  //  0x1.999b324f10111p-3\n    A4 = reinterpret<f64>(0xBFC55575E506C89F);  // -0x1.55575e506c89fp-3\n\n  const\n    LO: u64 = 0x3FEE000000000000,\n    HI: u64 = 0x3FF1090000000000;\n\n  const\n    Ln2hi  = reinterpret<f64>(0x3FE62E42FEFA3800), // 0x1.62e42fefa3800p-1\n    Ln2lo  = reinterpret<f64>(0x3D2EF35793C76730), // 0x1.ef35793c76730p-45\n    Ox1p27 = reinterpret<f64>(0x41A0000000000000), // 0x1p27\n    Ox1p52 = reinterpret<f64>(0x4330000000000000); // 0x1p52\n\n  var ix = reinterpret<u64>(x);\n  if (ix - LO < HI - LO) {\n    let r  = x - 1.0;\n    let r2 = r * r;\n    let r3 = r2 * r;\n    let y =\n      r3 * (B1 + r * B2 + r2 * B3 +\n      r3 * (B4 + r * B5 + r2 * B6 +\n      r3 * (B7 + r * B8 + r2 * B9 + r3 * B10)));\n    // Worst-case error is around 0.507 ULP\n    let w   = r * Ox1p27;\n    let rhi = r + w - w;\n    let rlo = r - rhi;\n    w = rhi * rhi * B0; // B[0] == -0.5\n    let hi = r + w;\n    let lo = r - hi + w;\n    lo += B0 * rlo * (rhi + r);\n    return y + lo + hi;\n  }\n  var top = u32(ix >> 48);\n  if (top - 0x0010 >= 0x7FF0 - 0x0010) {\n    // x < 0x1p-1022 or inf or nan\n    if ((ix << 1) == 0) return -1.0 / (x * x);\n    if (ix == reinterpret<u64>(Infinity)) return x; // log(inf) == inf\n    if ((top & 0x8000) || (top & 0x7FF0) == 0x7FF0) return (x - x) / (x - x);\n    // x is subnormal, normalize it\n    ix = reinterpret<u64>(x * Ox1p52);\n    ix -= u64(52) << 52;\n  }\n\n  // x = 2^k z; where z is in range [OFF,2*OFF) and exact.\n  // The range is split into N subintervals.\n  // The ith subinterval contains z and c is near its center.\n  var tmp  = ix - 0x3FE6000000000000;\n  var i    = <usize>((tmp >> (52 - LOG_TABLE_BITS)) & N_MASK);\n  var k    = <i64>tmp >> 52;\n  var iz   = ix - (tmp & (u64(0xFFF) << 52));\n\n  var invc = load<f64>(LOG_DATA_TAB1 + (i << (1 + alignof<f64>())), 0 << alignof<f64>()); // T[i].invc;\n  var logc = load<f64>(LOG_DATA_TAB1 + (i << (1 + alignof<f64>())), 1 << alignof<f64>()); // T[i].logc;\n  var z    = reinterpret<f64>(iz);\n\n  // log(x) = log1p(z/c-1) + log(c) + k*Ln2.\n  // r ~= z/c - 1, |r| < 1/(2*N)\n  // #if __FP_FAST_FMA\n  // \t// rounding error: 0x1p-55/N\n  // \tr = __builtin_fma(z, invc, -1.0);\n  // #else\n  // rounding error: 0x1p-55/N + 0x1p-66\n  const chi = load<f64>(LOG_DATA_TAB2 + (i << (1 + alignof<f64>())), 0 << alignof<f64>()); // T2[i].chi\n  const clo = load<f64>(LOG_DATA_TAB2 + (i << (1 + alignof<f64>())), 1 << alignof<f64>()); // T2[i].clo\n  var r = (z - chi - clo) * invc;\n  // #endif\n  var kd = <f64>k;\n\n  // hi + lo = r + log(c) + k*Ln2\n  var w  = kd * Ln2hi + logc;\n  var hi = w + r;\n  var lo = w - hi + r + kd * Ln2lo;\n\n  // log(x) = lo + (log1p(r) - r) + hi\n  var r2 = r * r; // rounding error: 0x1p-54/N^2\n  // Worst case error if |y| > 0x1p-5:\n  // 0.5 + 4.13/N + abs-poly-error*2^57 ULP (+ 0.002 ULP without fma)\n  // Worst case error if |y| > 0x1p-4:\n  // 0.5 + 2.06/N + abs-poly-error*2^56 ULP (+ 0.001 ULP without fma).\n  return lo + r2 * A0 + r * r2 * (A1 + r * A2 + r2 * (A3 + r * A4)) + hi;\n}\n\n//\n// Lookup data for pow. See: https://git.musl-libc.org/cgit/musl/tree/src/math/pow.c\n//\n\n// @ts-ignore: decorator\n@inline const POW_LOG_TABLE_BITS = 7;\n\n/* Algorithm:\n\n  x = 2^k z\n  log(x) = k ln2 + log(c) + log(z/c)\n  log(z/c) = poly(z/c - 1)\n\nwhere z is in [0x1.69555p-1; 0x1.69555p0] which is split into N subintervals\nand z falls into the ith one, then table entries are computed as\n\n  tab[i].invc = 1/c\n  tab[i].logc = round(0x1p43*log(c))/0x1p43\n  tab[i].logctail = (double)(log(c) - logc)\n\nwhere c is chosen near the center of the subinterval such that 1/c has only a\nfew precision bits so z/c - 1 is exactly representible as double:\n\n  1/c = center < 1 ? round(N/center)/N : round(2*N/center)/N/2\n\nNote: |z/c - 1| < 1/N for the chosen c, |log(c) - logc - logctail| < 0x1p-97,\nthe last few bits of logc are rounded away so k*ln2hi + logc has no rounding\nerror and the interval for z is selected such that near x == 1, where log(x)\nis tiny, large cancellation error is avoided in logc + poly(z/c - 1). */\n\n// @ts-ignore: decorator\n@lazy @inline const POW_LOG_DATA_TAB = memory.data<f64>([\n  //             invc                 ,pad,               logc                 ,               logctail\n  reinterpret<f64>(0x3FF6A00000000000), 0, reinterpret<f64>(0xBFD62C82F2B9C800), reinterpret<f64>(0x3CFAB42428375680),\n  reinterpret<f64>(0x3FF6800000000000), 0, reinterpret<f64>(0xBFD5D1BDBF580800), reinterpret<f64>(0xBD1CA508D8E0F720),\n  reinterpret<f64>(0x3FF6600000000000), 0, reinterpret<f64>(0xBFD5767717455800), reinterpret<f64>(0xBD2362A4D5B6506D),\n  reinterpret<f64>(0x3FF6400000000000), 0, reinterpret<f64>(0xBFD51AAD872DF800), reinterpret<f64>(0xBCE684E49EB067D5),\n  reinterpret<f64>(0x3FF6200000000000), 0, reinterpret<f64>(0xBFD4BE5F95777800), reinterpret<f64>(0xBD041B6993293EE0),\n  reinterpret<f64>(0x3FF6000000000000), 0, reinterpret<f64>(0xBFD4618BC21C6000), reinterpret<f64>(0x3D13D82F484C84CC),\n  reinterpret<f64>(0x3FF5E00000000000), 0, reinterpret<f64>(0xBFD404308686A800), reinterpret<f64>(0x3CDC42F3ED820B3A),\n  reinterpret<f64>(0x3FF5C00000000000), 0, reinterpret<f64>(0xBFD3A64C55694800), reinterpret<f64>(0x3D20B1C686519460),\n  reinterpret<f64>(0x3FF5A00000000000), 0, reinterpret<f64>(0xBFD347DD9A988000), reinterpret<f64>(0x3D25594DD4C58092),\n  reinterpret<f64>(0x3FF5800000000000), 0, reinterpret<f64>(0xBFD2E8E2BAE12000), reinterpret<f64>(0x3D267B1E99B72BD8),\n  reinterpret<f64>(0x3FF5600000000000), 0, reinterpret<f64>(0xBFD2895A13DE8800), reinterpret<f64>(0x3D15CA14B6CFB03F),\n  reinterpret<f64>(0x3FF5600000000000), 0, reinterpret<f64>(0xBFD2895A13DE8800), reinterpret<f64>(0x3D15CA14B6CFB03F),\n  reinterpret<f64>(0x3FF5400000000000), 0, reinterpret<f64>(0xBFD22941FBCF7800), reinterpret<f64>(0xBD165A242853DA76),\n  reinterpret<f64>(0x3FF5200000000000), 0, reinterpret<f64>(0xBFD1C898C1699800), reinterpret<f64>(0xBD1FAFBC68E75404),\n  reinterpret<f64>(0x3FF5000000000000), 0, reinterpret<f64>(0xBFD1675CABABA800), reinterpret<f64>(0x3D1F1FC63382A8F0),\n  reinterpret<f64>(0x3FF4E00000000000), 0, reinterpret<f64>(0xBFD1058BF9AE4800), reinterpret<f64>(0xBD26A8C4FD055A66),\n  reinterpret<f64>(0x3FF4C00000000000), 0, reinterpret<f64>(0xBFD0A324E2739000), reinterpret<f64>(0xBD0C6BEE7EF4030E),\n  reinterpret<f64>(0x3FF4A00000000000), 0, reinterpret<f64>(0xBFD0402594B4D000), reinterpret<f64>(0xBCF036B89EF42D7F),\n  reinterpret<f64>(0x3FF4A00000000000), 0, reinterpret<f64>(0xBFD0402594B4D000), reinterpret<f64>(0xBCF036B89EF42D7F),\n  reinterpret<f64>(0x3FF4800000000000), 0, reinterpret<f64>(0xBFCFB9186D5E4000), reinterpret<f64>(0x3D0D572AAB993C87),\n  reinterpret<f64>(0x3FF4600000000000), 0, reinterpret<f64>(0xBFCEF0ADCBDC6000), reinterpret<f64>(0x3D2B26B79C86AF24),\n  reinterpret<f64>(0x3FF4400000000000), 0, reinterpret<f64>(0xBFCE27076E2AF000), reinterpret<f64>(0xBD172F4F543FFF10),\n  reinterpret<f64>(0x3FF4200000000000), 0, reinterpret<f64>(0xBFCD5C216B4FC000), reinterpret<f64>(0x3D21BA91BBCA681B),\n  reinterpret<f64>(0x3FF4000000000000), 0, reinterpret<f64>(0xBFCC8FF7C79AA000), reinterpret<f64>(0x3D27794F689F8434),\n  reinterpret<f64>(0x3FF4000000000000), 0, reinterpret<f64>(0xBFCC8FF7C79AA000), reinterpret<f64>(0x3D27794F689F8434),\n  reinterpret<f64>(0x3FF3E00000000000), 0, reinterpret<f64>(0xBFCBC286742D9000), reinterpret<f64>(0x3D194EB0318BB78F),\n  reinterpret<f64>(0x3FF3C00000000000), 0, reinterpret<f64>(0xBFCAF3C94E80C000), reinterpret<f64>(0x3CBA4E633FCD9066),\n  reinterpret<f64>(0x3FF3A00000000000), 0, reinterpret<f64>(0xBFCA23BC1FE2B000), reinterpret<f64>(0xBD258C64DC46C1EA),\n  reinterpret<f64>(0x3FF3A00000000000), 0, reinterpret<f64>(0xBFCA23BC1FE2B000), reinterpret<f64>(0xBD258C64DC46C1EA),\n  reinterpret<f64>(0x3FF3800000000000), 0, reinterpret<f64>(0xBFC9525A9CF45000), reinterpret<f64>(0xBD2AD1D904C1D4E3),\n  reinterpret<f64>(0x3FF3600000000000), 0, reinterpret<f64>(0xBFC87FA06520D000), reinterpret<f64>(0x3D2BBDBF7FDBFA09),\n  reinterpret<f64>(0x3FF3400000000000), 0, reinterpret<f64>(0xBFC7AB890210E000), reinterpret<f64>(0x3D2BDB9072534A58),\n  reinterpret<f64>(0x3FF3400000000000), 0, reinterpret<f64>(0xBFC7AB890210E000), reinterpret<f64>(0x3D2BDB9072534A58),\n  reinterpret<f64>(0x3FF3200000000000), 0, reinterpret<f64>(0xBFC6D60FE719D000), reinterpret<f64>(0xBD10E46AA3B2E266),\n  reinterpret<f64>(0x3FF3000000000000), 0, reinterpret<f64>(0xBFC5FF3070A79000), reinterpret<f64>(0xBD1E9E439F105039),\n  reinterpret<f64>(0x3FF3000000000000), 0, reinterpret<f64>(0xBFC5FF3070A79000), reinterpret<f64>(0xBD1E9E439F105039),\n  reinterpret<f64>(0x3FF2E00000000000), 0, reinterpret<f64>(0xBFC526E5E3A1B000), reinterpret<f64>(0xBD20DE8B90075B8F),\n  reinterpret<f64>(0x3FF2C00000000000), 0, reinterpret<f64>(0xBFC44D2B6CCB8000), reinterpret<f64>(0x3D170CC16135783C),\n  reinterpret<f64>(0x3FF2C00000000000), 0, reinterpret<f64>(0xBFC44D2B6CCB8000), reinterpret<f64>(0x3D170CC16135783C),\n  reinterpret<f64>(0x3FF2A00000000000), 0, reinterpret<f64>(0xBFC371FC201E9000), reinterpret<f64>(0x3CF178864D27543A),\n  reinterpret<f64>(0x3FF2800000000000), 0, reinterpret<f64>(0xBFC29552F81FF000), reinterpret<f64>(0xBD248D301771C408),\n  reinterpret<f64>(0x3FF2600000000000), 0, reinterpret<f64>(0xBFC1B72AD52F6000), reinterpret<f64>(0xBD2E80A41811A396),\n  reinterpret<f64>(0x3FF2600000000000), 0, reinterpret<f64>(0xBFC1B72AD52F6000), reinterpret<f64>(0xBD2E80A41811A396),\n  reinterpret<f64>(0x3FF2400000000000), 0, reinterpret<f64>(0xBFC0D77E7CD09000), reinterpret<f64>(0x3D0A699688E85BF4),\n  reinterpret<f64>(0x3FF2400000000000), 0, reinterpret<f64>(0xBFC0D77E7CD09000), reinterpret<f64>(0x3D0A699688E85BF4),\n  reinterpret<f64>(0x3FF2200000000000), 0, reinterpret<f64>(0xBFBFEC9131DBE000), reinterpret<f64>(0xBD2575545CA333F2),\n  reinterpret<f64>(0x3FF2000000000000), 0, reinterpret<f64>(0xBFBE27076E2B0000), reinterpret<f64>(0x3D2A342C2AF0003C),\n  reinterpret<f64>(0x3FF2000000000000), 0, reinterpret<f64>(0xBFBE27076E2B0000), reinterpret<f64>(0x3D2A342C2AF0003C),\n  reinterpret<f64>(0x3FF1E00000000000), 0, reinterpret<f64>(0xBFBC5E548F5BC000), reinterpret<f64>(0xBD1D0C57585FBE06),\n  reinterpret<f64>(0x3FF1C00000000000), 0, reinterpret<f64>(0xBFBA926D3A4AE000), reinterpret<f64>(0x3D253935E85BAAC8),\n  reinterpret<f64>(0x3FF1C00000000000), 0, reinterpret<f64>(0xBFBA926D3A4AE000), reinterpret<f64>(0x3D253935E85BAAC8),\n  reinterpret<f64>(0x3FF1A00000000000), 0, reinterpret<f64>(0xBFB8C345D631A000), reinterpret<f64>(0x3D137C294D2F5668),\n  reinterpret<f64>(0x3FF1A00000000000), 0, reinterpret<f64>(0xBFB8C345D631A000), reinterpret<f64>(0x3D137C294D2F5668),\n  reinterpret<f64>(0x3FF1800000000000), 0, reinterpret<f64>(0xBFB6F0D28AE56000), reinterpret<f64>(0xBD269737C93373DA),\n  reinterpret<f64>(0x3FF1600000000000), 0, reinterpret<f64>(0xBFB51B073F062000), reinterpret<f64>(0x3D1F025B61C65E57),\n  reinterpret<f64>(0x3FF1600000000000), 0, reinterpret<f64>(0xBFB51B073F062000), reinterpret<f64>(0x3D1F025B61C65E57),\n  reinterpret<f64>(0x3FF1400000000000), 0, reinterpret<f64>(0xBFB341D7961BE000), reinterpret<f64>(0x3D2C5EDACCF913DF),\n  reinterpret<f64>(0x3FF1400000000000), 0, reinterpret<f64>(0xBFB341D7961BE000), reinterpret<f64>(0x3D2C5EDACCF913DF),\n  reinterpret<f64>(0x3FF1200000000000), 0, reinterpret<f64>(0xBFB16536EEA38000), reinterpret<f64>(0x3D147C5E768FA309),\n  reinterpret<f64>(0x3FF1000000000000), 0, reinterpret<f64>(0xBFAF0A30C0118000), reinterpret<f64>(0x3D2D599E83368E91),\n  reinterpret<f64>(0x3FF1000000000000), 0, reinterpret<f64>(0xBFAF0A30C0118000), reinterpret<f64>(0x3D2D599E83368E91),\n  reinterpret<f64>(0x3FF0E00000000000), 0, reinterpret<f64>(0xBFAB42DD71198000), reinterpret<f64>(0x3D1C827AE5D6704C),\n  reinterpret<f64>(0x3FF0E00000000000), 0, reinterpret<f64>(0xBFAB42DD71198000), reinterpret<f64>(0x3D1C827AE5D6704C),\n  reinterpret<f64>(0x3FF0C00000000000), 0, reinterpret<f64>(0xBFA77458F632C000), reinterpret<f64>(0xBD2CFC4634F2A1EE),\n  reinterpret<f64>(0x3FF0C00000000000), 0, reinterpret<f64>(0xBFA77458F632C000), reinterpret<f64>(0xBD2CFC4634F2A1EE),\n  reinterpret<f64>(0x3FF0A00000000000), 0, reinterpret<f64>(0xBFA39E87B9FEC000), reinterpret<f64>(0x3CF502B7F526FEAA),\n  reinterpret<f64>(0x3FF0A00000000000), 0, reinterpret<f64>(0xBFA39E87B9FEC000), reinterpret<f64>(0x3CF502B7F526FEAA),\n  reinterpret<f64>(0x3FF0800000000000), 0, reinterpret<f64>(0xBF9F829B0E780000), reinterpret<f64>(0xBD2980267C7E09E4),\n  reinterpret<f64>(0x3FF0800000000000), 0, reinterpret<f64>(0xBF9F829B0E780000), reinterpret<f64>(0xBD2980267C7E09E4),\n  reinterpret<f64>(0x3FF0600000000000), 0, reinterpret<f64>(0xBF97B91B07D58000), reinterpret<f64>(0xBD288D5493FAA639),\n  reinterpret<f64>(0x3FF0400000000000), 0, reinterpret<f64>(0xBF8FC0A8B0FC0000), reinterpret<f64>(0xBCDF1E7CF6D3A69C),\n  reinterpret<f64>(0x3FF0400000000000), 0, reinterpret<f64>(0xBF8FC0A8B0FC0000), reinterpret<f64>(0xBCDF1E7CF6D3A69C),\n  reinterpret<f64>(0x3FF0200000000000), 0, reinterpret<f64>(0xBF7FE02A6B100000), reinterpret<f64>(0xBD19E23F0DDA40E4),\n  reinterpret<f64>(0x3FF0200000000000), 0, reinterpret<f64>(0xBF7FE02A6B100000), reinterpret<f64>(0xBD19E23F0DDA40E4),\n  reinterpret<f64>(0x3FF0000000000000), 0, 0, 0,\n  reinterpret<f64>(0x3FF0000000000000), 0, 0, 0,\n  reinterpret<f64>(0x3FEFC00000000000), 0, reinterpret<f64>(0x3F80101575890000), reinterpret<f64>(0xBD10C76B999D2BE8),\n  reinterpret<f64>(0x3FEF800000000000), 0, reinterpret<f64>(0x3F90205658938000), reinterpret<f64>(0xBD23DC5B06E2F7D2),\n  reinterpret<f64>(0x3FEF400000000000), 0, reinterpret<f64>(0x3F98492528C90000), reinterpret<f64>(0xBD2AA0BA325A0C34),\n  reinterpret<f64>(0x3FEF000000000000), 0, reinterpret<f64>(0x3FA0415D89E74000), reinterpret<f64>(0x3D0111C05CF1D753),\n  reinterpret<f64>(0x3FEEC00000000000), 0, reinterpret<f64>(0x3FA466AED42E0000), reinterpret<f64>(0xBD2C167375BDFD28),\n  reinterpret<f64>(0x3FEE800000000000), 0, reinterpret<f64>(0x3FA894AA149FC000), reinterpret<f64>(0xBD197995D05A267D),\n  reinterpret<f64>(0x3FEE400000000000), 0, reinterpret<f64>(0x3FACCB73CDDDC000), reinterpret<f64>(0xBD1A68F247D82807),\n  reinterpret<f64>(0x3FEE200000000000), 0, reinterpret<f64>(0x3FAEEA31C006C000), reinterpret<f64>(0xBD0E113E4FC93B7B),\n  reinterpret<f64>(0x3FEDE00000000000), 0, reinterpret<f64>(0x3FB1973BD1466000), reinterpret<f64>(0xBD25325D560D9E9B),\n  reinterpret<f64>(0x3FEDA00000000000), 0, reinterpret<f64>(0x3FB3BDF5A7D1E000), reinterpret<f64>(0x3D2CC85EA5DB4ED7),\n  reinterpret<f64>(0x3FED600000000000), 0, reinterpret<f64>(0x3FB5E95A4D97A000), reinterpret<f64>(0xBD2C69063C5D1D1E),\n  reinterpret<f64>(0x3FED400000000000), 0, reinterpret<f64>(0x3FB700D30AEAC000), reinterpret<f64>(0x3CEC1E8DA99DED32),\n  reinterpret<f64>(0x3FED000000000000), 0, reinterpret<f64>(0x3FB9335E5D594000), reinterpret<f64>(0x3D23115C3ABD47DA),\n  reinterpret<f64>(0x3FECC00000000000), 0, reinterpret<f64>(0x3FBB6AC88DAD6000), reinterpret<f64>(0xBD1390802BF768E5),\n  reinterpret<f64>(0x3FECA00000000000), 0, reinterpret<f64>(0x3FBC885801BC4000), reinterpret<f64>(0x3D2646D1C65AACD3),\n  reinterpret<f64>(0x3FEC600000000000), 0, reinterpret<f64>(0x3FBEC739830A2000), reinterpret<f64>(0xBD2DC068AFE645E0),\n  reinterpret<f64>(0x3FEC400000000000), 0, reinterpret<f64>(0x3FBFE89139DBE000), reinterpret<f64>(0xBD2534D64FA10AFD),\n  reinterpret<f64>(0x3FEC000000000000), 0, reinterpret<f64>(0x3FC1178E8227E000), reinterpret<f64>(0x3D21EF78CE2D07F2),\n  reinterpret<f64>(0x3FEBE00000000000), 0, reinterpret<f64>(0x3FC1AA2B7E23F000), reinterpret<f64>(0x3D2CA78E44389934),\n  reinterpret<f64>(0x3FEBA00000000000), 0, reinterpret<f64>(0x3FC2D1610C868000), reinterpret<f64>(0x3D039D6CCB81B4A1),\n  reinterpret<f64>(0x3FEB800000000000), 0, reinterpret<f64>(0x3FC365FCB0159000), reinterpret<f64>(0x3CC62FA8234B7289),\n  reinterpret<f64>(0x3FEB400000000000), 0, reinterpret<f64>(0x3FC4913D8333B000), reinterpret<f64>(0x3D25837954FDB678),\n  reinterpret<f64>(0x3FEB200000000000), 0, reinterpret<f64>(0x3FC527E5E4A1B000), reinterpret<f64>(0x3D2633E8E5697DC7),\n  reinterpret<f64>(0x3FEAE00000000000), 0, reinterpret<f64>(0x3FC6574EBE8C1000), reinterpret<f64>(0x3D19CF8B2C3C2E78),\n  reinterpret<f64>(0x3FEAC00000000000), 0, reinterpret<f64>(0x3FC6F0128B757000), reinterpret<f64>(0xBD25118DE59C21E1),\n  reinterpret<f64>(0x3FEAA00000000000), 0, reinterpret<f64>(0x3FC7898D85445000), reinterpret<f64>(0xBD1C661070914305),\n  reinterpret<f64>(0x3FEA600000000000), 0, reinterpret<f64>(0x3FC8BEAFEB390000), reinterpret<f64>(0xBD073D54AAE92CD1),\n  reinterpret<f64>(0x3FEA400000000000), 0, reinterpret<f64>(0x3FC95A5ADCF70000), reinterpret<f64>(0x3D07F22858A0FF6F),\n  reinterpret<f64>(0x3FEA000000000000), 0, reinterpret<f64>(0x3FCA93ED3C8AE000), reinterpret<f64>(0xBD28724350562169),\n  reinterpret<f64>(0x3FE9E00000000000), 0, reinterpret<f64>(0x3FCB31D8575BD000), reinterpret<f64>(0xBD0C358D4EACE1AA),\n  reinterpret<f64>(0x3FE9C00000000000), 0, reinterpret<f64>(0x3FCBD087383BE000), reinterpret<f64>(0xBD2D4BC4595412B6),\n  reinterpret<f64>(0x3FE9A00000000000), 0, reinterpret<f64>(0x3FCC6FFBC6F01000), reinterpret<f64>(0xBCF1EC72C5962BD2),\n  reinterpret<f64>(0x3FE9600000000000), 0, reinterpret<f64>(0x3FCDB13DB0D49000), reinterpret<f64>(0xBD2AFF2AF715B035),\n  reinterpret<f64>(0x3FE9400000000000), 0, reinterpret<f64>(0x3FCE530EFFE71000), reinterpret<f64>(0x3CC212276041F430),\n  reinterpret<f64>(0x3FE9200000000000), 0, reinterpret<f64>(0x3FCEF5ADE4DD0000), reinterpret<f64>(0xBCCA211565BB8E11),\n  reinterpret<f64>(0x3FE9000000000000), 0, reinterpret<f64>(0x3FCF991C6CB3B000), reinterpret<f64>(0x3D1BCBECCA0CDF30),\n  reinterpret<f64>(0x3FE8C00000000000), 0, reinterpret<f64>(0x3FD07138604D5800), reinterpret<f64>(0x3CF89CDB16ED4E91),\n  reinterpret<f64>(0x3FE8A00000000000), 0, reinterpret<f64>(0x3FD0C42D67616000), reinterpret<f64>(0x3D27188B163CEAE9),\n  reinterpret<f64>(0x3FE8800000000000), 0, reinterpret<f64>(0x3FD1178E8227E800), reinterpret<f64>(0xBD2C210E63A5F01C),\n  reinterpret<f64>(0x3FE8600000000000), 0, reinterpret<f64>(0x3FD16B5CCBACF800), reinterpret<f64>(0x3D2B9ACDF7A51681),\n  reinterpret<f64>(0x3FE8400000000000), 0, reinterpret<f64>(0x3FD1BF99635A6800), reinterpret<f64>(0x3D2CA6ED5147BDB7),\n  reinterpret<f64>(0x3FE8200000000000), 0, reinterpret<f64>(0x3FD214456D0EB800), reinterpret<f64>(0x3D0A87DEBA46BAEA),\n  reinterpret<f64>(0x3FE7E00000000000), 0, reinterpret<f64>(0x3FD2BEF07CDC9000), reinterpret<f64>(0x3D2A9CFA4A5004F4),\n  reinterpret<f64>(0x3FE7C00000000000), 0, reinterpret<f64>(0x3FD314F1E1D36000), reinterpret<f64>(0xBD28E27AD3213CB8),\n  reinterpret<f64>(0x3FE7A00000000000), 0, reinterpret<f64>(0x3FD36B6776BE1000), reinterpret<f64>(0x3D116ECDB0F177C8),\n  reinterpret<f64>(0x3FE7800000000000), 0, reinterpret<f64>(0x3FD3C25277333000), reinterpret<f64>(0x3D183B54B606BD5C),\n  reinterpret<f64>(0x3FE7600000000000), 0, reinterpret<f64>(0x3FD419B423D5E800), reinterpret<f64>(0x3D08E436EC90E09D),\n  reinterpret<f64>(0x3FE7400000000000), 0, reinterpret<f64>(0x3FD4718DC271C800), reinterpret<f64>(0xBD2F27CE0967D675),\n  reinterpret<f64>(0x3FE7200000000000), 0, reinterpret<f64>(0x3FD4C9E09E173000), reinterpret<f64>(0xBD2E20891B0AD8A4),\n  reinterpret<f64>(0x3FE7000000000000), 0, reinterpret<f64>(0x3FD522AE0738A000), reinterpret<f64>(0x3D2EBE708164C759),\n  reinterpret<f64>(0x3FE6E00000000000), 0, reinterpret<f64>(0x3FD57BF753C8D000), reinterpret<f64>(0x3D1FADEDEE5D40EF),\n  reinterpret<f64>(0x3FE6C00000000000), 0, reinterpret<f64>(0x3FD5D5BDDF596000), reinterpret<f64>(0xBD0A0B2A08A465DC)\n]);\n\n// Returns 0 if not int, 1 if odd int, 2 if even int. The argument is\n// the bit representation of a non-zero finite floating-point value.\n// @ts-ignore: decorator\n@inline\nfunction checkint(iy: u64): i32 {\n  var e = iy >> 52 & 0x7FF;\n  if (e < 0x3FF     ) return 0;\n  if (e > 0x3FF + 52) return 2;\n  e = u64(1) << (0x3FF + 52 - e);\n  if (iy & (e - 1)) return 0;\n  if (iy &  e     ) return 1;\n  return 2;\n}\n\n// @ts-ignore: decorator\n@inline\nfunction xflow(sign: u32, y: f64): f64 {\n  return select(-y, y, sign) * y;\n}\n\n// @ts-ignore: decorator\n@inline\nfunction uflow(sign: u32): f64 {\n  return xflow(sign, reinterpret<f64>(0x1000000000000000)); // 0x1p-767\n}\n\n// @ts-ignore: decorator\n@inline\nfunction oflow(sign: u32): f64 {\n  return xflow(sign, reinterpret<f64>(0x7000000000000000)); // 0x1p769\n}\n\n// Returns 1 if input is the bit representation of 0, infinity or nan.\n// @ts-ignore: decorator\n@inline\nfunction zeroinfnan(u: u64): bool {\n  return (u << 1) - 1 >= 0xFFE0000000000000 - 1;\n}\n\n// @ts-ignore: decorator\n@lazy var log_tail: f64 = 0;\n\n// Compute y+TAIL = log(x) where the rounded result is y and TAIL has about\n// additional 15 bits precision. IX is the bit representation of x, but\n// normalized in the subnormal range using the sign bit for the exponent.\n// @ts-ignore: decorator\n@inline\nfunction log_inline(ix: u64): f64 {\n  const N = 1 << POW_LOG_TABLE_BITS;\n  const N_MASK = N - 1;\n\n  const\n    Ln2hi = reinterpret<f64>(0x3FE62E42FEFA3800),\n    Ln2lo = reinterpret<f64>(0x3D2EF35793C76730);\n\n  const\n    A0 = reinterpret<f64>(0xBFE0000000000000),\n    A1 = reinterpret<f64>(0xBFE5555555555560),\n    A2 = reinterpret<f64>(0x3FE0000000000006),\n    A3 = reinterpret<f64>(0x3FE999999959554E),\n    A4 = reinterpret<f64>(0xBFE555555529A47A),\n    A5 = reinterpret<f64>(0xBFF2495B9B4845E9),\n    A6 = reinterpret<f64>(0x3FF0002B8B263FC3);\n\n  // x = 2^k z; where z is in range [OFF,2*OFF) and exact.\n  // The range is split into N subintervals.\n  // The ith subinterval contains z and c is near its center.\n  var tmp = ix - 0x3fE6955500000000;\n  var i   = <usize>((tmp >> (52 - POW_LOG_TABLE_BITS)) & N_MASK);\n  var k   = <i64>tmp >> 52;\n  var iz  = ix - (tmp & u64(0xFFF) << 52);\n  var z   = reinterpret<f64>(iz);\n  var kd  = <f64>k;\n\n  // log(x) = k*Ln2 + log(c) + log1p(z/c-1).\n  var invc     = load<f64>(POW_LOG_DATA_TAB + (i << (2 + alignof<f64>())), 0 << alignof<f64>()); // tab[i].invc\n  var logc     = load<f64>(POW_LOG_DATA_TAB + (i << (2 + alignof<f64>())), 2 << alignof<f64>()); // tab[i].logc\n  var logctail = load<f64>(POW_LOG_DATA_TAB + (i << (2 + alignof<f64>())), 3 << alignof<f64>()); // tab[i].logctail\n\n  // Note: 1/c is j/N or j/N/2 where j is an integer in [N,2N) and\n  // |z/c - 1| < 1/N, so r = z/c - 1 is exactly representible.\n  // Split z such that rhi, rlo and rhi*rhi are exact and |rlo| <= |r|.\n  var zhi = reinterpret<f64>((iz + u64(0x80000000)) & 0xFFFFFFFF00000000);\n  var zlo = z - zhi;\n  var rhi = zhi * invc - 1.0;\n  var rlo = zlo * invc;\n  var r   = rhi + rlo;\n\n  // k * Ln2 + log(c) + r.\n  var t1  = kd * Ln2hi + logc;\n  var t2  = t1 + r;\n  var lo1 = kd * Ln2lo + logctail;\n  var lo2 = t1 - t2 + r;\n\n  // Evaluation is optimized assuming superscalar pipelined execution.\n  var ar  = A0 * r; // A[0] = -0.5\n  var ar2 = r * ar;\n  var ar3 = r * ar2;\n  // k * Ln2 + log(c) + r + A[0] * r * r.\n  var arhi  = A0  * rhi;\n  var arhi2 = rhi * arhi;\n  var hi    = t2  + arhi2;\n  var lo3   = rlo * (ar + arhi);\n  var lo4   = t2 - hi + arhi2;\n\n  // p = log1p(r) - r - A[0] * r * r.\n  var p  = ar3 * (A1 + r * A2 + ar2 * (A3 + r * A4 + ar2 * (A5 + r * A6)));\n  var lo = lo1 + lo2 + lo3 + lo4 + p;\n  var y  = hi + lo;\n  log_tail = hi - y + lo;\n\n  return y;\n}\n\n// @ts-ignore: decorator\n@inline const SIGN_BIAS = 0x800 << EXP_TABLE_BITS;\n\n// Computes sign*exp(x+xtail) where |xtail| < 2^-8/N and |xtail| <= |x|.\n// The sign_bias argument is SIGN_BIAS or 0 and sets the sign to -1 or 1.\n// @ts-ignore: decorator\n@inline\nfunction exp_inline(x: f64, xtail: f64, sign_bias: u32): f64 {\n  const N      = 1 << EXP_TABLE_BITS;\n  const N_MASK = N - 1;\n\n  const\n    InvLn2N   = reinterpret<f64>(0x3FF71547652B82FE) * N, // 0x1.71547652b82fep0\n    NegLn2hiN = reinterpret<f64>(0xBF762E42FEFA0000),     // -0x1.62e42fefa0000p-8\n    NegLn2loN = reinterpret<f64>(0xBD0CF79ABC9E3B3A),     // -0x1.cf79abc9e3b3ap-47\n    shift     = reinterpret<f64>(0x4338000000000000);     // 0x1.8p52\n\n  const\n    C2 = reinterpret<f64>(0x3FDFFFFFFFFFFDBD), // __exp_data.poly[0] (0x1.ffffffffffdbdp-2)\n    C3 = reinterpret<f64>(0x3FC555555555543C), // __exp_data.poly[1] (0x1.555555555543cp-3)\n    C4 = reinterpret<f64>(0x3FA55555CF172B91), // __exp_data.poly[2] (0x1.55555cf172b91p-5)\n    C5 = reinterpret<f64>(0x3F81111167A4D017); // __exp_data.poly[3] (0x1.1111167a4d017p-7)\n\n  var abstop: u32;\n  var ki: u64, top: u64, sbits: u64;\n  var idx: usize;\n  // double_t for better performance on targets with FLT_EVAL_METHOD==2.\n  var kd: f64, z: f64, r: f64, r2: f64, scale: f64, tail: f64, tmp: f64;\n\n  var ux = reinterpret<u64>(x);\n  abstop = <u32>(ux >> 52) & 0x7FF;\n  if (abstop - 0x3C9 >= 0x03F) {\n    if (abstop - 0x3C9 >= 0x80000000) {\n      // Avoid spurious underflow for tiny x.\n      // Note: 0 is common input.\n      return select(-1.0, 1.0, sign_bias);\n    }\n    if (abstop >= 0x409) { // top12(1024.0)\n      // Note: inf and nan are already handled.\n      return ux >> 63 ? uflow(sign_bias) : oflow(sign_bias);\n    }\n    // Large x is special cased below.\n    abstop = 0;\n  }\n\n  // exp(x) = 2^(k/N) * exp(r), with exp(r) in [2^(-1/2N),2^(1/2N)].\n  // x = ln2/N*k + r, with int k and r in [-ln2/2N, ln2/2N].\n  z = InvLn2N * x;\n\n  // #if TOINT_INTRINSICS\n  //   kd = roundtoint(z);\n  //   ki = converttoint(z);\n  // #elif EXP_USE_TOINT_NARROW\n  //   // z - kd is in [-0.5-2^-16, 0.5] in all rounding modes.\n  //   kd = eval_as_double(z + shift);\n  //   ki = asuint64(kd) >> 16;\n  //   kd = (double_t)(int32_t)ki;\n  // #else\n  // z - kd is in [-1, 1] in non-nearest rounding modes\n  kd  = z + shift;\n  ki  = reinterpret<u64>(kd);\n  kd -= shift;\n  // #endif\n  r = x + kd * NegLn2hiN + kd * NegLn2loN;\n  // The code assumes 2^-200 < |xtail| < 2^-8/N\n  r += xtail;\n  // 2^(k/N) ~= scale * (1 + tail)\n  idx = <usize>((ki & N_MASK) << 1);\n  top = (ki + sign_bias) << (52 - EXP_TABLE_BITS);\n\n  tail = reinterpret<f64>(load<u64>(EXP_DATA_TAB + (idx << alignof<u64>())));\n  // This is only a valid scale when -1023*N < k < 1024*N\n  sbits = load<u64>(EXP_DATA_TAB + (idx << alignof<u64>()), 1 << alignof<u64>()) + top;\n  // exp(x) = 2^(k/N) * exp(r) ~= scale + scale * (tail + exp(r) - 1).\n  // Evaluation is optimized assuming superscalar pipelined execution.\n  r2 = r * r;\n  // Without fma the worst case error is 0.25/N ulp larger.\n  // Worst case error is less than 0.5+1.11/N+(abs poly error * 2^53) ulp\n  tmp = tail + r + r2 * (C2 + r * C3) + r2 * r2 * (C4 + r * C5);\n  if (abstop == 0) return specialcase(tmp, sbits, ki);\n  scale = reinterpret<f64>(sbits);\n  // Note: tmp == 0 or |tmp| > 2^-200 and scale > 2^-739, so there\n  // is no spurious underflow here even without fma.\n  return scale + scale * tmp;\n}\n\n// @ts-ignore: decorator\n@inline\nexport function pow_lut(x: f64, y: f64): f64 {\n  const Ox1p52 = reinterpret<f64>(0x4330000000000000); // 0x1p52\n\n  var sign_bias: u32 = 0;\n  var ix = reinterpret<u64>(x);\n  var iy = reinterpret<u64>(y);\n  var topx = ix >> 52;\n  var topy = iy >> 52;\n\n  if (topx - 0x001 >= 0x7FF - 0x001 || (topy & 0x7FF) - 0x3BE >= 0x43e - 0x3BE) {\n    // Note: if |y| > 1075 * ln2 * 2^53 ~= 0x1.749p62 then pow(x,y) = inf/0\n    // and if |y| < 2^-54 / 1075 ~= 0x1.e7b6p-65 then pow(x,y) = +-1.\n    // Special cases: (x < 0x1p-126 or inf or nan) or\n    // (|y| < 0x1p-65 or |y| >= 0x1p63 or nan).\n    if (zeroinfnan(iy)) {\n      if ((iy << 1) == 0) return 1.0;\n      if (ix == 0x3FF0000000000000) return NaN; // original: 1.0\n      if ((ix << 1) > 0xFFE0000000000000 || (iy << 1) > 0xFFE0000000000000) return x + y;\n      if ((ix << 1) == 0x7FE0000000000000) return NaN; // original: 1.0\n      if (((ix << 1) < 0x7FE0000000000000) == !(iy >> 63)) return 0; // |x|<1 && y==inf or |x|>1 && y==-inf.\n      return y * y;\n    }\n    if (zeroinfnan(ix)) {\n      let x2 = x * x;\n      if (i32(ix >> 63) && checkint(iy) == 1) x2 = -x2;\n      return iy >> 63 ? 1 / x2 : x2;\n    }\n    // Here x and y are non-zero finite\n    if (ix >> 63) {\n      // Finite x < 0\n      let yint = checkint(iy);\n      if (yint == 0) return (x - x) / (x - x);\n      if (yint == 1) sign_bias = SIGN_BIAS;\n      ix   &= 0x7FFFFFFFFFFFFFFF;\n      topx &= 0x7FF;\n    }\n    if ((topy & 0x7FF) - 0x3BE >= 0x43E - 0x3BE) {\n      // Note: sign_bias == 0 here because y is not odd.\n      if (ix == 0x3FF0000000000000) return 1;\n      if ((topy & 0x7FF) < 0x3BE)   return 1; // |y| < 2^-65, x^y ~= 1 + y*log(x).\n      return (ix > 0x3FF0000000000000) == (topy < 0x800) ? Infinity : 0;\n    }\n    if (topx == 0) {\n      // Normalize subnormal x so exponent becomes negative.\n      ix = reinterpret<u64>(x * Ox1p52);\n      ix &= 0x7FFFFFFFFFFFFFFF;\n      ix -= u64(52) << 52;\n    }\n  }\n\n  var hi = log_inline(ix);\n  var lo = log_tail;\n  var ehi: f64, elo: f64;\n  // #if __FP_FAST_FMA\n  //   ehi = y * hi;\n  //   elo = y * lo + __builtin_fma(y, hi, -ehi);\n  // #else\n  var yhi = reinterpret<f64>(iy & 0xFFFFFFFFF8000000);\n  var ylo = y - yhi;\n  var lhi = reinterpret<f64>(reinterpret<u64>(hi) & 0xFFFFFFFFF8000000);\n  var llo = hi - lhi + lo;\n  ehi = yhi * lhi;\n  elo = ylo * lhi + y * llo; // |elo| < |ehi| * 2^-25.\n  // #endif\n  return exp_inline(ehi, elo, sign_bias);\n}\n","import { itoa32, utoa32, itoa64, utoa64, dtoa, itoa_buffered, dtoa_buffered, MAX_DOUBLE_LENGTH } from \"./number\";\nimport { ipow32 } from \"../math\";\n\n// All tables are stored as two staged lookup tables (static tries)\n// because the full range of Unicode symbols can't be efficiently\n// represented as-is in memory (see Unicode spec ch 5, p.196):\n// https://www.unicode.org/versions/Unicode12.0.0/ch05.pdf\n// Tables have been generated using these forked musl tools:\n// https://github.com/MaxGraey/musl-chartable-tools/tree/case-ignorable\n\n// Lookup table to check if a character is alphanumeric or not\n// See: https://git.musl-libc.org/cgit/musl/tree/src/ctype/alpha.h\n// size: 3904 bytes\n// @ts-ignore\n@inline @lazy const ALPHA_TABLE = memory.data<u8>([\n  18,17,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,17,34,35,36,17,37,38,39,40,\n  41,42,43,44,17,45,46,47,16,16,48,16,16,16,16,16,16,16,49,50,51,16,52,53,16,16,\n  17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,54,\n  17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,\n  17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,\n  17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,\n  17,17,17,55,17,17,17,17,56,17,57,58,59,60,61,62,17,17,17,17,17,17,17,17,17,17,\n  17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,\n  17,17,17,17,17,17,17,63,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,\n  16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,17,64,65,17,66,67,\n  68,69,70,71,72,73,74,17,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,\n  93,94,16,95,96,97,98,17,17,17,99,100,101,16,16,16,16,16,16,16,16,16,16,17,17,\n  17,17,102,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,17,17,103,16,16,16,16,\n  16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,\n  16,16,16,17,17,104,105,16,16,106,107,17,17,17,17,17,17,17,17,17,17,17,17,17,\n  17,17,17,17,17,17,17,17,17,17,108,17,17,17,17,109,110,16,16,16,16,16,16,16,16,\n  16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,\n  17,111,112,16,16,16,16,16,16,16,16,16,113,16,16,16,16,16,16,16,16,16,16,16,16,\n  16,16,16,16,16,16,16,16,16,16,16,114,115,116,117,16,16,16,16,16,16,16,16,118,\n  119,120,16,16,16,16,16,121,122,16,16,16,16,123,16,16,124,16,16,16,16,16,16,16,\n  16,16,125,16,16,16,\n  16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,\n  255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,\n  255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,254,255,255,7,254,\n  255,255,7,0,0,0,0,0,4,32,4,255,255,127,255,255,255,127,255,255,255,255,255,\n  255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,\n  255,195,255,3,0,31,80,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,223,188,64,215,255,255,\n  251,255,255,255,255,255,255,255,255,255,191,255,255,255,255,255,255,255,255,\n  255,255,255,255,255,255,255,255,255,3,252,255,255,255,255,255,255,255,255,255,\n  255,255,255,255,255,255,255,255,255,255,255,254,255,255,255,127,2,255,255,255,\n  255,255,1,0,0,0,0,255,191,182,0,255,255,255,135,7,0,0,0,255,7,255,255,255,255,\n  255,255,255,254,255,195,255,255,255,255,255,255,255,255,255,255,255,255,239,\n  31,254,225,255,\n  159,0,0,255,255,255,255,255,255,0,224,255,255,255,255,255,255,255,255,255,255,\n  255,255,3,0,255,255,255,255,255,7,48,4,255,255,255,252,255,31,0,0,255,255,255,\n  1,255,7,0,0,0,0,0,0,255,255,223,255,255,0,240,255,248,3,255,255,255,255,255,\n  255,255,255,255,239,255,223,225,255,207,255,254,255,239,159,249,255,255,253,\n  197,227,159,89,128,176,207,255,3,16,238,135,249,255,255,253,109,195,135,25,2,\n  94,192,255,63,0,238,191,251,255,255,253,237,227,191,27,1,0,207,255,0,30,238,\n  159,249,255,255,253,237,227,159,25,192,176,207,255,2,0,236,199,61,214,24,199,\n  255,195,199,29,129,0,192,255,0,0,239,223,253,255,255,253,255,227,223,29,96,7,\n  207,255,0,0,239,223,253,255,255,253,239,227,223,29,96,64,207,255,6,0,255,223,\n  253,255,255,255,255,231,223,93,240,128,207,255,0,252,238,255,127,252,255,255,\n  251,47,127,128,95,255,192,255,12,0,254,255,255,255,255,127,255,7,63,32,255,3,\n  0,0,0,0,214,247,255,255,175,255,255,59,95,32,255,243,0,0,0,\n  0,1,0,0,0,255,3,0,0,255,254,255,255,255,31,254,255,3,255,255,254,255,255,255,\n  31,0,0,0,0,0,0,0,0,255,255,255,255,255,255,127,249,255,3,255,255,255,255,255,\n  255,255,255,255,63,255,255,255,255,191,32,255,255,255,255,255,247,255,255,255,\n  255,255,255,255,255,255,61,127,61,255,255,255,255,255,61,255,255,255,255,61,\n  127,61,255,127,255,255,255,255,255,255,255,61,255,255,255,255,255,255,255,255,\n  7,0,0,0,0,255,255,0,0,255,255,255,255,255,255,255,255,255,255,63,63,254,255,\n  255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,\n  255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,\n  255,255,255,255,255,159,255,255,254,255,255,7,255,255,255,255,255,255,255,255,\n  255,199,255,1,255,223,15,0,255,255,15,0,255,255,15,0,255,223,13,0,255,255,255,\n  255,255,255,207,255,255,1,128,16,255,3,0,0,0,0,255,3,255,255,255,255,255,255,\n  255,255,255,255,255,1,255,255,255,255,255,7,255,255,255,255,255,255,255,255,\n  63,\n  0,255,255,255,127,255,15,255,1,192,255,255,255,255,63,31,0,255,255,255,255,\n  255,15,255,255,255,3,255,3,0,0,0,0,255,255,255,15,255,255,255,255,255,255,255,\n  127,254,255,31,0,255,3,255,3,128,0,0,128,1,0,0,0,0,0,0,0,255,255,255,255,255,\n  255,239,255,239,15,255,3,0,0,0,0,255,255,255,255,255,243,255,255,255,255,255,\n  255,191,255,3,0,255,255,255,255,255,255,127,0,255,227,255,255,255,255,255,63,\n  255,1,255,255,255,255,255,231,0,0,0,0,0,222,111,4,255,255,255,255,255,255,255,\n  255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,\n  128,255,31,0,255,255,63,63,255,255,255,255,63,63,255,170,255,255,255,63,255,\n  255,255,255,255,255,223,95,220,31,207,15,255,31,220,31,0,0,0,0,0,0,0,0,0,0,0,\n  0,0,0,2,128,0,0,255,31,0,0,0,0,0,0,0,0,0,0,0,0,132,252,47,62,80,189,255,243,\n  224,67,0,0,255,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,\n  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,255,255,255,255,255,255,3,0,\n  0,255,255,255,255,255,127,255,255,255,255,255,127,255,255,255,255,255,255,255,\n  255,255,255,255,255,255,255,255,255,31,120,12,0,255,255,255,255,191,32,255,\n  255,255,255,255,255,255,128,0,0,255,255,127,0,127,127,127,127,127,127,127,127,\n  255,255,255,255,0,0,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n  0,0,224,0,0,0,254,3,62,31,254,255,255,255,255,255,255,255,255,255,127,224,254,\n  255,255,255,255,255,255,255,255,255,255,247,224,255,255,255,255,255,254,255,\n  255,255,255,255,255,255,255,255,255,127,0,0,255,255,255,255,0,0,0,0,0,0,255,\n  255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,\n  255,255,255,255,255,255,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,\n  255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,\n  255,255,255,\n  31,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,31,0,0,\n  0,0,0,0,0,0,255,255,255,255,255,63,255,31,255,255,255,15,0,0,255,255,255,255,\n  255,127,240,143,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,\n  0,128,255,252,255,255,255,255,255,255,255,255,255,255,255,255,249,255,255,255,\n  255,255,255,252,7,0,0,0,0,224,255,191,255,255,255,255,0,0,0,255,255,255,255,\n  255,255,15,0,255,255,255,255,255,255,255,255,47,0,255,3,0,0,252,232,255,255,\n  255,255,255,7,255,255,255,255,7,0,255,255,255,31,255,255,255,255,255,255,247,\n  255,0,128,255,3,255,255,255,127,255,255,255,255,255,255,127,0,255,63,255,3,\n  255,255,127,252,255,255,255,255,255,255,255,127,5,0,0,56,255,255,60,0,126,126,\n  126,0,127,127,255,255,255,255,255,247,255,3,255,255,255,255,255,255,255,255,\n  255,255,255,255,255,255,255,7,255,3,255,255,255,255,255,255,255,255,255,255,\n  255,255,255,255,255,255,255,255,255,255,15,0,255,255,127,248,255,255,255,255,\n  255,\n  15,255,255,255,255,255,255,255,255,255,255,255,255,255,63,255,255,255,255,255,\n  255,255,255,255,255,255,255,255,3,0,0,0,0,127,0,248,224,255,253,127,95,219,\n  255,255,255,255,255,255,255,255,255,255,255,255,255,3,0,0,0,248,255,255,255,\n  255,255,255,255,255,255,255,255,255,63,0,0,255,255,255,255,255,255,255,255,\n  252,255,255,255,255,255,255,0,0,0,0,0,255,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,223,\n  255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,31,0,0,255,3,\n  254,255,255,7,254,255,255,7,192,255,255,255,255,255,255,255,255,255,255,127,\n  252,252,252,28,0,0,0,0,255,239,255,255,127,255,255,183,255,63,255,63,0,0,0,0,\n  255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,7,0,0,0,0,0,0,0,0,\n  255,255,255,255,255,255,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n  0,0,0,0,0,0,0,0,255,255,255,31,255,255,255,255,255,255,1,0,0,0,0,\n  0,255,255,255,255,0,224,255,255,255,7,255,255,255,255,255,7,255,255,255,63,\n  255,255,255,255,15,255,62,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,\n  255,255,255,255,255,255,255,255,255,63,255,3,255,255,255,255,15,255,255,255,\n  255,15,255,255,255,255,255,0,255,255,255,255,255,255,15,0,0,0,0,0,0,0,0,0,0,0,\n  0,0,0,0,0,0,0,0,255,255,255,255,255,255,127,0,255,255,63,0,255,0,0,0,0,0,0,0,\n  0,0,0,0,0,0,0,0,0,0,0,0,63,253,255,255,255,255,191,145,255,255,63,0,255,255,\n  127,0,255,255,255,127,0,0,0,0,0,0,0,0,255,255,55,0,255,255,63,0,255,255,255,3,\n  0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,192,0,0,0,0,0,0,0,0,111,240,239,\n  254,255,255,63,0,0,0,0,0,255,255,255,31,255,255,255,31,0,0,0,0,255,254,255,\n  255,31,0,0,0,255,255,255,255,255,255,63,0,255,255,63,0,255,255,7,0,255,255,3,\n  0,0,0,0,0,0,0,0,0,0,0,0,\n  0,255,255,255,255,255,255,255,255,255,1,0,0,0,0,0,0,255,255,255,255,255,255,7,\n  0,255,255,255,255,255,255,7,0,255,255,255,255,255,0,255,3,0,0,0,0,0,0,0,0,0,0,\n  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,\n  255,27,3,0,0,0,0,0,0,0,0,0,255,255,255,31,128,0,255,255,63,0,0,0,0,0,0,0,0,0,\n  0,0,0,0,255,255,31,0,0,0,255,255,127,0,255,255,255,255,255,255,255,255,63,0,0,\n  0,192,255,0,0,252,255,255,255,255,255,255,1,0,0,255,255,255,1,255,3,255,255,\n  255,255,255,255,199,255,240,0,255,255,255,255,71,0,255,255,255,255,255,255,\n  255,255,30,192,255,23,0,0,0,0,255,255,251,255,255,255,159,64,0,0,0,0,0,0,0,0,\n  127,189,255,191,255,1,255,255,255,255,255,255,255,1,255,3,239,159,249,255,255,\n  253,237,227,159,25,129,224,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n  0,255,255,255,255,255,255,255,255,187,7,255,131,3,0,0,0,255,255,255,255,255,\n  255,255,255,179,0,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,\n  255,255,255,63,127,0,0,0,63,0,0,0,0,255,255,255,255,255,255,255,127,17,0,255,\n  3,0,0,0,0,255,255,255,255,255,255,63,1,255,3,0,0,0,0,0,0,255,255,255,231,255,\n  7,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,\n  255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,3,0,128,\n  127,242,111,255,255,255,191,153,7,0,255,3,0,0,0,0,0,0,0,0,255,252,255,255,255,\n  255,255,252,26,0,0,0,255,255,255,255,255,255,231,127,0,0,255,255,255,255,255,\n  255,255,255,255,32,0,0,0,0,255,255,255,255,255,255,255,1,255,253,255,255,255,\n  255,127,127,1,0,255,3,0,0,252,255,255,255,252,255,255,254,127,0,0,0,0,0,0,0,0,\n  0,127,251,255,255,255,255,127,180,203,0,255,3,191,253,255,255,255,127,123,1,\n  255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n  0,0,255,255,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,\n  0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,\n  255,3,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,\n  255,127,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,\n  255,255,255,255,255,255,255,255,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n  0,0,255,255,255,255,255,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n  0,255,255,255,255,255,255,255,255,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n  0,0,\n  0,255,255,255,255,255,255,255,1,255,255,255,127,255,3,0,0,0,0,0,0,0,0,0,0,0,0,\n  255,255,255,63,0,0,255,255,255,255,255,255,0,0,15,0,255,3,248,255,255,224,255,\n  255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,\n  255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,135,\n  255,255,255,255,255,255,255,128,255,255,0,0,0,0,0,0,0,0,11,0,3,0,255,255,255,\n  255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,\n  255,255,255,255,255,255,255,255,255,0,255,255,255,255,255,255,255,255,255,255,\n  255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,63,0,0,0,0,0,\n  255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,\n  127,0,0,0,0,0,0,7,0,240,0,255,255,255,255,255,255,255,255,255,255,255,255,255,\n  255,255,255,255,\n  255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,\n  255,255,255,255,255,255,255,255,255,255,255,255,255,15,255,255,255,255,255,\n  255,255,255,255,255,255,255,255,7,255,31,255,1,255,67,0,0,0,0,0,0,0,0,0,0,0,0,\n  255,255,255,255,255,255,255,255,255,255,223,255,255,255,255,255,255,255,255,\n  223,100,222,255,235,239,255,255,255,255,255,255,255,191,231,223,223,255,255,\n  255,123,95,252,253,255,255,255,255,255,255,255,255,255,255,255,255,255,255,\n  255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,\n  255,255,255,255,255,255,255,255,63,255,255,255,253,255,255,247,255,255,255,\n  247,255,255,223,255,255,255,223,255,255,127,255,255,255,127,255,255,255,253,\n  255,255,255,253,255,255,247,207,255,255,255,255,255,255,127,255,255,249,219,7,\n  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,31,\n  128,63,255,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,15,255,\n  3,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,\n  255,255,255,255,255,31,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,143,8,\n  255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,239,255,255,255,150,254,247,10,\n  132,234,150,170,150,247,247,94,255,251,255,15,238,251,255,15,0,0,0,0,0,0,0,0,\n  0,0,0,0,0,0,255,255,255,3,255,255,255,3,255,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,\n  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,3\n]);\n\n// size: 1568 bytes (compressed to ~1380 bytes after binaryen)\n// @ts-ignore: decorator\n@lazy @inline const CASED = memory.data<u8>([\n  18,19,20,21,22,23,16,16,16,16,16,16,16,16,16,16,\n  24,16,16,25,16,16,16,16,16,16,16,16,26,27,17,28,\n  29,30,16,16,31,16,16,16,16,16,16,16,32,33,16,16,\n  16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,\n  16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,\n  16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,\n  16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,\n  16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,\n  16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,\n  16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,\n  16,16,16,16,16,16,34,35,16,16,16,36,16,16,16,16,\n  16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,\n  16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,\n  16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,\n  16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,\n  16,16,16,16,16,16,16,16,16,16,16,37,16,16,16,38,\n  16,16,16,16,39,16,16,16,16,16,16,16,40,16,16,16,\n  16,16,16,16,16,16,16,16,41,16,16,16,16,16,16,16,\n  16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,\n  16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,\n  16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,\n  16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,\n  16,16,16,16,16,16,16,16,16,16,16,16,16,16,42,16,\n  16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,\n  16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,\n  16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,\n  16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,\n  16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,\n  16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,\n  16,16,16,16,43,44,45,46,16,16,16,16,16,16,16,16,\n  16,16,16,16,16,16,16,16,16,47,16,16,16,16,16,16,\n  16,48,16,16,16,16,16,16,16,16,16,16,16,16,16,16,\n  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n  255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,\n  255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,\n  0,0,0,0,0,0,0,0,254,255,255,7,254,255,255,7,0,0,0,0,0,4,32,4,\n  255,255,127,255,255,255,127,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,\n  255,255,255,255,255,255,255,247,240,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,\n  255,255,255,255,255,255,255,255,255,255,239,255,255,255,255,1,3,0,0,0,31,0,0,0,\n  0,0,0,0,0,0,0,0,32,0,0,0,0,0,207,188,64,215,255,255,251,255,255,255,\n  255,255,255,255,255,255,191,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,\n  3,252,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,255,\n  255,255,127,0,255,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,\n  191,32,255,255,255,255,255,231,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n  0,0,0,0,255,255,255,255,255,255,255,255,255,255,63,63,0,0,0,0,0,0,0,0,\n  0,0,0,0,0,0,0,0,255,1,255,255,255,255,255,231,0,0,0,0,0,0,0,0,\n  255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,\n  0,0,0,0,0,0,0,0,255,255,63,63,255,255,255,255,63,63,255,170,255,255,255,63,\n  255,255,255,255,255,255,223,95,220,31,207,15,255,31,220,31,0,0,0,0,0,0,0,0,\n  0,0,0,0,0,0,2,128,0,0,255,31,0,0,0,0,0,0,0,0,0,0,0,0,\n  132,252,47,62,80,189,31,242,224,67,0,0,255,255,255,255,24,0,0,0,0,0,0,0,\n  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n  0,0,0,0,0,0,192,255,255,255,255,255,255,3,0,0,255,255,255,255,255,127,255,255,\n  255,255,255,127,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,31,120,12,0,\n  255,255,255,255,191,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,63,0,0,\n  255,255,255,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,\n  255,255,255,255,255,255,255,255,255,120,255,255,255,255,255,255,252,7,0,0,0,0,96,7,\n  0,0,0,0,0,0,255,255,255,255,255,247,255,1,255,255,255,255,255,255,255,255,255,255,\n  0,0,0,0,0,0,0,0,127,0,248,0,0,0,0,0,0,0,0,0,0,0,0,0,\n  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,7,\n  254,255,255,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n  255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,255,255,\n  255,255,15,255,255,255,255,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n  255,255,255,255,255,255,7,0,255,255,255,255,255,255,7,0,0,0,0,0,0,0,0,0,\n  0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,0,0,0,0,\n  0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,\n  0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,223,255,255,255,255,255,\n  255,255,255,223,100,222,255,235,239,255,255,255,255,255,255,255,191,231,223,223,255,255,255,123,\n  95,252,253,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,\n  255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,63,255,255,255,\n  253,255,255,247,255,255,255,247,255,255,223,255,255,255,223,255,255,127,255,255,255,127,255,255,\n  255,253,255,255,255,253,255,255,247,15,0,0,0,0,0,0,255,255,255,255,255,255,255,255,\n  15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n  0,0,0,0,0,0,255,255,255,3,255,255,255,3,255,255,255,3,0,0,0,0,0,0,\n  0,0,0,0,0,0,0,0\n]);\n\n// size: 2976 bytes (compressed to ~2050 bytes after binaryen)\n// @ts-ignore: decorator\n@lazy @inline const CASE_IGNORABLES = memory.data<u8>([\n  18,16,19,20,21,22,23,24,25,26,27,28,29,30,31,32,\n  33,16,16,34,16,16,16,35,36,37,38,39,40,41,16,42,\n  43,16,16,16,16,16,16,16,16,16,16,16,44,45,46,16,\n  47,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,\n  16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,\n  16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,\n  16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,\n  16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,\n  16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,\n  16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,\n  48,16,16,16,49,16,50,51,52,53,54,55,16,16,16,16,\n  16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,\n  16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,\n  16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,\n  16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,\n  16,16,16,16,16,16,16,16,16,16,16,56,16,16,57,58,\n  16,59,60,61,16,16,16,16,16,16,62,16,16,63,64,65,\n  66,67,68,69,70,71,72,73,74,75,76,16,77,78,79,16,\n  16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,\n  16,16,16,16,80,16,16,16,16,16,16,16,16,16,16,16,\n  16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,\n  16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,\n  16,16,16,16,16,16,16,16,16,16,81,82,16,16,16,83,\n  16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,\n  16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,\n  16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,\n  16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,\n  16,16,16,16,16,16,16,16,16,16,16,16,84,16,16,16,\n  16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,\n  16,85,86,16,16,16,16,16,16,16,87,16,16,16,16,16,\n  88,89,90,16,16,16,16,16,91,92,16,16,16,16,16,16,\n  16,16,16,93,16,16,16,16,16,16,16,16,16,16,16,16,\n  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n  255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,\n  255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,\n  0,0,0,0,128,64,0,4,0,0,0,64,1,0,0,0,0,0,0,0,0,161,144,1,\n  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n  0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,\n  255,255,255,255,255,255,48,4,176,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,3,0,0,0,0,0,0,\n  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,130,0,0,0,0,\n  0,0,254,255,255,255,255,191,182,0,0,0,0,0,16,0,63,0,255,23,0,0,0,0,\n  1,248,255,255,0,0,1,0,0,0,0,0,0,0,0,0,0,0,192,191,255,61,0,0,\n  0,128,2,0,0,0,255,255,255,7,0,0,0,0,0,0,0,0,0,0,192,255,1,0,\n  0,0,0,0,0,248,63,36,0,0,192,255,255,63,0,0,0,0,0,14,0,0,0,0,\n  0,0,0,0,0,0,0,0,0,0,248,255,255,255,255,255,7,0,0,0,0,0,0,20,\n  254,33,254,0,12,0,2,0,2,0,0,0,0,0,0,16,30,32,0,0,12,0,0,64,\n  6,0,0,0,0,0,0,16,134,57,2,0,0,0,35,0,6,0,0,0,0,0,0,16,\n  190,33,0,0,12,0,0,252,2,0,0,0,0,0,0,144,30,32,96,0,12,0,0,0,\n  4,0,0,0,0,0,0,0,1,32,0,0,0,0,0,0,17,0,0,0,0,0,0,192,\n  193,61,96,0,12,0,0,0,2,0,0,0,0,0,0,144,64,48,0,0,12,0,0,0,\n  3,0,0,0,0,0,0,24,30,32,0,0,12,0,0,0,2,0,0,0,0,0,0,0,\n  0,4,92,0,0,0,0,0,0,0,0,0,0,0,242,7,192,127,0,0,0,0,0,0,\n  0,0,0,0,0,0,242,31,64,63,0,0,0,0,0,0,0,0,0,3,0,0,160,2,\n  0,0,0,0,0,0,254,127,223,224,255,254,255,255,255,31,64,0,0,0,0,0,0,0,\n  0,0,0,0,0,224,253,102,0,0,0,195,1,0,30,0,100,32,0,32,0,0,0,0,\n  0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,224,0,0,0,0,\n  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,28,0,\n  0,0,12,0,0,0,12,0,0,0,0,0,0,0,176,63,64,254,143,32,0,0,0,0,\n  0,120,0,0,0,0,0,0,8,0,0,0,0,0,0,0,96,0,0,0,0,2,0,0,\n  0,0,0,0,0,0,0,0,0,0,0,0,135,1,4,14,0,0,0,0,0,0,0,0,\n  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,9,0,0,0,0,\n  0,0,64,127,229,31,248,159,0,0,0,0,128,0,255,255,1,0,0,0,0,0,0,0,\n  15,0,0,0,0,0,208,23,4,0,0,0,0,248,15,0,3,0,0,0,60,59,0,0,\n  0,0,0,0,64,163,3,0,0,0,0,0,0,240,207,0,0,0,0,0,0,0,0,63,\n  0,0,0,0,0,0,0,0,0,0,247,255,253,33,16,3,0,0,0,0,0,240,255,255,\n  255,255,255,255,255,7,0,1,0,0,0,248,255,255,255,255,255,255,255,255,255,255,255,251,\n  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,\n  3,224,0,224,0,224,0,96,0,248,0,3,144,124,0,0,0,0,0,0,223,255,2,128,\n  0,0,255,31,0,0,0,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,\n  0,0,0,0,0,0,0,48,0,0,0,0,0,0,0,0,0,0,0,0,0,128,3,0,\n  0,0,0,0,0,0,0,0,0,0,0,0,0,128,0,128,0,0,0,0,0,0,0,0,\n  0,0,0,0,255,255,255,255,0,0,0,0,0,128,0,0,0,0,0,0,0,0,0,0,\n  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,60,62,8,\n  0,0,0,0,0,0,0,0,0,0,0,126,0,0,0,0,0,0,0,0,0,0,0,112,\n  0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,63,0,16,0,0,0,0,0,0,\n  0,0,0,0,0,128,247,191,0,0,0,240,0,0,0,0,0,0,0,0,0,0,3,0,\n  255,255,255,255,3,0,0,0,0,0,0,0,0,0,1,0,0,7,0,0,0,0,0,0,\n  0,0,0,0,0,0,0,3,68,8,0,0,96,16,0,0,0,0,0,0,0,0,0,0,\n  0,0,0,0,0,0,0,0,48,0,0,0,255,255,3,128,0,0,0,0,192,63,0,0,\n  128,255,3,0,0,0,0,0,7,0,0,0,0,0,200,51,0,128,0,0,96,0,0,0,\n  0,0,0,0,0,126,102,0,8,16,0,0,0,0,1,16,0,0,0,0,0,0,157,193,\n  2,0,0,32,0,48,88,0,0,0,0,0,0,0,0,0,0,0,0,248,0,14,0,0,\n  0,0,0,0,0,0,0,0,0,0,0,0,32,33,0,0,0,0,0,64,0,0,0,0,\n  0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,255,3,0,0,0,0,0,0,0,\n  255,255,8,0,255,255,0,0,0,0,36,0,0,0,0,0,0,0,0,0,0,0,0,0,\n  0,0,0,0,0,0,0,128,128,64,0,4,0,0,0,64,1,0,0,0,0,0,1,0,\n  0,0,0,192,0,0,0,0,0,0,0,0,8,0,0,14,0,0,0,0,0,0,0,0,\n  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,\n  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n  0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,7,\n  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,110,240,0,0,0,0,0,135,\n  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,0,0,0,\n  0,0,0,0,240,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n  0,0,0,0,0,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n  192,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n  2,0,0,0,0,0,0,255,127,0,0,0,0,0,0,128,3,0,0,0,0,0,120,38,\n  0,32,0,0,0,0,0,0,7,0,0,0,128,239,31,0,0,0,0,0,0,0,8,0,\n  3,0,0,0,0,0,192,127,0,158,0,0,0,0,0,0,0,0,0,0,0,128,211,64,\n  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,248,7,0,0,\n  3,0,0,0,0,0,0,24,1,0,0,0,192,31,31,0,0,0,0,0,0,0,0,0,\n  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,92,0,0,64,0,0,0,0,\n  0,0,0,0,0,0,248,133,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n  0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,176,1,0,0,48,0,0,0,0,\n  0,0,0,0,0,0,248,167,1,0,0,0,0,0,0,0,0,0,0,0,0,40,191,0,\n  0,0,0,0,0,0,0,0,0,0,0,224,188,15,0,0,0,0,0,0,0,0,0,0,\n  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,255,6,\n  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n  0,0,0,0,0,0,0,88,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n  0,0,240,12,1,0,0,0,254,7,0,0,0,0,248,121,128,0,126,14,0,0,0,0,\n  0,252,127,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,127,191,\n  0,0,0,0,0,0,0,0,0,0,252,255,255,252,109,0,0,0,0,0,0,0,0,0,\n  0,0,0,0,0,0,126,180,191,0,0,0,0,0,0,0,0,0,163,0,0,0,0,0,\n  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n  0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,255,1,\n  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n  0,0,0,0,0,0,31,0,0,0,0,0,0,0,127,0,15,0,0,0,0,0,0,0,\n  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n  0,128,0,0,0,0,0,0,0,128,255,255,0,0,0,0,0,0,0,0,27,0,0,0,\n  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,15,0,0,0,\n  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,3,248,255,\n  231,15,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n  28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n  255,255,255,255,255,255,127,248,255,255,255,255,255,31,32,0,16,0,0,248,254,255,0,0,\n  0,0,0,0,0,0,0,0,127,255,255,249,219,7,0,0,0,0,0,0,0,0,0,0,\n  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,63,\n  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n  0,0,0,0,0,240,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n  0,0,0,0,0,0,0,0,0,0,127,0,0,0,0,0,0,0,0,0,0,0,0,0,\n  240,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n  0,0,0,0,0,0,0,248\n]);\n\n// @ts-ignore: decorator\n@lazy @inline const LOWER127 = memory.data<u8>([\n  0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,\n  16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,\n  32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,\n  48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,\n  64,\n  97,98,99,100,101,102,103,104,105,106,107,108,109,\n  110,111,112,113,114,115,116,117,118,119,120,121,122,\n  91,92,93,94,95,96,\n  97,98,99,100,101,102,103,104,105,106,107,108,109,\n  110,111,112,113,114,115,116,117,118,119,120,121,122,\n  123,124,125,126,127\n]);\n\n// @ts-ignore: decorator\n@lazy @inline const UPPER127 = memory.data<u8>([\n  0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,\n  16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,\n  32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,\n  48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,\n  64,\n  65,66,67,68,69,70,71,72,73,74,75,76,77,\n  78,79,80,81,82,83,84,85,86,87,88,89,90,\n  91,92,93,94,95,96,\n  65,66,67,68,69,70,71,72,73,74,75,76,77,\n  78,79,80,81,82,83,84,85,86,87,88,89,90,\n  123,124,125,126,127\n]);\n\n// 23 * 8 = 184 bytes\n// @ts-ignore: decorator\n@lazy @inline const POWERS10 = memory.data<f64>([\n  1e00, 1e01, 1e02, 1e03, 1e04, 1e05, 1e06, 1e07, 1e08, 1e09,\n  1e10, 1e11, 1e12, 1e13, 1e14, 1e15, 1e16, 1e17, 1e18, 1e19,\n  1e20, 1e21, 1e22\n]);\n\n// @ts-ignore: decorator\n@inline\nexport const enum CharCode {\n  PERCENT = 0x25,\n  PLUS = 0x2B,\n  MINUS = 0x2D,\n  DOT = 0x2E,\n  _0 = 0x30,\n  _1 = 0x31,\n  _2 = 0x32,\n  _3 = 0x33,\n  _4 = 0x34,\n  _5 = 0x35,\n  _6 = 0x36,\n  _7 = 0x37,\n  _8 = 0x38,\n  _9 = 0x39,\n  A = 0x41,\n  B = 0x42,\n  E = 0x45,\n  I = 0x49,\n  N = 0x4E,\n  O = 0x4F,\n  X = 0x58,\n  Z = 0x5A,\n  a = 0x61,\n  b = 0x62,\n  e = 0x65,\n  n = 0x6E,\n  o = 0x6F,\n  u = 0x75,\n  x = 0x78,\n  z = 0x7A\n}\n\n// @ts-ignore: decorator\n@inline\nexport function isAscii(c: u32): bool {\n  return !(c >> 7);\n}\n\n// @ts-ignore: decorator\n@inline\nexport function isLower8(c: u32): bool {\n  return c - CharCode.a < 26;\n}\n\n// @ts-ignore: decorator\n@inline\nexport function isUpper8(c: u32): bool {\n  return c - CharCode.A < 26;\n}\n\nexport function isSpace(c: u32): bool {\n  if (c < 0x1680) { // < <LS> (1)\n    // <SP>, <TAB>, <LF>, <VT>, <FF>, <CR> and <NBSP>\n    // (c == 0x20 || c == 0xA0) was optimized to (c | 0x80) == 0xA0\n    // @ts-ignore: cast\n    return ((c | 0x80) == 0xA0) | (c - 0x09 <= 0x0D - 0x09);\n  }\n  if (c - 0x2000 <= 0x200A - 0x2000) return true;\n  switch (c) {\n    case 0x1680: // <LS> (1)\n    case 0x2028: // <LS> (2)\n    case 0x2029: // <PS>\n    case 0x202F: // <NNS>\n    case 0x205F: // <MMSP>\n    case 0x3000: // <IS>\n    case 0xFEFF: return true; // <ZWNBSP>\n  }\n  return false;\n}\n\nexport function isAlpha(c: u32): bool {\n  if (isAscii(c)) return (c | 32) - CharCode.a < 26;\n  if (c < 0x20000) {\n    // @ts-ignore: cast\n    return stagedBinaryLookup(ALPHA_TABLE, c);\n  }\n  return c < 0x2FFFE;\n}\n\n// @ts-ignore: decorator\n@inline\nexport function isCased(c: u32): bool {\n  // @ts-ignore: cast\n  return c < 0x1F18A && stagedBinaryLookup(CASED, c);\n}\n\n// @ts-ignore: decorator\n@inline\nexport function isCaseIgnorable(c: u32): bool {\n  // @ts-ignore: cast\n  return c < 0xE01F0 && stagedBinaryLookup(CASE_IGNORABLES, c);\n}\n\n// @ts-ignore: decorator\n@inline\nexport function isFinalSigma(buffer: usize, index: isize, len: isize): bool {\n  const lookaheadLimit = 30; // max lookahead limit\n  var found = false;\n  var pos = index;\n  var minPos = max(0, pos - lookaheadLimit);\n  while (pos > minPos) {\n    let c = codePointBefore(buffer, pos);\n    if (!isCaseIgnorable(c)) {\n      if (isCased(c)) {\n        found = true;\n      } else {\n        return false;\n      }\n    }\n    pos -= isize(c >= 0x10000) + 1;\n  }\n  if (!found) return false;\n  pos = index + 1;\n  var maxPos = min(pos + lookaheadLimit, len);\n  while (pos < maxPos) {\n    let c = <u32>load<u16>(buffer + (pos << 1));\n    if (u32((c & 0xFC00) == 0xD800) & u32(pos + 1 != len)) {\n      let c1 = <u32>load<u16>(buffer + (pos << 1), 2);\n      if ((c1 & 0xFC00) == 0xDC00) {\n        c = (c - 0xD800 << 10) + (c1 - 0xDC00) + 0x10000;\n      }\n    }\n    if (!isCaseIgnorable(c)) {\n      return !isCased(c);\n    }\n    pos += isize(c >= 0x10000) + 1;\n  }\n  return true;\n}\n\n// @ts-ignore: decorator\n@inline\nfunction codePointBefore(buffer: usize, index: isize): i32 {\n  if (index <= 0) return -1;\n  var c = <u32>load<u16>(buffer + (index - 1 << 1));\n  if (u32((c & 0xFC00) == 0xDC00) & u32(index - 2 >= 0)) {\n    let c1 = <u32>load<u16>(buffer + (index - 2 << 1));\n    if ((c1 & 0xFC00) == 0xD800) {\n      return ((c1 & 0x3FF) << 10) + (c & 0x3FF) + 0x10000;\n    }\n  }\n  return (c & 0xF800) == 0xD800 ? 0xFFFD : c;\n}\n\n// Search routine for two-staged lookup tables\nfunction stagedBinaryLookup(table: usize, c: u32): bool {\n  return <bool>((load<u8>(table + (<u32>load<u8>(table + (c >>> 8)) << 5) + ((c & 255) >> 3)) >>> (c & 7)) & 1);\n}\n\nexport function compareImpl(str1: string, index1: usize, str2: string, index2: usize, len: usize): i32 {\n  var ptr1 = changetype<usize>(str1) + (index1 << 1);\n  var ptr2 = changetype<usize>(str2) + (index2 << 1);\n  if (ASC_SHRINK_LEVEL < 2) {\n    if (len >= 4 && !((ptr1 & 7) | (ptr2 & 7))) {\n      do {\n        if (load<u64>(ptr1) != load<u64>(ptr2)) break;\n        ptr1 += 8;\n        ptr2 += 8;\n        len  -= 4;\n      } while (len >= 4);\n    }\n  }\n  while (len--) {\n    let a = <i32>load<u16>(ptr1);\n    let b = <i32>load<u16>(ptr2);\n    if (a != b) return a - b;\n    ptr1 += 2;\n    ptr2 += 2;\n  }\n  return 0;\n}\n\n// @ts-ignore: decorator\n@inline\nexport function toLower8(c: u32): u32 {\n  if (ASC_SHRINK_LEVEL > 0) {\n    return c | u32(isUpper8(c)) << 5;\n  } else {\n    return <u32>load<u8>(LOWER127 + c);\n  }\n}\n\n// @ts-ignore: decorator\n@inline\nexport function toUpper8(c: u32): u32 {\n  if (ASC_SHRINK_LEVEL > 0) {\n    return c & ~(u32(isLower8(c)) << 5);\n  } else {\n    return <u32>load<u8>(UPPER127 + c);\n  }\n}\n\n/** Parses a string to an integer (usually), using the specified radix. */\nexport function strtol<T>(str: string, radix: i32 = 0): T {\n  var len = str.length;\n  if (!len) {\n    if (isFloat<T>()) {\n      // @ts-ignore: cast\n      return <T>NaN;\n    } else {\n      // @ts-ignore: cast\n      return <T>0;\n    }\n  }\n\n  var ptr = changetype<usize>(str) /* + HEAD -> offset */;\n  var code = <u32>load<u16>(ptr);\n\n  // trim white spaces\n  while (isSpace(code)) {\n    code = <u32>load<u16>(ptr += 2);\n    --len;\n  }\n  // determine sign\n  // @ts-ignore\n  var sign: T = 1;\n  if (code == CharCode.MINUS || code == CharCode.PLUS) {\n    if (!--len) {\n      if (isFloat<T>()) {\n        // @ts-ignore: cast\n        return <T>NaN;\n      } else {\n        // @ts-ignore: cast\n        return <T>0;\n      }\n    }\n    if (code == CharCode.MINUS) {\n      // @ts-ignore: type\n      sign = -1;\n    }\n    code = <u32>load<u16>(ptr += 2);\n  }\n\n  // See https://tc39.es/ecma262/#sec-parseint-string-radix\n  if (radix) {\n    if (radix < 2 || radix > 36) {\n      if (isFloat<T>()) {\n        // @ts-ignore: cast\n        return <T>NaN;\n      } else {\n        // @ts-ignore: cast\n        return <T>0;\n      }\n    }\n    // handle case as parseInt(\"0xFF\", 16) by spec\n    if (radix == 16) {\n      if (\n        len > 2 &&\n        code == CharCode._0 &&\n        (<u32>load<u16>(ptr, 2) | 32) == CharCode.x\n      ) {\n        ptr += 4; len -= 2;\n      }\n    }\n  } else {\n    // determine radix by literal prefix\n    if (code == CharCode._0 && len > 2) {\n      switch (<u32>load<u16>(ptr, 2) | 32) {\n        case CharCode.b: {\n          ptr += 4; len -= 2;\n          radix = 2;\n          break;\n        }\n        case CharCode.o: {\n          ptr += 4; len -= 2;\n          radix = 8;\n          break;\n        }\n        case CharCode.x: {\n          ptr += 4; len -= 2;\n          radix = 16;\n          break;\n        }\n      }\n    }\n    if (!radix) radix = 10;\n  }\n\n  // calculate value\n  // @ts-ignore: type\n  var num: T = 0;\n  while (len--) {\n    code = <u32>load<u16>(ptr);\n    if (code - CharCode._0 < 10) {\n      code -= CharCode._0;\n    } else if (code - CharCode.A <= <u32>(CharCode.Z - CharCode.A)) {\n      code -= CharCode.A - 10;\n    } else if (code - CharCode.a <= <u32>(CharCode.z - CharCode.a)) {\n      code -= CharCode.a - 10;\n    }\n    if (code >= <u32>radix) {\n      if (!num) {\n        if (isFloat<T>()) {\n          // @ts-ignore: cast\n          return <T>NaN;\n        } else {\n          // @ts-ignore: cast\n          return <T>0;\n        }\n      }\n      break;\n    }\n    // @ts-ignore: type\n    num = num * radix + code;\n    ptr += 2;\n  }\n  // @ts-ignore: type\n  return sign * num;\n}\n\nexport function strtod(str: string): f64 {\n  var len = str.length;\n  if (!len) return NaN;\n\n  var ptr  = changetype<usize>(str);\n  var code = <u32>load<u16>(ptr);\n\n  var sign = 1.0;\n  // skip white spaces\n  while (len && isSpace(code)) {\n    code = <u32>load<u16>(ptr += 2);\n    --len;\n  }\n  if (!len) return NaN;\n\n  // try parse '-' or '+'\n  if (code == CharCode.MINUS) {\n    if (!--len) return NaN;\n    code = <u32>load<u16>(ptr += 2);\n    sign = -1;\n  } else if (code == CharCode.PLUS) {\n    if (!--len) return NaN;\n    code = <u32>load<u16>(ptr += 2);\n  }\n\n  // try parse Infinity\n  if (len >= 8 && code == CharCode.I) {\n    if (\n      load<u64>(ptr, 0) == 0x690066006E0049 && // ifnI\n      load<u64>(ptr, 8) == 0x7900740069006E    // ytin\n    ) {\n      return Infinity * sign;\n    }\n    return NaN;\n  }\n  // validate next symbol\n  if (code != CharCode.DOT && <u32>(code - CharCode._0) >= 10) {\n    return NaN;\n  }\n  var savedPtr = ptr;\n  // skip zeros\n  while (code == CharCode._0) {\n    code = <u32>load<u16>(ptr += 2);\n    --len;\n  }\n  if (len <= 0) return 0;\n  const capacity = 19; // int(64 * 0.3010)\n  var pointed = false;\n  var consumed = 0;\n  var position = 0;\n  var x: u64 = 0;\n  if (code == CharCode.DOT) {\n    let noDigits = !(savedPtr - ptr);\n    ptr += 2; --len;\n    if (!len && noDigits) return NaN;\n    for (pointed = true; (code = <u32>load<u16>(ptr)) == CharCode._0; --position, ptr += 2) --len;\n    if (len <= 0) return 0;\n    if (!position && noDigits && code - CharCode._0 >= 10) return NaN;\n  }\n  for (let digit = code - CharCode._0; digit < 10 || (code == CharCode.DOT && !pointed); digit = code - CharCode._0) {\n    if (digit < 10) {\n      x = consumed < capacity ? 10 * x + digit : x | u64(!!digit);\n      ++consumed;\n    } else {\n      position = consumed;\n      pointed = true;\n    }\n    if (!--len) break;\n    code = <u32>load<u16>(ptr += 2);\n  }\n\n  if (!pointed) position = consumed;\n  return copysign<f64>(scientific(x, position - min(capacity, consumed) + parseExp(ptr, len)), sign);\n}\n\nexport function joinBooleanArray(dataStart: usize, length: i32, separator: string): string {\n  var lastIndex = length - 1;\n  if (lastIndex < 0) return \"\";\n  if (!lastIndex) return select(\"true\", \"false\", load<bool>(dataStart));\n\n  var sepLen = separator.length;\n  var valueLen = 5; // max possible length of element len(\"false\")\n  var estLen = (valueLen + sepLen) * lastIndex + valueLen;\n  var result = changetype<string>(__new(estLen << 1, idof<string>()));\n  var offset = 0;\n  var value: bool;\n  for (let i = 0; i < lastIndex; ++i) {\n    value = load<bool>(dataStart + i);\n    valueLen = 4 + i32(!value);\n    memory.copy(\n      changetype<usize>(result) + (<usize>offset << 1),\n      changetype<usize>(select(\"true\", \"false\", value)),\n      <usize>valueLen << 1\n    );\n    offset += valueLen;\n    if (sepLen) {\n      memory.copy(\n        changetype<usize>(result) + (<usize>offset << 1),\n        changetype<usize>(separator),\n        <usize>sepLen << 1\n      );\n      offset += sepLen;\n    }\n  }\n  value = load<bool>(dataStart + <usize>lastIndex);\n  valueLen = 4 + i32(!value);\n  memory.copy(\n    changetype<usize>(result) + (<usize>offset << 1),\n    changetype<usize>(select(\"true\", \"false\", value)),\n    valueLen << 1\n  );\n  offset += valueLen;\n\n  if (estLen > offset) return result.substring(0, offset);\n  return result;\n}\n\nexport function joinIntegerArray<T>(dataStart: usize, length: i32, separator: string): string {\n  var lastIndex = length - 1;\n  if (lastIndex < 0) return \"\";\n  if (!lastIndex) {\n    let value = load<T>(dataStart);\n    if (isSigned<T>()) {\n      if (sizeof<T>() <= 4) {\n        // @ts-ignore: type\n        return changetype<string>(itoa32(<i32>value, 10));\n      } else {\n        // @ts-ignore: type\n        return changetype<string>(itoa64(<i32>value, 10));\n      }\n    } else {\n      if (sizeof<T>() <= 4) {\n        // @ts-ignore: type\n        return changetype<string>(utoa32(<u32>value, 10));\n      } else {\n        // @ts-ignore: type\n        return changetype<string>(utoa64(<u64>value, 10));\n      }\n    }\n  }\n\n  var sepLen = separator.length;\n  const valueLen = (sizeof<T>() <= 4 ? 10 : 20) + i32(isSigned<T>());\n  var estLen = (valueLen + sepLen) * lastIndex + valueLen;\n  var result = changetype<string>(__new(estLen << 1, idof<string>()));\n  var offset = 0;\n  var value: T;\n  for (let i = 0; i < lastIndex; ++i) {\n    value = load<T>(dataStart + (<usize>i << alignof<T>()));\n    // @ts-ignore: type\n    offset += itoa_buffered<T>(changetype<usize>(result) + (<usize>offset << 1), value);\n    if (sepLen) {\n      memory.copy(\n        changetype<usize>(result) + (<usize>offset << 1),\n        changetype<usize>(separator),\n        <usize>sepLen << 1\n      );\n      offset += sepLen;\n    }\n  }\n  value = load<T>(dataStart + (<usize>lastIndex << alignof<T>()));\n  // @ts-ignore: type\n  offset += itoa_buffered<T>(changetype<usize>(result) + (<usize>offset << 1), value);\n  if (estLen > offset) return result.substring(0, offset);\n  return result;\n}\n\nexport function joinFloatArray<T>(dataStart: usize, length: i32, separator: string): string {\n  var lastIndex = length - 1;\n  if (lastIndex < 0) return \"\";\n  if (!lastIndex) {\n    return changetype<string>(dtoa(\n      // @ts-ignore: type\n      load<T>(dataStart))\n    );\n  }\n\n  const valueLen = MAX_DOUBLE_LENGTH;\n  var sepLen = separator.length;\n  var estLen = (valueLen + sepLen) * lastIndex + valueLen;\n  var result = changetype<string>(__new(estLen << 1, idof<string>()));\n  var offset = 0;\n  var value: T;\n  for (let i = 0; i < lastIndex; ++i) {\n    value = load<T>(dataStart + (<usize>i << alignof<T>()));\n    // @ts-ignore: type\n    offset += dtoa_buffered(changetype<usize>(result) + (<usize>offset << 1), value);\n    if (sepLen) {\n      memory.copy(\n        changetype<usize>(result) + (<usize>offset << 1),\n        changetype<usize>(separator),\n        <usize>sepLen << 1\n      );\n      offset += sepLen;\n    }\n  }\n  value = load<T>(dataStart + (<usize>lastIndex << alignof<T>()));\n  // @ts-ignore: type\n  offset += dtoa_buffered(changetype<usize>(result) + (<usize>offset << 1), value);\n  if (estLen > offset) return result.substring(0, offset);\n  return result;\n}\n\nexport function joinStringArray(dataStart: usize, length: i32, separator: string): string {\n  var lastIndex = length - 1;\n  if (lastIndex < 0) return \"\";\n  if (!lastIndex) {\n    // @ts-ignore: type\n    return load<string>(dataStart) || \"\";\n  }\n  var estLen = 0;\n  var value: string;\n  for (let i = 0; i < length; ++i) {\n    value = load<string>(dataStart + (<usize>i << alignof<string>()));\n    // @ts-ignore: type\n    if (value !== null) estLen += value.length;\n  }\n  var offset = 0;\n  var sepLen = separator.length;\n  var result = changetype<string>(__new((estLen + sepLen * lastIndex) << 1, idof<string>()));\n  for (let i = 0; i < lastIndex; ++i) {\n    value = load<string>(dataStart + (<usize>i << alignof<string>()));\n    if (value !== null) {\n      let valueLen = value.length;\n      memory.copy(\n        changetype<usize>(result) + (<usize>offset << 1),\n        changetype<usize>(value),\n        <usize>valueLen << 1\n      );\n      offset += valueLen;\n    }\n    if (sepLen) {\n      memory.copy(\n        changetype<usize>(result) + (<usize>offset << 1),\n        changetype<usize>(separator),\n        <usize>sepLen << 1\n      );\n      offset += sepLen;\n    }\n  }\n  value = load<string>(dataStart + (<usize>lastIndex << alignof<string>()));\n  if (value !== null) {\n    memory.copy(\n      changetype<usize>(result) + (<usize>offset << 1),\n      changetype<usize>(value),\n      <usize>value.length << 1\n    );\n  }\n  return result;\n}\n\nexport function joinReferenceArray<T>(dataStart: usize, length: i32, separator: string): string {\n  var lastIndex = length - 1;\n  if (lastIndex < 0) return \"\";\n  var value: T;\n  if (!lastIndex) {\n    value = load<T>(dataStart);\n    // @ts-ignore: type\n    return value !== null ? value.toString() : \"\";\n  }\n  var result = \"\";\n  var sepLen = separator.length;\n  for (let i = 0; i < lastIndex; ++i) {\n    value = load<T>(dataStart + (<usize>i << alignof<T>()));\n    // @ts-ignore: type\n    if (value !== null) result += value.toString();\n    if (sepLen) result += separator;\n  }\n  value = load<T>(dataStart + (<usize>lastIndex << alignof<T>()));\n  // @ts-ignore: type\n  if (value !== null) result += value.toString();\n  return result;\n}\n\n// @ts-ignore: decorator\n@inline\nfunction scientific(significand: u64, exp: i32): f64 {\n  if (!significand || exp < -342) return 0;\n  if (exp > 308) return Infinity;\n  // Try use fast path\n  // Use fast path for string-to-double conversion if possible\n  // see http://www.exploringbinary.com/fast-path-decimal-to-floating-point-conversion\n  // Simple integer\n  var significandf = <f64>significand;\n  if (!exp) return significandf;\n  if (exp > 22 && exp <= 22 + 15) {\n    significandf *= pow10(exp - 22);\n    exp = 22;\n  }\n  if (significand <= 9007199254740991 && abs(exp) <= 22) {\n    if (exp > 0) return significandf * pow10(exp);\n    return significandf / pow10(-exp);\n  } else if (exp < 0) {\n    return scaledown(significand, exp);\n  } else {\n    return scaleup(significand, exp);\n  }\n}\n\n// Adopted from metallic lib:\n// https://github.com/jdh8/metallic/blob/master/src/stdlib/parse/scientific.h\n// @ts-ignore: decorator\n@inline\nfunction scaledown(significand: u64, exp: i32): f64 {\n  const denom: u64 = 6103515625; // 1e14 * 0x1p-14\n  const scale = reinterpret<f64>(0x3F06849B86A12B9B); // 1e-14 * 0x1p32\n\n  var shift = clz(significand);\n  significand <<= shift;\n  shift = exp - shift;\n\n  for (; exp <= -14; exp += 14) {\n    let q = significand / denom;\n    let r = significand % denom;\n    let s = clz(q);\n    significand = (q << s) + <u64>nearest(scale * <f64>(r << (s - 18)));\n    shift -= s;\n  }\n  var b = <u64>ipow32(5, -exp);\n  var q = significand / b;\n  var r = significand % b;\n  var s = clz(q);\n  significand = (q << s) + <u64>(reinterpret<f64>(reinterpret<u64>(<f64>r) + (s << 52)) / <f64>b);\n  shift -= s;\n\n  return NativeMath.scalbn(<f64>significand, <i32>shift);\n}\n\n// Adopted from metallic lib:\n// https://github.com/jdh8/metallic/blob/master/src/stdlib/parse/scientific.h\n// @ts-ignore: decorator\n@inline\nfunction scaleup(significand: u64, exp: i32): f64 {\n  const coeff: u32 = 1220703125; // 1e13 * 0x1p-13;\n  var shift = ctz(significand);\n  significand >>= shift;\n  shift += exp;\n\n  __fixmulShift = shift;\n  for (; exp >= 13; exp -= 13) {\n    significand = fixmul(significand, coeff);\n  }\n  significand = fixmul(significand, <u32>ipow32(5, exp));\n  shift = __fixmulShift;\n  return NativeMath.scalbn(<f64>significand, <i32>shift);\n}\n\n// Adopted from metallic lib:\n// https://github.com/jdh8/metallic/blob/master/src/stdlib/parse/scientific.h\n// @ts-ignore: decorator\n@inline\nfunction parseExp(ptr: usize, len: i32): i32 {\n  var sign = 1, magnitude = 0;\n  var code = <u32>load<u16>(ptr);\n  // check code is 'e' or 'E'\n  if ((code | 32) != CharCode.e) return 0;\n\n  if (!--len) return 0;\n  code = <u32>load<u16>(ptr += 2);\n  if (code == CharCode.MINUS) {\n    if (!--len) return 0;\n    code = <u32>load<u16>(ptr += 2);\n    sign = -1;\n  } else if (code == CharCode.PLUS) {\n    if (!--len) return 0;\n    code = <u32>load<u16>(ptr += 2);\n  }\n  // skip zeros\n  while (code == CharCode._0) {\n    if (!--len) return 0;\n    code = <u32>load<u16>(ptr += 2);\n  }\n  for (let digit: u32 = code - CharCode._0; len && digit < 10; digit = code - CharCode._0) {\n    if (magnitude >= 3200) return sign * 3200;\n    magnitude = 10 * magnitude + digit;\n    code = <u32>load<u16>(ptr += 2);\n    --len;\n  }\n  return sign * magnitude;\n}\n\n// @ts-ignore: decorator\n@lazy var __fixmulShift: u64 = 0;\n\n// Adopted from metallic lib:\n// https://github.com/jdh8/metallic/blob/master/src/stdlib/parse/scientific.h\n// @ts-ignore: decorator\n@inline\nfunction fixmul(a: u64, b: u32): u64 {\n  var low  = (a & 0xFFFFFFFF) * b;\n  var high = (a >> 32) * b + (low >> 32);\n  var overflow = <u32>(high >> 32);\n  var space = clz(overflow);\n  var revspace: u64 = 32 - space;\n  __fixmulShift += revspace;\n  return (high << space | (low & 0xFFFFFFFF) >> revspace) + (low << space >> 31 & 1);\n}\n\n// @ts-ignore: decorator\n@inline\nfunction pow10(n: i32): f64 {\n  // argument `n` should bounds in [0, 22] range\n  return load<f64>(POWERS10 + (n << alignof<f64>()));\n}\n","import { compareImpl } from \"./string\";\n\ntype Comparator<T> = (a: T, b: T) => i32;\n\n// @ts-ignore: decorator\n@lazy @inline const EMPTY = u32.MAX_VALUE;\n// @ts-ignore: decorator\n@inline const INSERTION_SORT_THRESHOLD = 48;\n// @ts-ignore: decorator\n@inline const MIN_RUN_LENGTH = 32;\n\n// @ts-ignore: decorator\n@inline\nfunction log2u(n: u32): u32 {\n  return 31 - clz(n);\n}\n\n// @ts-ignore: decorator\n@inline\nexport function COMPARATOR<T>(): Comparator<T> {\n  if (isInteger<T>()) {\n    if (isSigned<T>() && sizeof<T>() <= 4) {\n      return (a, b) => i32(a) - i32(b);\n    } else {\n      return (a, b) => i32(a > b) - i32(a < b);\n    }\n  } else if (isFloat<T>()) {\n    if (sizeof<T>() == 4) {\n      return (a, b) => {\n        var ia = reinterpret<i32>(f32(a));\n        var ib = reinterpret<i32>(f32(b));\n        ia ^= ia >> 31 >>> 1;\n        ib ^= ib >> 31 >>> 1;\n        return i32(ia > ib) - i32(ia < ib);\n      };\n    } else {\n      return (a, b) => {\n        var ia = reinterpret<i64>(f64(a));\n        var ib = reinterpret<i64>(f64(b));\n        ia ^= ia >> 63 >>> 1;\n        ib ^= ib >> 63 >>> 1;\n        return i32(ia > ib) - i32(ia < ib);\n      };\n    }\n  } else if (isString<T>()) {\n    return (a, b) => {\n      if (a === b || a === null || b === null) return 0;\n      var alen = changetype<string>(a).length;\n      var blen = changetype<string>(b).length;\n      if (!(alen | blen)) return 0;\n      if (!alen) return -1;\n      if (!blen) return  1;\n      let res = compareImpl(\n        changetype<string>(a), 0,\n        changetype<string>(b), 0,\n        <usize>min(alen, blen)\n      );\n      return res ? res : alen - blen;\n    };\n  } else {\n    return (a, b) => i32(a > b) - i32(a < b);\n  }\n}\n\n// Power Sort implementation (stable) from paper \"Nearly-Optimal Mergesorts\"\n// https://arxiv.org/pdf/1805.04154.pdf\n// This method usually outperform TimSort.\n// TODO: refactor c >>> 31 to c < 0 when binaryen will support this opt\nexport function SORT<T>(\n  ptr: usize,\n  len: i32,\n  comparator: Comparator<T>\n): void {\n  if (len <= INSERTION_SORT_THRESHOLD) {\n    if (len <= 1) return;\n    if (ASC_SHRINK_LEVEL < 1) {\n      switch (len) {\n        case 3: {\n          let a = load<T>(ptr, 0);\n          let b = load<T>(ptr, 1 << alignof<T>());\n          let c = comparator(a, b) > 0;\n          store<T>(ptr, select<T>(b, a, c), 0);\n          a = select<T>(a, b, c);\n          b = load<T>(ptr, 2 << alignof<T>());\n          c = comparator(a, b) > 0;\n          store<T>(ptr, select<T>(b, a, c), 1 << alignof<T>());\n          store<T>(ptr, select<T>(a, b, c), 2 << alignof<T>());\n        }\n        case 2: {\n          let a = load<T>(ptr, 0);\n          let b = load<T>(ptr, 1 << alignof<T>());\n          let c = comparator(a, b) > 0;\n          store<T>(ptr, select<T>(b, a, c), 0);\n          store<T>(ptr, select<T>(a, b, c), 1 << alignof<T>());\n          return;\n        }\n      }\n    }\n    insertionSort<T>(ptr, 0, len - 1, 0, comparator);\n    return;\n  }\n\n  var lgPlus2         = log2u(len) + 2;\n  var lgPlus2Size     = lgPlus2 << alignof<u32>();\n  var leftRunStartBuf = __alloc(lgPlus2Size << 1);\n  var leftRunEndBuf   = leftRunStartBuf + lgPlus2Size;\n\n  for (let i: u32 = 0; i < lgPlus2; ++i) {\n    store<u32>(leftRunStartBuf + (<usize>i << alignof<u32>()), EMPTY);\n  }\n\n  var buffer = __alloc(len << alignof<T>());\n\n  var hi   = len - 1;\n  var endA = extendRunRight<T>(ptr, 0, hi, comparator);\n  var lenA = endA + 1;\n\n  if (lenA < MIN_RUN_LENGTH) {\n    endA = min(hi, MIN_RUN_LENGTH - 1);\n    insertionSort<T>(ptr, 0, endA, lenA, comparator);\n  }\n\n  var top: u32 = 0, startA = 0;\n  while (endA < hi) {\n    let startB = endA + 1;\n    let endB = extendRunRight<T>(ptr, startB, hi, comparator);\n    let lenB = endB - startB + 1;\n\n    if (lenB < MIN_RUN_LENGTH) {\n      endB = min(hi, startB + MIN_RUN_LENGTH - 1);\n      insertionSort<T>(ptr, startB, endB, lenB, comparator);\n    }\n\n    let k = nodePower(0, hi, startA, startB, endB);\n\n    for (let i = top; i > k; --i) {\n      let start = load<u32>(leftRunStartBuf + (<usize>i << alignof<u32>()));\n      if (start != EMPTY) {\n        mergeRuns<T>(\n          ptr,\n          start,\n          load<u32>(leftRunEndBuf + (<usize>i << alignof<u32>())) + 1,\n          endA,\n          buffer,\n          comparator\n        );\n        startA = start;\n        store<u32>(leftRunStartBuf + (<usize>i << alignof<u32>()), EMPTY);\n      }\n    }\n\n    store<u32>(leftRunStartBuf + (<usize>k << alignof<u32>()), startA);\n    store<u32>(leftRunEndBuf   + (<usize>k << alignof<u32>()), endA);\n    startA = startB;\n    endA = endB;\n    top = k;\n  }\n\n  for (let i = top; i != 0; --i) {\n    let start = load<u32>(leftRunStartBuf + (<usize>i << alignof<u32>()));\n    if (start != EMPTY) {\n      mergeRuns<T>(\n        ptr,\n        start,\n        load<u32>(leftRunEndBuf + (<usize>i << alignof<u32>())) + 1,\n        hi,\n        buffer,\n        comparator\n      );\n    }\n  }\n  // dealloc aux buffers\n  __free(buffer);\n  __free(leftRunStartBuf);\n}\n\nfunction insertionSort<T>(\n  ptr: usize,\n  left: i32,\n  right: i32,\n  presorted: i32,\n  comparator: Comparator<T>\n): void {\n  if (ASC_SHRINK_LEVEL >= 1) {\n    // slightly improved original insertion sort\n    for (let i = left + presorted; i <= right; ++i) {\n      let j = i - 1;\n      let a = load<T>(ptr + (<usize>i << alignof<T>()));\n      while (j >= left) {\n        let b = load<T>(ptr + (<usize>j << alignof<T>()));\n        if (comparator(a, b) < 0) {\n          store<T>(ptr + (<usize>j << alignof<T>()), b, 1 << alignof<T>()); --j;\n        } else break;\n      }\n      store<T>(ptr + (<usize>j << alignof<T>()), a, 1 << alignof<T>());\n    }\n  } else {\n    // even-odd two-way insertion sort which allow increase minRunLen\n    let range = right - left + 1;\n    let i = left + select(range & 1, presorted - ((range - presorted) & 1), presorted == 0);\n    for (; i <= right; i += 2) {\n      let a = load<T>(ptr + (<usize>i << alignof<T>()), 0);\n      let b = load<T>(ptr + (<usize>i << alignof<T>()), 1 << alignof<T>());\n      let min = b, max = a;\n      if (comparator(a, b) <= 0) {\n        min = a, max = b;\n      }\n      let j = i - 1;\n      while (j >= left) {\n        a = load<T>(ptr + (<usize>j << alignof<T>()));\n        if (comparator(a, max) > 0) {\n          store<T>(ptr + (<usize>j << alignof<T>()), a, 2 << alignof<T>()); --j;\n        } else break;\n      }\n      store<T>(ptr + (<usize>j << alignof<T>()), max, 2 << alignof<T>());\n      while (j >= left) {\n        a = load<T>(ptr + (<usize>j << alignof<T>()));\n        if (comparator(a, min) > 0) {\n          store<T>(ptr + (<usize>j << alignof<T>()), a, 1 << alignof<T>()); --j;\n        } else break;\n      }\n      store<T>(ptr + (<usize>j << alignof<T>()), min, 1 << alignof<T>());\n    }\n  }\n}\n\nfunction nodePower(left: u32, right: u32, startA: u32, startB: u32, endB: u32): u32 {\n  var n: u64 = right - left + 1;\n  var s = startB - (left << 1);\n  var l = startA + s;\n  var r = endB   + s + 1;\n  var a = (<u64>l << 30) / n;\n  var b = (<u64>r << 30) / n;\n  return clz(<u32>(a ^ b));\n}\n\nfunction extendRunRight<T>(\n  ptr: usize,\n  i: i32,\n  right: i32,\n  comparator: Comparator<T>\n): i32 {\n  if (i == right) return i;\n  var j = i;\n  if (comparator(\n    load<T>(ptr + (<usize>  j << alignof<T>())),\n    load<T>(ptr + (<usize>++j << alignof<T>()))\n  ) > 0) {\n    while (\n      j < right &&\n      (comparator(\n        load<T>(ptr + (<usize>j << alignof<T>()), 1 << alignof<T>()),\n        load<T>(ptr + (<usize>j << alignof<T>()))\n      ) >>> 31) // < 0\n    ) ++j;\n    // reverse\n    let k = j;\n    while (i < k) {\n      let tmp = load<T>(ptr + (<usize>i << alignof<T>()));\n      store<T>(ptr + (<usize>i << alignof<T>()), load<T>(ptr + (<usize>k << alignof<T>()))); ++i;\n      store<T>(ptr + (<usize>k << alignof<T>()), tmp); --k;\n    }\n  } else {\n    while (\n      j < right &&\n      comparator(\n        load<T>(ptr + (<usize>j << alignof<T>()), 1 << alignof<T>()),\n        load<T>(ptr + (<usize>j << alignof<T>()))\n      ) >= 0\n    ) ++j;\n  }\n  return j;\n}\n\n// Merges arr[l..m - 1] and arr[m..r]\nfunction mergeRuns<T>(\n  ptr: usize,\n  l: i32,\n  m: i32,\n  r: i32,\n  buffer: usize,\n  comparator: Comparator<T>\n): void {\n  --m;\n  var i: i32, j: i32, t = r + m;\n  for (i = m + 1; i > l; --i) {\n    store<T>(\n      buffer + (<usize>(i - 1) << alignof<T>()),\n      load<T>(ptr + (<usize>(i - 1) << alignof<T>()))\n    );\n  }\n  for (j = m; j < r; ++j) {\n    store<T>(\n      buffer + (<usize>(t - j) << alignof<T>()),\n      load<T>(ptr + (<usize>j << alignof<T>()), 1 << alignof<T>())\n    );\n  }\n  for (let k = l; k <= r; ++k) {\n    let a = load<T>(buffer + (<usize>j << alignof<T>()));\n    let b = load<T>(buffer + (<usize>i << alignof<T>()));\n    if (comparator(a, b) < 0) {\n      store<T>(ptr + (<usize>k << alignof<T>()), a);\n      --j;\n    } else {\n      store<T>(ptr + (<usize>k << alignof<T>()), b);\n      ++i;\n    }\n  }\n}\n","/// <reference path=\"./rt/index.d.ts\" />\n\nimport { OBJECT, BLOCK_MAXSIZE, TOTAL_OVERHEAD } from \"./rt/common\";\nimport { COMPARATOR, SORT } from \"./util/sort\";\nimport { REVERSE } from \"./util/bytes\";\nimport { idof } from \"./builtins\";\nimport { Array } from \"./array\";\nimport { E_INDEXOUTOFRANGE, E_INVALIDLENGTH, E_HOLEYARRAY } from \"./util/error\";\nimport { joinBooleanArray, joinIntegerArray, joinFloatArray, joinStringArray, joinReferenceArray } from \"./util/string\";\n\n@final\nexport class StaticArray<T> {\n  [key: number]: T;\n\n  // Note that the interface of StaticArray instances must be a semantically\n  // compatible subset of Array<T> in order for syntax highlighting to work\n  // properly, for instance when creating static arrays from array literals.\n  // The additionally provided static methods take care of dealing with static\n  // arrays exclusively, without having to convert to Array<T> first.\n\n  static fromArray<T>(source: Array<T>): StaticArray<T> {\n    var length = source.length;\n    var outSize = <usize>length << alignof<T>();\n    var out = changetype<StaticArray<T>>(__new(outSize, idof<StaticArray<T>>()));\n    if (isManaged<T>()) {\n      let sourcePtr = source.dataStart;\n      for (let i = 0; i < length; ++i) {\n        let off = <usize>i << alignof<T>();\n        let ref = load<usize>(sourcePtr + off);\n        store<usize>(changetype<usize>(out) + off, ref);\n        __link(changetype<usize>(out), ref, true);\n      }\n    } else {\n      memory.copy(changetype<usize>(out), source.dataStart, outSize);\n    }\n    return out;\n  }\n\n  static concat<T>(source: StaticArray<T>, other: StaticArray<T>): StaticArray<T> {\n    var sourceLen = source.length;\n    var otherLen = select(0, other.length, other === null);\n    var outLen = sourceLen + otherLen;\n    if (<u32>outLen > <u32>BLOCK_MAXSIZE >>> alignof<T>()) throw new Error(E_INVALIDLENGTH);\n    var out = changetype<StaticArray<T>>(__new(<usize>outLen << alignof<T>(), idof<StaticArray<T>>()));\n    var outStart = changetype<usize>(out);\n    var sourceSize = <usize>sourceLen << alignof<T>();\n    if (isManaged<T>()) {\n      for (let offset: usize = 0; offset < sourceSize; offset += sizeof<T>()) {\n        let ref = load<usize>(changetype<usize>(source) + offset);\n        store<usize>(outStart + offset, ref);\n        __link(changetype<usize>(out), ref, true);\n      }\n      outStart += sourceSize;\n      let otherSize = <usize>otherLen << alignof<T>();\n      for (let offset: usize = 0; offset < otherSize; offset += sizeof<T>()) {\n        let ref = load<usize>(changetype<usize>(other) + offset);\n        store<usize>(outStart + offset, ref);\n        __link(changetype<usize>(out), ref, true);\n      }\n    } else {\n      memory.copy(outStart, changetype<usize>(source), sourceSize);\n      memory.copy(outStart + sourceSize, changetype<usize>(other), <usize>otherLen << alignof<T>());\n    }\n    return out;\n  }\n\n  static slice<T>(source: StaticArray<T>, start: i32 = 0, end: i32 = i32.MAX_VALUE): StaticArray<T> {\n    var length = source.length;\n    start = start < 0 ? max(start + length, 0) : min(start, length);\n    end   = end   < 0 ? max(end   + length, 0) : min(end  , length);\n    length = max(end - start, 0);\n    var sliceSize = <usize>length << alignof<T>();\n    var slice = changetype<StaticArray<T>>(__new(sliceSize, idof<StaticArray<T>>()));\n    var sourcePtr = changetype<usize>(source) + (<usize>start << alignof<T>());\n    if (isManaged<T>()) {\n      let off: usize = 0;\n      while (off < sliceSize) {\n        let ref = load<usize>(sourcePtr + off);\n        store<usize>(changetype<usize>(slice) + off, ref);\n        __link(changetype<usize>(slice), ref, true);\n        off += sizeof<usize>();\n      }\n    } else {\n      memory.copy(changetype<usize>(slice), sourcePtr, sliceSize);\n    }\n    return slice;\n  }\n\n  constructor(length: i32) {\n    if (<u32>length > <u32>BLOCK_MAXSIZE >>> alignof<T>()) throw new RangeError(E_INVALIDLENGTH);\n    var outSize = <usize>length << alignof<T>();\n    var out = changetype<StaticArray<T>>(__new(outSize, idof<StaticArray<T>>()));\n    memory.fill(changetype<usize>(out), 0, outSize);\n    return out;\n  }\n\n  get length(): i32 {\n    return changetype<OBJECT>(changetype<usize>(this) - TOTAL_OVERHEAD).rtSize >>> alignof<T>();\n  }\n\n  at(index: i32): T {\n    var len = this.length;\n    index += select(0, len, index >= 0);\n    if (<u32>index >= <u32>len) throw new RangeError(E_INDEXOUTOFRANGE);\n    var value = load<T>(changetype<usize>(this) + (<usize>index << alignof<T>()));\n    if (isReference<T>()) {\n      if (!isNullable<T>()) {\n        if (!changetype<usize>(value)) throw new Error(E_HOLEYARRAY);\n      }\n    }\n    return value;\n  }\n\n  @operator(\"[]\") private __get(index: i32): T {\n    if (<u32>index >= <u32>this.length) throw new RangeError(E_INDEXOUTOFRANGE);\n    var value = load<T>(changetype<usize>(this) + (<usize>index << alignof<T>()));\n    if (isReference<T>()) {\n      if (!isNullable<T>()) {\n        if (!changetype<usize>(value)) throw new Error(E_HOLEYARRAY);\n      }\n    }\n    return value;\n  }\n\n  @unsafe @operator(\"{}\") private __uget(index: i32): T {\n    return load<T>(changetype<usize>(this) + (<usize>index << alignof<T>()));\n  }\n\n  @operator(\"[]=\") private __set(index: i32, value: T): void {\n    if (<u32>index >= <u32>this.length) throw new RangeError(E_INDEXOUTOFRANGE);\n    this.__uset(index, value);\n  }\n\n  @unsafe @operator(\"{}=\") private __uset(index: i32, value: T): void {\n    store<T>(changetype<usize>(this) + (<usize>index << alignof<T>()), value);\n    if (isManaged<T>()) {\n      __link(changetype<usize>(this), changetype<usize>(value), true);\n    }\n  }\n\n  fill(value: T, start: i32 = 0, end: i32 = i32.MAX_VALUE): this {\n    var ptr = changetype<usize>(this);\n    var len = this.length;\n    start = start < 0 ? max(len + start, 0) : min(start, len);\n    end   = end   < 0 ? max(len + end,   0) : min(end,   len);\n    if (isManaged<T>()) {\n      for (; start < end; ++start) {\n        store<usize>(ptr + (<usize>start << alignof<T>()), changetype<usize>(value));\n        __link(changetype<usize>(this), changetype<usize>(value), true);\n      }\n    } else if (sizeof<T>() == 1) {\n      if (start < end) {\n        memory.fill(\n          ptr + <usize>start,\n          u8(value),\n          <usize>(end - start)\n        );\n      }\n    } else {\n      for (; start < end; ++start) {\n        store<T>(ptr + (<usize>start << alignof<T>()), value);\n      }\n    }\n    return this;\n  }\n\n  copyWithin(target: i32, start: i32, end: i32 = i32.MAX_VALUE): this {\n    var ptr = changetype<usize>(this);\n    var len = this.length;\n\n    end = min<i32>(end, len);\n\n    var to    = target < 0 ? max(len + target, 0) : min(target, len);\n    var from  = start < 0 ? max(len + start, 0) : min(start, len);\n    var last  = end < 0 ? max(len + end, 0) : min(end, len);\n    var count = min(last - from, len - to);\n\n    memory.copy( // is memmove\n      ptr + (<usize>to << alignof<T>()),\n      ptr + (<usize>from << alignof<T>()),\n      <usize>count << alignof<T>()\n    );\n    return this;\n  }\n\n  includes(value: T, fromIndex: i32 = 0): bool {\n    if (isFloat<T>()) {\n      let length = this.length;\n      if (length == 0 || fromIndex >= length) return false;\n      if (fromIndex < 0) fromIndex = max(length + fromIndex, 0);\n      while (fromIndex < length) {\n        let elem = load<T>(changetype<usize>(this) + (<usize>fromIndex << alignof<T>()));\n        // @ts-ignore\n        if (elem == value || isNaN(elem) & isNaN(value)) return true;\n        ++fromIndex;\n      }\n      return false;\n    } else {\n      return this.indexOf(value, fromIndex) >= 0;\n    }\n  }\n\n  indexOf(value: T, fromIndex: i32 = 0): i32 {\n    var length = this.length;\n    if (length == 0 || fromIndex >= length) return -1;\n    if (fromIndex < 0) fromIndex = max(length + fromIndex, 0);\n    while (fromIndex < length) {\n      if (load<T>(changetype<usize>(this) + (<usize>fromIndex << alignof<T>())) == value) return fromIndex;\n      ++fromIndex;\n    }\n    return -1;\n  }\n\n  lastIndexOf(value: T, fromIndex: i32 = this.length): i32 {\n    var length = this.length;\n    if (length == 0) return -1;\n    if (fromIndex < 0) fromIndex = length + fromIndex;\n    else if (fromIndex >= length) fromIndex = length - 1;\n    while (fromIndex >= 0) {\n      if (load<T>(changetype<usize>(this) + (<usize>fromIndex << alignof<T>())) == value) return fromIndex;\n      --fromIndex;\n    }\n    return -1;\n  }\n\n  concat(other: Array<T>): Array<T> {\n    var thisLen = this.length;\n    var otherLen = select(0, other.length, other === null);\n    var outLen = thisLen + otherLen;\n    if (<u32>outLen > <u32>BLOCK_MAXSIZE >>> alignof<T>()) throw new Error(E_INVALIDLENGTH);\n    var out = changetype<Array<T>>(__newArray(outLen, alignof<T>(), idof<Array<T>>()));\n    var outStart = out.dataStart;\n    var thisSize = <usize>thisLen << alignof<T>();\n    if (isManaged<T>()) {\n      let thisStart = changetype<usize>(this);\n      for (let offset: usize = 0; offset < thisSize; offset += sizeof<T>()) {\n        let ref = load<usize>(thisStart + offset);\n        store<usize>(outStart + offset, ref);\n        __link(changetype<usize>(out), ref, true);\n      }\n      outStart += thisSize;\n      let otherStart = other.dataStart;\n      let otherSize = <usize>otherLen << alignof<T>();\n      for (let offset: usize = 0; offset < otherSize; offset += sizeof<T>()) {\n        let ref = load<usize>(otherStart + offset);\n        store<usize>(outStart + offset, ref);\n        __link(changetype<usize>(out), ref, true);\n      }\n    } else {\n      memory.copy(outStart, changetype<usize>(this), thisSize);\n      memory.copy(outStart + thisSize, other.dataStart, <usize>otherLen << alignof<T>());\n    }\n    return out;\n  }\n\n  slice(start: i32 = 0, end: i32 = i32.MAX_VALUE): Array<T> {\n    var length = this.length;\n    start = start < 0 ? max(start + length, 0) : min(start, length);\n    end   = end   < 0 ? max(end   + length, 0) : min(end  , length);\n    length = max(end - start, 0);\n    var slice = changetype<Array<T>>(__newArray(length, alignof<T>(), idof<Array<T>>()));\n    var sliceBase = slice.dataStart;\n    var thisBase = changetype<usize>(this) + (<usize>start << alignof<T>());\n    if (isManaged<T>()) {\n      let off = <usize>0;\n      let end = <usize>length << alignof<usize>();\n      while (off < end) {\n        let ref = load<usize>(thisBase + off);\n        store<usize>(sliceBase + off, ref);\n        __link(changetype<usize>(slice), ref, true);\n        off += sizeof<usize>();\n      }\n    } else {\n      memory.copy(sliceBase, thisBase, length << alignof<T>());\n    }\n    return slice;\n  }\n\n  findIndex(fn: (value: T, index: i32, array: StaticArray<T>) => bool): i32 {\n    for (let i = 0, len = this.length; i < len; ++i) {\n      if (fn(load<T>(changetype<usize>(this) + (<usize>i << alignof<T>())), i, this)) return i;\n    }\n    return -1;\n  }\n\n  findLastIndex(fn: (value: T, index: i32, array: StaticArray<T>) => bool): i32 {\n    for (let i = this.length - 1; i >= 0; --i) {\n      if (fn(load<T>(changetype<usize>(this) + (<usize>i << alignof<T>())), i, this)) return i;\n    }\n    return -1;\n  }\n\n  forEach(fn: (value: T, index: i32, array: StaticArray<T>) => void): void {\n    for (let i = 0, len = this.length; i < len; ++i) {\n      fn(load<T>(changetype<usize>(this) + (<usize>i << alignof<T>())), i, this);\n    }\n  }\n\n  map<U>(fn: (value: T, index: i32, array: StaticArray<T>) => U): Array<U> {\n    var len = this.length;\n    var out = changetype<Array<U>>(__newArray(len, alignof<U>(), idof<Array<U>>()));\n    var outStart = out.dataStart;\n    for (let i = 0; i < len; ++i) {\n      let result = fn(load<T>(changetype<usize>(this) + (<usize>i << alignof<T>())), i, this);\n      store<U>(outStart + (<usize>i << alignof<U>()), result);\n      if (isManaged<U>()) {\n        __link(changetype<usize>(out), changetype<usize>(result), true);\n      }\n    }\n    return out;\n  }\n\n  filter(fn: (value: T, index: i32, array: StaticArray<T>) => bool): Array<T> {\n    var result = changetype<Array<T>>(__newArray(0, alignof<T>(), idof<Array<T>>()));\n    for (let i = 0, len = this.length; i < len; ++i) {\n      let value = load<T>(changetype<usize>(this) + (<usize>i << alignof<T>()));\n      if (fn(value, i, this)) result.push(value);\n    }\n    return result;\n  }\n\n  reduce<U>(\n    fn: (previousValue: U, currentValue: T, currentIndex: i32, array: StaticArray<T>) => U,\n    initialValue: U\n  ): U {\n    var acc = initialValue;\n    for (let i = 0, len = this.length; i < len; ++i) {\n      acc = fn(acc, load<T>(changetype<usize>(this) + (<usize>i << alignof<T>())), i, this);\n    }\n    return acc;\n  }\n\n  reduceRight<U>(\n    fn: (previousValue: U, currentValue: T, currentIndex: i32, array: StaticArray<T>) => U,\n    initialValue: U\n  ): U {\n    var acc = initialValue;\n    for (let i = this.length - 1; i >= 0; --i) {\n      acc = fn(acc, load<T>(changetype<usize>(this) + (<usize>i << alignof<T>())), i, this);\n    }\n    return acc;\n  }\n\n  every(fn: (value: T, index: i32, array: StaticArray<T>) => bool): bool {\n    for (let i = 0, len = this.length; i < len; ++i) {\n      if (!fn(load<T>(changetype<usize>(this) + (<usize>i << alignof<T>())), i, this)) return false;\n    }\n    return true;\n  }\n\n  some(fn: (value: T, index: i32, array: StaticArray<T>) => bool): bool {\n    for (let i = 0, len = this.length; i < len; ++i) {\n      if (fn(load<T>(changetype<usize>(this) + (<usize>i << alignof<T>())), i, this)) return true;\n    }\n    return false;\n  }\n\n  sort(comparator: (a: T, b: T) => i32 = COMPARATOR<T>()): this {\n    SORT<T>(changetype<usize>(this), this.length, comparator);\n    return this;\n  }\n\n  join(separator: string = \",\"): string {\n    if (isBoolean<T>())   return joinBooleanArray(changetype<usize>(this), this.length, separator);\n    if (isInteger<T>())   return joinIntegerArray<T>(changetype<usize>(this), this.length, separator);\n    if (isFloat<T>())     return joinFloatArray<T>(changetype<usize>(this), this.length, separator);\n    if (ASC_SHRINK_LEVEL < 1) {\n      if (isString<T>())  return joinStringArray(changetype<usize>(this), this.length, separator);\n    }\n    if (isReference<T>()) return joinReferenceArray<T>(changetype<usize>(this), this.length, separator);\n    ERROR(\"unspported element type\");\n    return <string>unreachable();\n  }\n\n  reverse(): this {\n    REVERSE<T>(changetype<usize>(this), this.length);\n    return this;\n  }\n\n  toString(): string {\n    return this.join();\n  }\n\n  // RT integration\n\n  @unsafe private __visit(cookie: u32): void {\n    if (isManaged<T>()) {\n      let cur = changetype<usize>(this);\n      let end = cur + changetype<OBJECT>(changetype<usize>(this) - TOTAL_OVERHEAD).rtSize;\n      while (cur < end) {\n        let val = load<usize>(cur);\n        if (val) __visit(val, cookie);\n        cur += sizeof<usize>();\n      }\n    }\n  }\n}\n","// Common error messages for use across the standard library. Keeping error messages compact\n// and reusing them where possible ensures minimal static data in binaries.\n\n// @ts-ignore: decorator\n@lazy @inline\nexport const E_INDEXOUTOFRANGE: string = \"Index out of range\";\n\n// @ts-ignore: decorator\n@lazy @inline\nexport const E_VALUEOUTOFRANGE: string = \"Value out of range\";\n\n// @ts-ignore: decorator\n@lazy @inline\nexport const E_INVALIDLENGTH: string = \"Invalid length\";\n\n// @ts-ignore: decorator\n@lazy @inline\nexport const E_ILLEGALGENTYPE: string = \"Illegal generic type\";\n\n// @ts-ignore: decorator\n@lazy @inline\nexport const E_EMPTYARRAY: string = \"Array is empty\";\n\n// @ts-ignore: decorator\n@lazy @inline\nexport const E_HOLEYARRAY: string = \"Element type must be nullable if array is holey\";\n\n// @ts-ignore: decorator\n@lazy @inline\nexport const E_NOTIMPLEMENTED: string = \"Not implemented\";\n\n// @ts-ignore: decorator\n@lazy @inline\nexport const E_KEYNOTFOUND: string = \"Key does not exist\";\n\n// @ts-ignore: decorator\n@lazy @inline\nexport const E_ALLOCATION_TOO_LARGE: string = \"Allocation too large\";\n\n// @ts-ignore: decorator\n@lazy @inline\nexport const E_ALREADY_PINNED: string = \"Object already pinned\";\n\n// @ts-ignore: decorator\n@lazy @inline\nexport const E_NOT_PINNED: string = \"Object is not pinned\";\n\n// @ts-ignore: decorator\n@lazy @inline\nexport const E_URI_MALFORMED: string = \"URI malformed\";\n\n// @ts-ignore: decorator\n@lazy @inline\nexport const E_INVALIDDATE: string = \"Invalid Date\";\n\n// @ts-ignore: decorator\n@lazy @inline\nexport const E_UNPAIRED_SURROGATE: string = \"Unpaired surrogate\";\n","import { memcmp, memmove, memset } from \"./util/memory\";\nimport { E_NOTIMPLEMENTED } from \"./util/error\";\n\n/** Memory manager interface. */\nexport namespace memory {\n\n  /** Gets the size of the memory in pages. */\n  // @ts-ignore: decorator\n  @builtin\n  export declare function size(): i32;\n\n  /** Grows the memory by the given size in pages and returns the previous size in pages. */\n  // @ts-ignore: decorator\n  @unsafe @builtin\n  export declare function grow(pages: i32): i32;\n\n  /** Fills a section in memory with the specified byte value. */\n  // @ts-ignore: decorator\n  @unsafe @builtin\n  export function fill(dst: usize, c: u8, n: usize): void {\n    memset(dst, c, n); // fallback if \"bulk-memory\" isn't enabled\n  }\n\n  /** Copies a section of memory to another. Has move semantics. */\n  // @ts-ignore: decorator\n  @unsafe @builtin\n  export function copy(dst: usize, src: usize, n: usize): void {\n    memmove(dst, src, n); // fallback if \"bulk-memory\" isn't enabled\n  }\n\n  /** Initializes a memory segment. */\n  // @ts-ignore: decorator\n  @unsafe\n  export function init(segmentIndex: u32, srcOffset: usize, dstOffset: usize, n: usize): void {\n    throw new Error(E_NOTIMPLEMENTED);\n  }\n\n  /** Drops a memory segment. */\n  // @ts-ignore: decorator\n  @unsafe\n  export function drop(segmentIndex: u32): void {\n    throw new Error(E_NOTIMPLEMENTED);\n  }\n\n  /** Repeats a section of memory at a specific address. */\n  // @ts-ignore: decorator\n  @unsafe\n  export function repeat(dst: usize, src: usize, srcLength: usize, count: usize): void {\n    var index: usize = 0;\n    var total = srcLength * count;\n    while (index < total) {\n      memory.copy(dst + index, src, srcLength);\n      index += srcLength;\n    }\n  }\n\n  /** Compares a section of memory to another. */\n  // @ts-ignore: decorator\n  @inline\n  export function compare(vl: usize, vr: usize, n: usize): i32 {\n    return memcmp(vl, vr, n);\n  }\n\n  /** Gets a pointer to a static chunk of memory of the given size. */\n  // @ts-ignore: decorator\n  @builtin\n  export declare function data<T>(size: T, align?: i32): usize;\n}\n\n// @ts-ignore: decorator\n@builtin\nexport declare const __data_end: usize;\n\n// @ts-ignore: decorator\n@builtin\nexport declare var __stack_pointer: usize;\n\n// @ts-ignore: decorator\n@builtin\nexport declare const __heap_base: usize;\n\n/** Heap memory interface. */\nexport namespace heap {\n\n  /** Allocates a chunk of memory of at least the specified size. */\n  // @ts-ignore: decorator\n  @unsafe export function alloc(size: usize): usize {\n    return __alloc(size);\n  }\n\n  /** Reallocates a chunk of memory to have at least the specified size. */\n  // @ts-ignore: decorator\n  @unsafe export function realloc(ptr: usize, size: usize): usize {\n    return __realloc(ptr, size);\n  }\n\n  /** Frees a chunk of memory. Does hardly anything (most recent block only) with the stub runtime. */\n  // @ts-ignore: decorator\n  @unsafe export function free(ptr: usize): void {\n    __free(ptr);\n  }\n\n  /** Dangerously resets the entire heap. Specific to the stub runtime. */\n  // @ts-ignore: decorator\n  @unsafe export function reset(): void {\n    if (isDefined(__reset)) {\n      __reset();\n    } else {\n      throw new Error(E_NOTIMPLEMENTED);\n    }\n  }\n}\n","export function memcpy(dest: usize, src: usize, n: usize): void { // see: musl/src/string/memcpy.c\n  var w: u32, x: u32;\n\n  // copy 1 byte each until src is aligned to 4 bytes\n  while (n && (src & 3)) {\n    store<u8>(dest++, load<u8>(src++));\n    n--;\n  }\n\n  // if dst is aligned to 4 bytes as well, copy 4 bytes each\n  if ((dest & 3) == 0) {\n    while (n >= 16) {\n      store<u32>(dest     , load<u32>(src     ));\n      store<u32>(dest +  4, load<u32>(src +  4));\n      store<u32>(dest +  8, load<u32>(src +  8));\n      store<u32>(dest + 12, load<u32>(src + 12));\n      src += 16; dest += 16; n -= 16;\n    }\n    if (n & 8) {\n      store<u32>(dest    , load<u32>(src    ));\n      store<u32>(dest + 4, load<u32>(src + 4));\n      dest += 8; src += 8;\n    }\n    if (n & 4) {\n      store<u32>(dest, load<u32>(src));\n      dest += 4; src += 4;\n    }\n    if (n & 2) { // drop to 2 bytes each\n      store<u16>(dest, load<u16>(src));\n      dest += 2; src += 2;\n    }\n    if (n & 1) { // drop to 1 byte\n      store<u8>(dest++, load<u8>(src++));\n    }\n    return;\n  }\n\n  // if dst is not aligned to 4 bytes, use alternating shifts to copy 4 bytes each\n  // doing shifts if faster when copying enough bytes (here: 32 or more)\n  if (n >= 32) {\n    switch (<u32>dest & 3) {\n      // known to be != 0\n      case 1: {\n        w = load<u32>(src);\n        store<u8>(dest++, load<u8>(src++));\n        store<u8>(dest++, load<u8>(src++));\n        store<u8>(dest++, load<u8>(src++));\n        n -= 3;\n        while (n >= 17) {\n          x = load<u32>(src + 1);\n          store<u32>(dest, w >> 24 | x << 8);\n          w = load<u32>(src + 5);\n          store<u32>(dest + 4, x >> 24 | w << 8);\n          x = load<u32>(src + 9);\n          store<u32>(dest + 8, w >> 24 | x << 8);\n          w = load<u32>(src + 13);\n          store<u32>(dest + 12, x >> 24 | w << 8);\n          src += 16; dest += 16; n -= 16;\n        }\n        break;\n      }\n      case 2: {\n        w = load<u32>(src);\n        store<u8>(dest++, load<u8>(src++));\n        store<u8>(dest++, load<u8>(src++));\n        n -= 2;\n        while (n >= 18) {\n          x = load<u32>(src + 2);\n          store<u32>(dest, w >> 16 | x << 16);\n          w = load<u32>(src + 6);\n          store<u32>(dest + 4, x >> 16 | w << 16);\n          x = load<u32>(src + 10);\n          store<u32>(dest + 8, w >> 16 | x << 16);\n          w = load<u32>(src + 14);\n          store<u32>(dest + 12, x >> 16 | w << 16);\n          src += 16; dest += 16; n -= 16;\n        }\n        break;\n      }\n      case 3: {\n        w = load<u32>(src);\n        store<u8>(dest++, load<u8>(src++));\n        n -= 1;\n        while (n >= 19) {\n          x = load<u32>(src + 3);\n          store<u32>(dest, w >> 8 | x << 24);\n          w = load<u32>(src + 7);\n          store<u32>(dest + 4, x >> 8 | w << 24);\n          x = load<u32>(src + 11);\n          store<u32>(dest + 8, w >> 8 | x << 24);\n          w = load<u32>(src + 15);\n          store<u32>(dest + 12, x >> 8 | w << 24);\n          src += 16; dest += 16; n -= 16;\n        }\n        break;\n      }\n    }\n  }\n\n  // copy remaining bytes one by one\n  if (n & 16) {\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n  }\n  if (n & 8) {\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n  }\n  if (n & 4) {\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n  }\n  if (n & 2) {\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n  }\n  if (n & 1) {\n    store<u8>(dest++, load<u8>(src++));\n  }\n}\n\n// @ts-ignore: decorator\n@inline\nexport function memmove(dest: usize, src: usize, n: usize): void { // see: musl/src/string/memmove.c\n  if (dest === src) return;\n  if (ASC_SHRINK_LEVEL < 1) {\n    if (src - dest - n <= -(n << 1)) {\n      memcpy(dest, src, n);\n      return;\n    }\n  }\n  if (dest < src) {\n    if (ASC_SHRINK_LEVEL < 2) {\n      if ((src & 7) == (dest & 7)) {\n        while (dest & 7) {\n          if (!n) return;\n          --n;\n          store<u8>(dest++, load<u8>(src++));\n        }\n        while (n >= 8) {\n          store<u64>(dest, load<u64>(src));\n          n    -= 8;\n          dest += 8;\n          src  += 8;\n        }\n      }\n    }\n    while (n) {\n      store<u8>(dest++, load<u8>(src++));\n      --n;\n    }\n  } else {\n    if (ASC_SHRINK_LEVEL < 2) {\n      if ((src & 7) == (dest & 7)) {\n        while ((dest + n) & 7) {\n          if (!n) return;\n          store<u8>(dest + --n, load<u8>(src + n));\n        }\n        while (n >= 8) {\n          n -= 8;\n          store<u64>(dest + n, load<u64>(src + n));\n        }\n      }\n    }\n    while (n) {\n      store<u8>(dest + --n, load<u8>(src + n));\n    }\n  }\n}\n\n// @ts-ignore: decorator\n@inline\nexport function memset(dest: usize, c: u8, n: usize): void { // see: musl/src/string/memset\n  if (ASC_SHRINK_LEVEL > 1) {\n    while (n) {\n      store<u8>(dest++, c);\n      --n;\n    }\n  } else {\n    // fill head and tail with minimal branching\n    if (!n) return;\n    let dend = dest + n;\n    store<u8>(dest, c);\n    store<u8>(dend - 1, c);\n    if (n <= 2) return;\n    store<u8>(dest, c, 1);\n    store<u8>(dest, c, 2);\n    store<u8>(dend - 2, c);\n    store<u8>(dend - 3, c);\n    if (n <= 6) return;\n    store<u8>(dest, c, 3);\n    store<u8>(dend - 4, c);\n    if (n <= 8) return;\n\n    // advance pointer to align it at 4-byte boundary\n    let k: usize = -dest & 3;\n    dest += k;\n    n -= k;\n    n &= -4;\n\n    let c32: u32 = <u32>-1 / 255 * c;\n\n    // fill head/tail up to 28 bytes each in preparation\n    dend = dest + n;\n    store<u32>(dest, c32);\n    store<u32>(dend - 4, c32);\n    if (n <= 8) return;\n    store<u32>(dest, c32, 4);\n    store<u32>(dest, c32, 8);\n    store<u32>(dend - 12, c32);\n    store<u32>(dend - 8, c32);\n    if (n <= 24) return;\n    store<u32>(dest, c32, 12);\n    store<u32>(dest, c32, 16);\n    store<u32>(dest, c32, 20);\n    store<u32>(dest, c32, 24);\n    store<u32>(dend - 28, c32);\n    store<u32>(dend - 24, c32);\n    store<u32>(dend - 20, c32);\n    store<u32>(dend - 16, c32);\n\n    // align to a multiple of 8\n    k = 24 + (dest & 4);\n    dest += k;\n    n -= k;\n\n    // copy 32 bytes each\n    let c64: u64 = <u64>c32 | (<u64>c32 << 32);\n    while (n >= 32) {\n      store<u64>(dest, c64);\n      store<u64>(dest, c64, 8);\n      store<u64>(dest, c64, 16);\n      store<u64>(dest, c64, 24);\n      n -= 32;\n      dest += 32;\n    }\n  }\n}\n\n// @ts-ignore: decorator\n@inline\nexport function memcmp(vl: usize, vr: usize, n: usize): i32 {\n  if (vl == vr) return 0;\n  if (ASC_SHRINK_LEVEL < 2) {\n    if ((vl & 7) == (vr & 7)) {\n      while (vl & 7) {\n        if (!n) return 0;\n        let a = <i32>load<u8>(vl);\n        let b = <i32>load<u8>(vr);\n        if (a != b) return a - b;\n        n--; vl++; vr++;\n      }\n      while (n >= 8) {\n        if (load<u64>(vl) != load<u64>(vr)) break;\n        vl += 8;\n        vr += 8;\n        n  -= 8;\n      }\n    }\n  }\n  while (n--) {\n    let a = <i32>load<u8>(vl);\n    let b = <i32>load<u8>(vr);\n    if (a != b) return a - b;\n    vl++; vr++;\n  }\n  return 0;\n}\n","declare function consoleLog(arg0: i32): void;\ndeclare function consoleFloat(arg0: f32): void;\n\n// dstR = <f32> (<f32> (r - clipL) * rfactor + (<f32> midAmount * 0.25 * unchecked(curveSinDown[r])))\n// midR = <f32> (<f32> (r - clipL) * rfactor)\nlet viewLength: i32\nlet channelLength: i32\nlet width: i32\nlet height: i32\n\nconst views = new StaticArray<Uint8ClampedArray>(5)\nconst counts = new StaticArray<StaticArray<Uint32Array>>(5)\nconst displayCounts = new StaticArray<StaticArray<Uint8Array>>(5)\n\nconst luma_mode: i32 = 2\nlet luma_strength_r: f64 = 0\nlet luma_strength_g: f64 = 0\nlet luma_strength_b: f64 = 0\n\n// (2 * 101 * 3 * 256)\nconst clip_cache = new StaticArray<StaticArray<StaticArray<Uint8Array>>>(2)\n// (201 * 256)\nconst temp_cache = new StaticArray<Uint8Array>(201)\n// (201 * 256)\nconst exposure_cache = new StaticArray<Uint8Array>(201)\n// (201 * 256 * 256)\nconst shadow_cache = new StaticArray<StaticArray<Uint8Array>>(201)\n// (201 * 256 * 256\nconst light_cache = new StaticArray<StaticArray<Uint8Array>>(201)\n// (201 * 256 * 256)\nconst saturation_cache = new StaticArray<StaticArray<Uint8Array>>(201)\n\nconst lineUpFromPoint1= new Float32Array(256)\nconst lineDownToPoint1 = new Float32Array(256)\n\nconst lineUpFromPoint2 = new Float32Array(256)\nconst lineDownToPoint2 = new Float32Array(256)\n\nconst lineDownToPoint75 = new Float32Array(256)\nconst lineDownToPoint5 = new Float32Array(256)\n\nconst curveExpUp = new Float32Array(256)\nconst curveExpDown = new Float32Array(256)\n\nconst curveCircleBigUp = new Float32Array(256)\nconst curveCircleBigDown = new Float32Array(256)\n\nconst curveRootMidUp = new Float32Array(256)\nconst curveRootMidDown = new Float32Array(256)\n\nconst curveGrayUp = new Float32Array(256)\nconst curveGrayDown = new Float32Array(256)\n\nconst curveSinFull = new Float32Array(256)\nconst curveSinFull32 = new Float32Array(256)\nconst curveSinFull224 = new Float32Array(256)\n\nconst curveSinUp = new Float32Array(256)\nconst curveSinDown = new Float32Array(256)\n\nconst curveLogDown0 = new Float32Array(256)\nconst curveLogUp0 = new Float32Array(256)\n\nconst curveSinFull_0 = new StaticArray<f64>(256)\nconst curveSinUpMid_f64 = new StaticArray<f64>(256)\nconst curve_camel = new StaticArray<f64>(256)\nconst curveSinFull_25 = new StaticArray<f64>(256)\nconst curveSinFull_5 = new StaticArray<f64>(256)\nconst curveSinFull_1 = new StaticArray<f64>(256)\nconst curve_sin_mid_pow = new StaticArray<f64>(256)\n\nconst curve_gamma_up_0_25 = new StaticArray<f64>(256)\nconst curve_gamma_up_0_50 = new StaticArray<f64>(256)\nconst curve_gamma_up_1 = new StaticArray<f64>(256)\nconst curve_gamma_up_1_50 = new StaticArray<f64>(256)\nconst curve_gamma_up_2 = new StaticArray<f64>(256)\n\nconst curve_gamma_down_0_25 = new StaticArray<f64>(256)\nconst curve_gamma_down_0_50 = new StaticArray<f64>(256)\nconst curve_gamma_down_1 = new StaticArray<f64>(256)\nconst curve_gamma_down_1_50 = new StaticArray<f64>(256)\nconst curve_gamma_down_2 = new StaticArray<f64>(256)\n\nexport function initData (_width: i32, _height: i32, _totalViews: i32): void {\n\n  width = _width\n  height = _height\n  channelLength = width * height\n  viewLength = channelLength * 4\n\n  const bytesPerPage = 64 * 1024 // 65.536\n  let bytesNeeded = (viewLength * _totalViews) + (256 * 4 * 3 * _totalViews) + (256 * 4 * 3 *  _totalViews)\n  bytesNeeded += (2 * 101 * 3 * 256) // CLip cache\n  bytesNeeded += (201 * 256) // Temp cache\n  bytesNeeded += (201 * 256) + (201 * 256 * 256) + (201 * 256 * 256) + (201 * 256 * 256) // Light cache\n\n  const pagesNeeded: i32 = <i32> Math.ceil(bytesNeeded / bytesPerPage) + 500\n\n  memory.grow(pagesNeeded)\n\n  luma_strength_r = [1 / 3, 0.299, 0.2126, 0.2627][luma_mode]\n  luma_strength_g = [1 / 3, 0.587, 0.7152, 0.6780][luma_mode]\n  luma_strength_b = [1 / 3, 0.114, 0.0722, 0.0593][luma_mode]\n\n  for (let i = 0; i < _totalViews; i++) {\n    views[i] =  new Uint8ClampedArray(viewLength)\n  }\n  for (let i = 0; i < _totalViews; i++) {\n    counts[i] = new StaticArray<Uint32Array>(3)\n    for (let channel = 0; channel < 3; channel++) {\n      counts[i][channel] = new Uint32Array(256)\n    }\n  }\n  for (let i = 0; i < _totalViews; i++) {\n    displayCounts[i] = new StaticArray<Uint8Array>(3)\n    for (let channel = 0; channel < 3; channel++) {\n      displayCounts[i][channel] = new Uint8Array(256)\n    }\n  }\n\n  const valsLineUpFromPoint1 = [0.09123307198859587, 0.0947968638631504, 0.09836065573770492, 0.10192444761225944, 0.10548823948681396, 0.1090520313613685, 0.11261582323592302, 0.11617961511047754, 0.11974340698503207, 0.1233071988595866, 0.12687099073414113, 0.13043478260869565, 0.13399857448325017, 0.1375623663578047, 0.14112615823235922, 0.14468995010691374, 0.1482537419814683, 0.1518175338560228, 0.15538132573057734, 0.15894511760513186, 0.16250890947968638, 0.1660727013542409, 0.16963649322879543, 0.17320028510334995, 0.17676407697790447, 0.18032786885245902, 0.18389166072701355, 0.18745545260156807, 0.1910192444761226, 0.1945830363506771, 0.19814682822523164, 0.20171062009978616, 0.20527441197434068, 0.2088382038488952, 0.21240199572344975, 0.21596578759800428, 0.2195295794725588, 0.22309337134711332, 0.22665716322166785, 0.23022095509622234, 0.23378474697077686, 0.23734853884533139, 0.2409123307198859, 0.24447612259444046, 0.24803991446899498, 0.2516037063435495, 0.255167498218104, 0.25873129009265855, 0.2622950819672131, 0.2658588738417676, 0.2694226657163221, 0.27298645759087664, 0.27655024946543116, 0.2801140413399857, 0.2836778332145402, 0.28724162508909473, 0.29080541696364925, 0.29436920883820383, 0.29793300071275836, 0.3014967925873129, 0.3050605844618674, 0.3086243763364219, 0.31218816821097645, 0.31575196008553097, 0.3193157519600855, 0.32287954383464, 0.32644333570919454, 0.33000712758374906, 0.3335709194583036, 0.3371347113328581, 0.34069850320741263, 0.34426229508196715, 0.3478260869565217, 0.3513898788310762, 0.3549536707056307, 0.3585174625801853, 0.3620812544547398, 0.36564504632929434, 0.36920883820384887, 0.3727726300784034, 0.3763364219529579, 0.37990021382751243, 0.38346400570206696, 0.3870277975766215, 0.390591589451176, 0.3941553813257305, 0.39771917320028505, 0.40128296507483957, 0.4048467569493941, 0.4084105488239486, 0.41197434069850314, 0.41553813257305766, 0.4191019244476122, 0.42266571632216676, 0.4262295081967213, 0.4297933000712758, 0.43335709194583033, 0.43692088382038485, 0.4404846756949394, 0.4440484675694939, 0.4476122594440484, 0.45117605131860294, 0.45473984319315747, 0.458303635067712, 0.4618674269422665, 0.46543121881682104, 0.46899501069137556, 0.4725588025659301, 0.4761225944404846, 0.4796863863150391, 0.48325017818959365, 0.4868139700641482, 0.49037776193870275, 0.4939415538132573, 0.4975053456878118, 0.5010691375623663, 0.5046329294369208, 0.5081967213114753, 0.5117605131860299, 0.5153243050605844, 0.5188880969351389, 0.5224518888096935, 0.526015680684248, 0.5295794725588026, 0.533143264433357, 0.5367070563079116, 0.5402708481824661, 0.5438346400570206, 0.5473984319315751, 0.5509622238061297, 0.5545260156806842, 0.5580898075552387, 0.5616535994297932, 0.5652173913043478, 0.5687811831789022, 0.5723449750534568, 0.5759087669280113, 0.5794725588025659, 0.5830363506771203, 0.5866001425516749, 0.5901639344262295, 0.593727726300784, 0.5972915181753385, 0.600855310049893, 0.6044191019244476, 0.607982893799002, 0.6115466856735566, 0.6151104775481111, 0.6186742694226657, 0.6222380612972201, 0.6258018531717747, 0.6293656450463292, 0.6329294369208838, 0.6364932287954382, 0.6400570206699928, 0.6436208125445473, 0.6471846044191019, 0.6507483962936564, 0.6543121881682109, 0.6578759800427655, 0.66143977191732, 0.6650035637918745, 0.668567355666429, 0.6721311475409836, 0.675694939415538, 0.6792587312900926, 0.6828225231646471, 0.6863863150392017, 0.6899501069137561, 0.6935138987883107, 0.6970776906628652, 0.7006414825374198, 0.7042052744119742, 0.7077690662865288, 0.7113328581610833, 0.7148966500356378, 0.7184604419101924, 0.7220242337847469, 0.7255880256593015, 0.7291518175338559, 0.7327156094084105, 0.736279401282965, 0.7398431931575196, 0.743406985032074, 0.7469707769066286, 0.7505345687811831, 0.7540983606557377, 0.7576621525302921, 0.7612259444048467, 0.7647897362794012, 0.7683535281539557, 0.7719173200285102, 0.7754811119030648, 0.7790449037776193, 0.7826086956521738, 0.7861724875267284, 0.7897362794012829, 0.7933000712758375, 0.7968638631503919, 0.8004276550249465, 0.803991446899501, 0.8075552387740556, 0.81111903064861, 0.8146828225231646, 0.8182466143977191, 0.8218104062722736, 0.8253741981468281, 0.8289379900213827, 0.8325017818959372, 0.8360655737704917, 0.8396293656450462, 0.8431931575196008, 0.8467569493941554, 0.8503207412687098, 0.8538845331432644, 0.8574483250178189, 0.8610121168923734, 0.8645759087669279, 0.8681397006414825, 0.871703492516037, 0.8752672843905915, 0.878831076265146, 0.8823948681397006, 0.885958660014255, 0.8895224518888096, 0.8930862437633641, 0.8966500356379187, 0.9002138275124731, 0.9037776193870277, 0.9073414112615822, 0.9109052031361368, 0.9144689950106913, 0.9180327868852459, 0.9215965787598005, 0.925160370634355, 0.9287241625089095, 0.932287954383464, 0.9358517462580186, 0.9394155381325731, 0.9429793300071276, 0.9465431218816821, 0.9501069137562367, 0.9536707056307911, 0.9572344975053457, 0.9607982893799002, 0.9643620812544548, 0.9679258731290092, 0.9714896650035638, 0.9750534568781183, 0.9786172487526729, 0.9821810406272273, 0.9857448325017819, 0.9893086243763365, 0.992872416250891, 0.9964362081254455, 1]\n  const valsLineDownToPoint1 = [1, 0.9964362081254455, 0.992872416250891, 0.9893086243763365, 0.9857448325017819, 0.9821810406272273, 0.9786172487526729, 0.9750534568781183, 0.9714896650035638, 0.9679258731290092, 0.9643620812544548, 0.9607982893799002, 0.9572344975053457, 0.9536707056307911, 0.9501069137562367, 0.9465431218816821, 0.9429793300071276, 0.9394155381325731, 0.9358517462580186, 0.932287954383464, 0.9287241625089095, 0.925160370634355, 0.9215965787598005, 0.9180327868852459, 0.9144689950106913, 0.9109052031361368, 0.9073414112615822, 0.9037776193870277, 0.9002138275124731, 0.8966500356379187, 0.8930862437633641, 0.8895224518888096, 0.885958660014255, 0.8823948681397006, 0.878831076265146, 0.8752672843905915, 0.871703492516037, 0.8681397006414825, 0.8645759087669279, 0.8610121168923734, 0.8574483250178189, 0.8538845331432644, 0.8503207412687098, 0.8467569493941554, 0.8431931575196008, 0.8396293656450462, 0.8360655737704917, 0.8325017818959372, 0.8289379900213827, 0.8253741981468281, 0.8218104062722736, 0.8182466143977191, 0.8146828225231646, 0.81111903064861, 0.8075552387740556, 0.803991446899501, 0.8004276550249465, 0.7968638631503919, 0.7933000712758375, 0.7897362794012829, 0.7861724875267284, 0.7826086956521738, 0.7790449037776193, 0.7754811119030648, 0.7719173200285102, 0.7683535281539557, 0.7647897362794012, 0.7612259444048467, 0.7576621525302921, 0.7540983606557377, 0.7505345687811831, 0.7469707769066286, 0.743406985032074, 0.7398431931575196, 0.736279401282965, 0.7327156094084105, 0.7291518175338559, 0.7255880256593015, 0.7220242337847469, 0.7184604419101924, 0.7148966500356378, 0.7113328581610833, 0.7077690662865288, 0.7042052744119742, 0.7006414825374198, 0.6970776906628652, 0.6935138987883107, 0.6899501069137561, 0.6863863150392017, 0.6828225231646471, 0.6792587312900926, 0.675694939415538, 0.6721311475409836, 0.668567355666429, 0.6650035637918745, 0.66143977191732, 0.6578759800427655, 0.6543121881682109, 0.6507483962936564, 0.6471846044191019, 0.6436208125445473, 0.6400570206699928, 0.6364932287954382, 0.6329294369208838, 0.6293656450463292, 0.6258018531717747, 0.6222380612972201, 0.6186742694226657, 0.6151104775481111, 0.6115466856735566, 0.607982893799002, 0.6044191019244476, 0.600855310049893, 0.5972915181753385, 0.593727726300784, 0.5901639344262295, 0.5866001425516749, 0.5830363506771203, 0.5794725588025659, 0.5759087669280113, 0.5723449750534568, 0.5687811831789022, 0.5652173913043478, 0.5616535994297932, 0.5580898075552387, 0.5545260156806842, 0.5509622238061297, 0.5473984319315751, 0.5438346400570206, 0.5402708481824661, 0.5367070563079116, 0.533143264433357, 0.5295794725588026, 0.526015680684248, 0.5224518888096935, 0.5188880969351389, 0.5153243050605844, 0.5117605131860299, 0.5081967213114753, 0.5046329294369208, 0.5010691375623663, 0.4975053456878118, 0.4939415538132573, 0.49037776193870275, 0.4868139700641482, 0.48325017818959365, 0.4796863863150391, 0.4761225944404846, 0.4725588025659301, 0.46899501069137556, 0.46543121881682104, 0.4618674269422665, 0.458303635067712, 0.45473984319315747, 0.45117605131860294, 0.4476122594440484, 0.4440484675694939, 0.4404846756949394, 0.43692088382038485, 0.43335709194583033, 0.4297933000712758, 0.4262295081967213, 0.42266571632216676, 0.4191019244476122, 0.41553813257305766, 0.41197434069850314, 0.4084105488239486, 0.4048467569493941, 0.40128296507483957, 0.39771917320028505, 0.3941553813257305, 0.390591589451176, 0.3870277975766215, 0.38346400570206696, 0.37990021382751243, 0.3763364219529579, 0.3727726300784034, 0.36920883820384887, 0.36564504632929434, 0.3620812544547398, 0.3585174625801853, 0.3549536707056307, 0.3513898788310762, 0.3478260869565217, 0.34426229508196715, 0.34069850320741263, 0.3371347113328581, 0.3335709194583036, 0.33000712758374906, 0.32644333570919454, 0.32287954383464, 0.3193157519600855, 0.31575196008553097, 0.31218816821097645, 0.3086243763364219, 0.3050605844618674, 0.3014967925873129, 0.29793300071275836, 0.29436920883820383, 0.29080541696364925, 0.28724162508909473, 0.2836778332145402, 0.2801140413399857, 0.27655024946543116, 0.27298645759087664, 0.2694226657163221, 0.2658588738417676, 0.2622950819672131, 0.25873129009265855, 0.255167498218104, 0.2516037063435495, 0.24803991446899498, 0.24447612259444046, 0.2409123307198859, 0.23734853884533139, 0.23378474697077686, 0.23022095509622234, 0.22665716322166785, 0.22309337134711332, 0.2195295794725588, 0.21596578759800428, 0.21240199572344975, 0.2088382038488952, 0.20527441197434068, 0.20171062009978616, 0.19814682822523164, 0.1945830363506771, 0.1910192444761226, 0.18745545260156807, 0.18389166072701355, 0.18032786885245902, 0.17676407697790447, 0.17320028510334995, 0.16963649322879543, 0.1660727013542409, 0.16250890947968638, 0.15894511760513186, 0.15538132573057734, 0.1518175338560228, 0.1482537419814683, 0.14468995010691374, 0.14112615823235922, 0.1375623663578047, 0.13399857448325017, 0.13043478260869565, 0.12687099073414113, 0.1233071988595866, 0.11974340698503207, 0.11617961511047754, 0.11261582323592302, 0.1090520313613685, 0.10548823948681396, 0.10192444761225944, 0.09836065573770492, 0.0947968638631504, 0.09123307198859587]\n  \n  const valsLineUpFromPoint2 = [0.2, 0.2031372549019608, 0.2062745098039216, 0.20941176470588235, 0.21254901960784314, 0.21568627450980393, 0.21882352941176472, 0.2219607843137255, 0.22509803921568627, 0.22823529411764706, 0.23137254901960785, 0.23450980392156864, 0.23764705882352943, 0.2407843137254902, 0.243921568627451, 0.24705882352941178, 0.2501960784313726, 0.25333333333333335, 0.2564705882352941, 0.25960784313725493, 0.2627450980392157, 0.26588235294117646, 0.2690196078431373, 0.27215686274509804, 0.27529411764705886, 0.2784313725490196, 0.28156862745098044, 0.2847058823529412, 0.28784313725490196, 0.2909803921568628, 0.29411764705882354, 0.2972549019607843, 0.3003921568627451, 0.30352941176470594, 0.3066666666666667, 0.30980392156862746, 0.3129411764705883, 0.31607843137254904, 0.3192156862745098, 0.3223529411764706, 0.3254901960784314, 0.32862745098039214, 0.33176470588235296, 0.3349019607843138, 0.33803921568627454, 0.3411764705882353, 0.3443137254901961, 0.3474509803921569, 0.35058823529411764, 0.35372549019607846, 0.3568627450980393, 0.36, 0.3631372549019608, 0.3662745098039216, 0.3694117647058824, 0.37254901960784315, 0.37568627450980396, 0.3788235294117647, 0.3819607843137255, 0.3850980392156863, 0.3882352941176471, 0.3913725490196079, 0.39450980392156865, 0.39764705882352946, 0.4007843137254902, 0.403921568627451, 0.4070588235294118, 0.41019607843137257, 0.41333333333333333, 0.41647058823529415, 0.41960784313725497, 0.4227450980392157, 0.4258823529411765, 0.4290196078431373, 0.43215686274509807, 0.43529411764705883, 0.43843137254901965, 0.44156862745098047, 0.4447058823529412, 0.447843137254902, 0.45098039215686275, 0.45411764705882357, 0.45725490196078433, 0.46039215686274515, 0.4635294117647059, 0.46666666666666673, 0.4698039215686275, 0.47294117647058825, 0.47607843137254907, 0.47921568627450983, 0.48235294117647065, 0.4854901960784314, 0.4886274509803922, 0.491764705882353, 0.49490196078431375, 0.4980392156862746, 0.5011764705882353, 0.5043137254901962, 0.507450980392157, 0.5105882352941177, 0.5137254901960785, 0.5168627450980392, 0.52, 0.5231372549019608, 0.5262745098039217, 0.5294117647058825, 0.5325490196078432, 0.5356862745098039, 0.5388235294117647, 0.5419607843137255, 0.5450980392156863, 0.5482352941176472, 0.551372549019608, 0.5545098039215687, 0.5576470588235294, 0.5607843137254902, 0.563921568627451, 0.5670588235294118, 0.5701960784313727, 0.5733333333333334, 0.5764705882352942, 0.5796078431372549, 0.5827450980392157, 0.5858823529411765, 0.5890196078431373, 0.5921568627450982, 0.5952941176470589, 0.5984313725490197, 0.6015686274509804, 0.6047058823529412, 0.607843137254902, 0.6109803921568628, 0.6141176470588237, 0.6172549019607844, 0.6203921568627451, 0.6235294117647059, 0.6266666666666667, 0.6298039215686275, 0.6329411764705883, 0.636078431372549, 0.6392156862745099, 0.6423529411764706, 0.6454901960784314, 0.6486274509803922, 0.651764705882353, 0.6549019607843138, 0.6580392156862745, 0.6611764705882354, 0.6643137254901961, 0.6674509803921569, 0.6705882352941177, 0.6737254901960785, 0.6768627450980393, 0.68, 0.6831372549019609, 0.6862745098039216, 0.6894117647058824, 0.6925490196078432, 0.695686274509804, 0.6988235294117648, 0.7019607843137254, 0.7050980392156863, 0.7082352941176471, 0.7113725490196079, 0.7145098039215687, 0.7176470588235295, 0.7207843137254903, 0.7239215686274509, 0.7270588235294118, 0.7301960784313726, 0.7333333333333334, 0.7364705882352942, 0.739607843137255, 0.7427450980392158, 0.7458823529411764, 0.7490196078431373, 0.7521568627450981, 0.7552941176470589, 0.7584313725490197, 0.7615686274509805, 0.7647058823529413, 0.7678431372549019, 0.7709803921568628, 0.7741176470588236, 0.7772549019607844, 0.7803921568627452, 0.783529411764706, 0.7866666666666666, 0.7898039215686274, 0.7929411764705883, 0.7960784313725491, 0.7992156862745099, 0.8023529411764707, 0.8054901960784315, 0.8086274509803921, 0.8117647058823529, 0.8149019607843138, 0.8180392156862746, 0.8211764705882354, 0.8243137254901962, 0.827450980392157, 0.8305882352941176, 0.8337254901960784, 0.8368627450980393, 0.8400000000000001, 0.8431372549019609, 0.8462745098039217, 0.8494117647058825, 0.8525490196078431, 0.855686274509804, 0.8588235294117648, 0.8619607843137256, 0.8650980392156864, 0.8682352941176472, 0.8713725490196078, 0.8745098039215686, 0.8776470588235294, 0.8807843137254903, 0.8839215686274511, 0.8870588235294119, 0.8901960784313727, 0.8933333333333333, 0.8964705882352941, 0.899607843137255, 0.9027450980392158, 0.9058823529411766, 0.9090196078431374, 0.9121568627450982, 0.9152941176470588, 0.9184313725490196, 0.9215686274509804, 0.9247058823529413, 0.9278431372549021, 0.9309803921568629, 0.9341176470588237, 0.9372549019607843, 0.9403921568627451, 0.943529411764706, 0.9466666666666668, 0.9498039215686276, 0.9529411764705884, 0.956078431372549, 0.9592156862745098, 0.9623529411764706, 0.9654901960784315, 0.9686274509803923, 0.9717647058823531, 0.9749019607843139, 0.9780392156862745, 0.9811764705882353, 0.9843137254901961, 0.987450980392157, 0.9905882352941178, 0.9937254901960786, 0.9968627450980394, 1]\n  const valsLineDownToPoint2 = [1, 0.9968627450980394, 0.9937254901960786, 0.9905882352941178, 0.987450980392157, 0.9843137254901961, 0.9811764705882353, 0.9780392156862745, 0.9749019607843139, 0.9717647058823531, 0.9686274509803923, 0.9654901960784315, 0.9623529411764706, 0.9592156862745098, 0.956078431372549, 0.9529411764705884, 0.9498039215686276, 0.9466666666666668, 0.943529411764706, 0.9403921568627451, 0.9372549019607843, 0.9341176470588237, 0.9309803921568629, 0.9278431372549021, 0.9247058823529413, 0.9215686274509804, 0.9184313725490196, 0.9152941176470588, 0.9121568627450982, 0.9090196078431374, 0.9058823529411766, 0.9027450980392158, 0.899607843137255, 0.8964705882352941, 0.8933333333333333, 0.8901960784313727, 0.8870588235294119, 0.8839215686274511, 0.8807843137254903, 0.8776470588235294, 0.8745098039215686, 0.8713725490196078, 0.8682352941176472, 0.8650980392156864, 0.8619607843137256, 0.8588235294117648, 0.855686274509804, 0.8525490196078431, 0.8494117647058825, 0.8462745098039217, 0.8431372549019609, 0.8400000000000001, 0.8368627450980393, 0.8337254901960784, 0.8305882352941176, 0.827450980392157, 0.8243137254901962, 0.8211764705882354, 0.8180392156862746, 0.8149019607843138, 0.8117647058823529, 0.8086274509803921, 0.8054901960784315, 0.8023529411764707, 0.7992156862745099, 0.7960784313725491, 0.7929411764705883, 0.7898039215686274, 0.7866666666666666, 0.783529411764706, 0.7803921568627452, 0.7772549019607844, 0.7741176470588236, 0.7709803921568628, 0.7678431372549019, 0.7647058823529413, 0.7615686274509805, 0.7584313725490197, 0.7552941176470589, 0.7521568627450981, 0.7490196078431373, 0.7458823529411764, 0.7427450980392158, 0.739607843137255, 0.7364705882352942, 0.7333333333333334, 0.7301960784313726, 0.7270588235294118, 0.7239215686274509, 0.7207843137254903, 0.7176470588235295, 0.7145098039215687, 0.7113725490196079, 0.7082352941176471, 0.7050980392156863, 0.7019607843137254, 0.6988235294117648, 0.695686274509804, 0.6925490196078432, 0.6894117647058824, 0.6862745098039216, 0.6831372549019609, 0.68, 0.6768627450980393, 0.6737254901960785, 0.6705882352941177, 0.6674509803921569, 0.6643137254901961, 0.6611764705882354, 0.6580392156862745, 0.6549019607843138, 0.651764705882353, 0.6486274509803922, 0.6454901960784314, 0.6423529411764706, 0.6392156862745099, 0.636078431372549, 0.6329411764705883, 0.6298039215686275, 0.6266666666666667, 0.6235294117647059, 0.6203921568627451, 0.6172549019607844, 0.6141176470588237, 0.6109803921568628, 0.607843137254902, 0.6047058823529412, 0.6015686274509804, 0.5984313725490197, 0.5952941176470589, 0.5921568627450982, 0.5890196078431373, 0.5858823529411765, 0.5827450980392157, 0.5796078431372549, 0.5764705882352942, 0.5733333333333334, 0.5701960784313727, 0.5670588235294118, 0.563921568627451, 0.5607843137254902, 0.5576470588235294, 0.5545098039215687, 0.551372549019608, 0.5482352941176472, 0.5450980392156863, 0.5419607843137255, 0.5388235294117647, 0.5356862745098039, 0.5325490196078432, 0.5294117647058825, 0.5262745098039217, 0.5231372549019608, 0.52, 0.5168627450980392, 0.5137254901960785, 0.5105882352941177, 0.507450980392157, 0.5043137254901962, 0.5011764705882353, 0.4980392156862746, 0.49490196078431375, 0.491764705882353, 0.4886274509803922, 0.4854901960784314, 0.48235294117647065, 0.47921568627450983, 0.47607843137254907, 0.47294117647058825, 0.4698039215686275, 0.46666666666666673, 0.4635294117647059, 0.46039215686274515, 0.45725490196078433, 0.45411764705882357, 0.45098039215686275, 0.447843137254902, 0.4447058823529412, 0.44156862745098047, 0.43843137254901965, 0.43529411764705883, 0.43215686274509807, 0.4290196078431373, 0.4258823529411765, 0.4227450980392157, 0.41960784313725497, 0.41647058823529415, 0.41333333333333333, 0.41019607843137257, 0.4070588235294118, 0.403921568627451, 0.4007843137254902, 0.39764705882352946, 0.39450980392156865, 0.3913725490196079, 0.3882352941176471, 0.3850980392156863, 0.3819607843137255, 0.3788235294117647, 0.37568627450980396, 0.37254901960784315, 0.3694117647058824, 0.3662745098039216, 0.3631372549019608, 0.36, 0.3568627450980393, 0.35372549019607846, 0.35058823529411764, 0.3474509803921569, 0.3443137254901961, 0.3411764705882353, 0.33803921568627454, 0.3349019607843138, 0.33176470588235296, 0.32862745098039214, 0.3254901960784314, 0.3223529411764706, 0.3192156862745098, 0.31607843137254904, 0.3129411764705883, 0.30980392156862746, 0.3066666666666667, 0.30352941176470594, 0.3003921568627451, 0.2972549019607843, 0.29411764705882354, 0.2909803921568628, 0.28784313725490196, 0.2847058823529412, 0.28156862745098044, 0.2784313725490196, 0.27529411764705886, 0.27215686274509804, 0.2690196078431373, 0.26588235294117646, 0.2627450980392157, 0.25960784313725493, 0.2564705882352941, 0.25333333333333335, 0.2501960784313726, 0.24705882352941178, 0.243921568627451, 0.2407843137254902, 0.23764705882352943, 0.23450980392156864, 0.23137254901960785, 0.22823529411764706, 0.22509803921568627, 0.2219607843137255, 0.21882352941176472, 0.21568627450980393, 0.21254901960784314, 0.20941176470588235, 0.2062745098039216, 0.2031372549019608, 0.2]\n  \n  const valsLineDownToPoint75 = [1, 0.9990196078431373, 0.9980392156862745, 0.9970588235294118, 0.996078431372549, 0.9950980392156863, 0.9941176470588236, 0.9931372549019608, 0.9921568627450981, 0.9911764705882353, 0.9901960784313726, 0.9892156862745098, 0.9882352941176471, 0.9872549019607844, 0.9862745098039216, 0.9852941176470589, 0.9843137254901961, 0.9833333333333334, 0.9823529411764707, 0.9813725490196079, 0.9803921568627451, 0.9794117647058823, 0.9784313725490196, 0.9774509803921568, 0.9764705882352941, 0.9754901960784313, 0.9745098039215686, 0.9735294117647059, 0.9725490196078431, 0.9715686274509804, 0.9705882352941176, 0.9696078431372549, 0.9686274509803922, 0.9676470588235294, 0.9666666666666667, 0.9656862745098039, 0.9647058823529412, 0.9637254901960784, 0.9627450980392157, 0.961764705882353, 0.9607843137254902, 0.9598039215686275, 0.9588235294117647, 0.9578431372549019, 0.9568627450980391, 0.9558823529411764, 0.9549019607843137, 0.9539215686274509, 0.9529411764705882, 0.9519607843137254, 0.9509803921568627, 0.95, 0.9490196078431372, 0.9480392156862745, 0.9470588235294117, 0.946078431372549, 0.9450980392156862, 0.9441176470588235, 0.9431372549019608, 0.942156862745098, 0.9411764705882353, 0.9401960784313725, 0.9392156862745098, 0.9382352941176471, 0.9372549019607843, 0.9362745098039216, 0.9352941176470588, 0.9343137254901961, 0.9333333333333333, 0.9323529411764706, 0.9313725490196079, 0.9303921568627451, 0.9294117647058824, 0.9284313725490196, 0.9274509803921569, 0.9264705882352942, 0.9254901960784314, 0.9245098039215687, 0.9235294117647059, 0.9225490196078432, 0.9215686274509804, 0.9205882352941177, 0.919607843137255, 0.9186274509803922, 0.9176470588235294, 0.9166666666666666, 0.9156862745098039, 0.9147058823529411, 0.9137254901960784, 0.9127450980392157, 0.9117647058823529, 0.9107843137254902, 0.9098039215686274, 0.9088235294117647, 0.907843137254902, 0.9068627450980392, 0.9058823529411765, 0.9049019607843137, 0.903921568627451, 0.9029411764705882, 0.9019607843137255, 0.9009803921568628, 0.9, 0.8990196078431373, 0.8980392156862745, 0.8970588235294118, 0.8960784313725491, 0.8950980392156862, 0.8941176470588235, 0.8931372549019607, 0.892156862745098, 0.8911764705882352, 0.8901960784313725, 0.8892156862745098, 0.888235294117647, 0.8872549019607843, 0.8862745098039215, 0.8852941176470588, 0.884313725490196, 0.8833333333333333, 0.8823529411764706, 0.8813725490196078, 0.8803921568627451, 0.8794117647058823, 0.8784313725490196, 0.8774509803921569, 0.8764705882352941, 0.8754901960784314, 0.8745098039215686, 0.8735294117647059, 0.8725490196078431, 0.8715686274509804, 0.8705882352941177, 0.8696078431372549, 0.8686274509803922, 0.8676470588235294, 0.8666666666666667, 0.865686274509804, 0.8647058823529412, 0.8637254901960785, 0.8627450980392157, 0.861764705882353, 0.8607843137254902, 0.8598039215686275, 0.8588235294117648, 0.857843137254902, 0.8568627450980392, 0.8558823529411764, 0.8549019607843137, 0.8539215686274509, 0.8529411764705882, 0.8519607843137255, 0.8509803921568627, 0.85, 0.8490196078431372, 0.8480392156862745, 0.8470588235294118, 0.846078431372549, 0.8450980392156863, 0.8441176470588235, 0.8431372549019608, 0.842156862745098, 0.8411764705882353, 0.8401960784313726, 0.8392156862745098, 0.8382352941176471, 0.8372549019607843, 0.8362745098039216, 0.8352941176470589, 0.8343137254901961, 0.8333333333333334, 0.8323529411764706, 0.8313725490196079, 0.830392156862745, 0.8294117647058823, 0.8284313725490196, 0.8274509803921568, 0.8264705882352941, 0.8254901960784313, 0.8245098039215686, 0.8235294117647058, 0.8225490196078431, 0.8215686274509804, 0.8205882352941176, 0.8196078431372549, 0.8186274509803921, 0.8176470588235294, 0.8166666666666667, 0.8156862745098039, 0.8147058823529412, 0.8137254901960784, 0.8127450980392157, 0.8117647058823529, 0.8107843137254902, 0.8098039215686275, 0.8088235294117647, 0.807843137254902, 0.8068627450980392, 0.8058823529411765, 0.8049019607843138, 0.803921568627451, 0.8029411764705883, 0.8019607843137255, 0.8009803921568628, 0.8, 0.7990196078431373, 0.7980392156862746, 0.7970588235294118, 0.7960784313725491, 0.7950980392156862, 0.7941176470588235, 0.7931372549019607, 0.792156862745098, 0.7911764705882353, 0.7901960784313725, 0.7892156862745098, 0.788235294117647, 0.7872549019607843, 0.7862745098039216, 0.7852941176470588, 0.7843137254901961, 0.7833333333333333, 0.7823529411764706, 0.7813725490196078, 0.7803921568627451, 0.7794117647058824, 0.7784313725490196, 0.7774509803921569, 0.7764705882352941, 0.7754901960784314, 0.7745098039215687, 0.7735294117647059, 0.7725490196078432, 0.7715686274509804, 0.7705882352941177, 0.7696078431372549, 0.7686274509803922, 0.7676470588235295, 0.7666666666666667, 0.7656862745098039, 0.7647058823529411, 0.7637254901960784, 0.7627450980392156, 0.7617647058823529, 0.7607843137254902, 0.7598039215686274, 0.7588235294117647, 0.7578431372549019, 0.7568627450980392, 0.7558823529411764, 0.7549019607843137, 0.753921568627451, 0.7529411764705882, 0.7519607843137255, 0.7509803921568627, 0.75]\n  const valsLineDownToPoint5 = [1, 0.9980392156862745, 0.996078431372549, 0.9941176470588236, 0.9921568627450981, 0.9901960784313726, 0.9882352941176471, 0.9862745098039216, 0.9843137254901961, 0.9823529411764707, 0.9803921568627452, 0.9784313725490196, 0.9764705882352941, 0.9745098039215686, 0.9725490196078431, 0.9705882352941176, 0.9686274509803922, 0.9666666666666667, 0.9647058823529412, 0.9627450980392157, 0.9607843137254901, 0.9588235294117646, 0.9568627450980391, 0.9549019607843137, 0.9529411764705882, 0.9509803921568627, 0.9490196078431372, 0.9470588235294117, 0.9450980392156862, 0.9431372549019608, 0.9411764705882353, 0.9392156862745098, 0.9372549019607843, 0.9352941176470588, 0.9333333333333333, 0.9313725490196079, 0.9294117647058824, 0.9274509803921569, 0.9254901960784314, 0.9235294117647059, 0.9215686274509804, 0.919607843137255, 0.9176470588235295, 0.9156862745098039, 0.9137254901960784, 0.9117647058823529, 0.9098039215686274, 0.907843137254902, 0.9058823529411765, 0.903921568627451, 0.9019607843137255, 0.9, 0.8980392156862744, 0.896078431372549, 0.8941176470588235, 0.892156862745098, 0.8901960784313725, 0.888235294117647, 0.8862745098039215, 0.884313725490196, 0.8823529411764706, 0.8803921568627451, 0.8784313725490196, 0.8764705882352941, 0.8745098039215686, 0.8725490196078431, 0.8705882352941177, 0.8686274509803922, 0.8666666666666667, 0.8647058823529412, 0.8627450980392157, 0.8607843137254902, 0.8588235294117648, 0.8568627450980393, 0.8549019607843138, 0.8529411764705882, 0.8509803921568627, 0.8490196078431372, 0.8470588235294118, 0.8450980392156863, 0.8431372549019608, 0.8411764705882353, 0.8392156862745098, 0.8372549019607843, 0.8352941176470587, 0.8333333333333333, 0.8313725490196078, 0.8294117647058823, 0.8274509803921568, 0.8254901960784313, 0.8235294117647058, 0.8215686274509804, 0.8196078431372549, 0.8176470588235294, 0.8156862745098039, 0.8137254901960784, 0.8117647058823529, 0.8098039215686275, 0.807843137254902, 0.8058823529411765, 0.803921568627451, 0.8019607843137255, 0.8, 0.7980392156862746, 0.7960784313725491, 0.7941176470588236, 0.7921568627450981, 0.7901960784313725, 0.788235294117647, 0.7862745098039216, 0.7843137254901961, 0.7823529411764706, 0.7803921568627451, 0.7784313725490196, 0.7764705882352941, 0.7745098039215687, 0.7725490196078431, 0.7705882352941176, 0.7686274509803921, 0.7666666666666666, 0.7647058823529411, 0.7627450980392156, 0.7607843137254902, 0.7588235294117647, 0.7568627450980392, 0.7549019607843137, 0.7529411764705882, 0.7509803921568627, 0.7490196078431373, 0.7470588235294118, 0.7450980392156863, 0.7431372549019608, 0.7411764705882353, 0.7392156862745098, 0.7372549019607844, 0.7352941176470589, 0.7333333333333334, 0.7313725490196079, 0.7294117647058823, 0.7274509803921568, 0.7254901960784313, 0.7235294117647059, 0.7215686274509804, 0.7196078431372549, 0.7176470588235294, 0.7156862745098039, 0.7137254901960784, 0.711764705882353, 0.7098039215686275, 0.7078431372549019, 0.7058823529411764, 0.7039215686274509, 0.7019607843137254, 0.7, 0.6980392156862745, 0.696078431372549, 0.6941176470588235, 0.692156862745098, 0.6901960784313725, 0.6882352941176471, 0.6862745098039216, 0.6843137254901961, 0.6823529411764706, 0.6803921568627451, 0.6784313725490196, 0.6764705882352942, 0.6745098039215687, 0.6725490196078432, 0.6705882352941177, 0.6686274509803922, 0.6666666666666666, 0.6647058823529411, 0.6627450980392157, 0.6607843137254902, 0.6588235294117647, 0.6568627450980392, 0.6549019607843137, 0.6529411764705882, 0.6509803921568628, 0.6490196078431373, 0.6470588235294118, 0.6450980392156862, 0.6431372549019607, 0.6411764705882352, 0.6392156862745098, 0.6372549019607843, 0.6352941176470588, 0.6333333333333333, 0.6313725490196078, 0.6294117647058823, 0.6274509803921569, 0.6254901960784314, 0.6235294117647059, 0.6215686274509804, 0.6196078431372549, 0.6176470588235294, 0.615686274509804, 0.6137254901960785, 0.611764705882353, 0.6098039215686275, 0.607843137254902, 0.6058823529411764, 0.6039215686274509, 0.6019607843137255, 0.6, 0.5980392156862745, 0.596078431372549, 0.5941176470588235, 0.592156862745098, 0.5901960784313726, 0.5882352941176471, 0.5862745098039216, 0.5843137254901961, 0.5823529411764706, 0.580392156862745, 0.5784313725490196, 0.5764705882352941, 0.5745098039215686, 0.5725490196078431, 0.5705882352941176, 0.5686274509803921, 0.5666666666666667, 0.5647058823529412, 0.5627450980392157, 0.5607843137254902, 0.5588235294117647, 0.5568627450980392, 0.5549019607843138, 0.5529411764705883, 0.5509803921568628, 0.5490196078431373, 0.5470588235294118, 0.5450980392156862, 0.5431372549019607, 0.5411764705882353, 0.5392156862745098, 0.5372549019607843, 0.5352941176470588, 0.5333333333333333, 0.5313725490196078, 0.5294117647058824, 0.5274509803921569, 0.5254901960784314, 0.5235294117647059, 0.5215686274509804, 0.5196078431372549, 0.5176470588235295, 0.5156862745098039, 0.5137254901960784, 0.5117647058823529, 0.5098039215686274, 0.5078431372549019, 0.5058823529411764, 0.503921568627451, 0.5019607843137255, 0.5]\n\n  const valscurveExpUp = [0, 0.000007689379813213826, 0.00003075787402306851, 0.00006920654702224915, 0.00012303717307138307, 0.00019225223670882308, 0.00027685493332363365, 0.0003768491698936671, 0.0004922395658889522, 0.0006230314543387294, 0.0007692308830661299, 0.0009308446160880557, 0.001107880135183148, 0.0013003456416276205, 0.001508250058100069, 0.001731603030756479, 0.0019704149314765385, 0.0022246968602822603, 0.0024944606479309073, 0.002779718858682001, 0.0030804847932421886, 0.0033967724918884112, 0.003728596737769929, 0.004075973060393756, 0.004438917739292725, 0.004817447807880737, 0.005211581057494419, 0.005621336041626401, 0.006046732080350448, 0.006487789264942312, 0.006944528462698107, 0.007416971321952959, 0.00790514027730349, 0.008409058555036264, 0.008928750178766265, 0.009464239975287225, 0.01001555358063877, 0.010582717446393497, 0.011165758846166551, 0.0117647058823529, 0.012379587493095756, 0.013010433459490267, 0.013657274413026776, 0.014320141843278122, 0.014999068105835622, 0.0156940864304993, 0.016405230929725456, 0.0171325366073386, 0.01787603936751292, 0.018635776024027995, 0.019411784309804836, 0.020204102886728692, 0.021012771355764848, 0.02183783026737318, 0.022679321132229036, 0.023537286432256166, 0.024411769631980884, 0.025302815190212602, 0.026210468572059997, 0.02713477626129046, 0.028075785773040707, 0.029033545666887872, 0.0300081055602891, 0.03099951614239982, 0.03200782918827927, 0.03303309757349371, 0.03407537528912874, 0.035134717457217635, 0.036211180346602534, 0.03730482138923363, 0.038415699196923114, 0.03954387357856404, 0.040689405557826186, 0.041852357391343964, 0.043032792587409, 0.04423077592518099, 0.04544637347443348, 0.046679652615848055, 0.04793068206187323, 0.04919953187816517, 0.05048627350562718, 0.05179097978306402, 0.05311372497047295, 0.054454584772986814, 0.05581363636549119, 0.05719095841793631, 0.05858663112136431, 0.06000073621467361, 0.06143335701214636, 0.06288457843175832, 0.06435448702430169, 0.06584317100334136, 0.06735072027603661, 0.0688772264748524, 0.07042278299019222, 0.07198748500398144, 0.07357142952423346, 0.07517471542063181, 0.07679744346116169, 0.07843971634982838, 0.08010163876549758, 0.08178331740189904, 0.08348486100883157, 0.08520638043461404, 0.0869479886698239, 0.08870980089237201, 0.09049193451395887, 0.09229450922796456, 0.09411764705882308, 0.09596147241293695, 0.09782611213118841, 0.09971169554310577, 0.10161835452274937, 0.10354622354638077, 0.10549543975198239, 0.10746614300070201, 0.10945847594029179, 0.11147258407062499, 0.1135086158113674, 0.11556672257189271, 0.11764705882352877, 0.11974978217422994, 0.12187505344577387, 0.12402303675358595, 0.1261938995892985, 0.1283878129061613, 0.13060495120741966, 0.13284549263778722, 0.13510961907814534, 0.13739751624360586, 0.1397093737850852, 0.1420453853945418, 0.14440574891403646, 0.1467906664487888, 0.1492003444844061, 0.15163499400847225, 0.1540948306366977, 0.15658007474383817, 0.1590909515996023, 0.16162769150978284, 0.1641905299628572, 0.16677970778231554, 0.16939547128499355, 0.17203807244569957, 0.1747077690684421, 0.17740482496458598, 0.18012951013827838, 0.1828821009795123, 0.18566288046521384, 0.1884721383687621, 0.19131017147838003, 0.194177283824857, 0.19707378691909472, 0.19999999999999873, 0.20295625029327213, 0.20594287328170113, 0.20896021298756384, 0.2120086222678318, 0.21508846312288088, 0.2182001070194739, 0.22134393522883067, 0.22452033918065584, 0.22772972083405452, 0.23097249306633394, 0.23424908008075318, 0.2375599178343678, 0.24090545448719003, 0.24428615087398076, 0.24770248100008452, 0.2511549325628212, 0.2546440075000683, 0.258170222567789, 0.2617341099483942, 0.2653362178919829, 0.2689771113926577, 0.27265737290229586, 0.27637760308434534, 0.28013842161042846, 0.28394046800276895, 0.28778440252570836, 0.2916709071298629, 0.2956006864527758, 0.2995744688802595, 0.30359300767299824, 0.3076570821633897, 0.31176749902806655, 0.3159250936420387, 0.3201307315209597, 0.3243853098586461, 0.3286897591676632, 0.3330450450315682, 0.3374521699782602, 0.34191217548484465, 0.3464261441254983, 0.35099520187502586, 0.35562052058215476, 0.36030332062813675, 0.36504487378794714, 0.36984650631331106, 0.3747096022589854, 0.3796356070762176, 0.3846260315001372, 0.3896824557610623, 0.3948065341533953, 0.3999999999999968, 0.40526467105477704, 0.4106024553918115, 0.41601535783572097, 0.42150548699549373, 0.4270750629725557, 0.4327264258239403, 0.43846204487313356, 0.44428452897490434, 0.4501966378565646, 0.4562012946771501, 0.4623015999685416, 0.46850084714933626, 0.47480253983424814, 0.4812104112001281, 0.4877284457158252, 0.49436090359891205, 0.5011123484301365, 0.5079876784393722, 0.5149921620787308, 0.5221314786244544, 0.5294117647058774, 0.5368396678559104, 0.5444224084248541, 0.5521678515135409, 0.5600845909841463, 0.5681820481265581, 0.5764705882352883, 0.5849616592429661, 0.5936679577415273, 0.6026036293163572, 0.6117845122897319, 0.62122843696667, 0.6309555966739193, 0.6409890128576923, 0.651355125162457, 0.6620845502036374, 0.6732130720627421, 0.6847829574257389, 0.6968447358417524, 0.7094596636550261, 0.7227032230640886, 0.7366702436988197, 0.7514826742312847, 0.7673019027584689, 0.7843493790608879, 0.8029436152721243, 0.8235729901301478, 0.8470588235293918, 0.875000961172452, 0.9115253790377811, 0.9999999211504664]\n  const valscurveExpDown = [0.9999999211504664, 0.9115253790377811, 0.875000961172452, 0.8470588235293918, 0.8235729901301478, 0.8029436152721243, 0.7843493790608879, 0.7673019027584689, 0.7514826742312847, 0.7366702436988197, 0.7227032230640886, 0.7094596636550261, 0.6968447358417524, 0.6847829574257389, 0.6732130720627421, 0.6620845502036374, 0.651355125162457, 0.6409890128576923, 0.6309555966739193, 0.62122843696667, 0.6117845122897319, 0.6026036293163572, 0.5936679577415273, 0.5849616592429661, 0.5764705882352883, 0.5681820481265581, 0.5600845909841463, 0.5521678515135409, 0.5444224084248541, 0.5368396678559104, 0.5294117647058774, 0.5221314786244544, 0.5149921620787308, 0.5079876784393722, 0.5011123484301365, 0.49436090359891205, 0.4877284457158252, 0.4812104112001281, 0.47480253983424814, 0.46850084714933626, 0.4623015999685416, 0.4562012946771501, 0.4501966378565646, 0.44428452897490434, 0.43846204487313356, 0.4327264258239403, 0.4270750629725557, 0.42150548699549373, 0.41601535783572097, 0.4106024553918115, 0.40526467105477704, 0.3999999999999968, 0.3948065341533953, 0.3896824557610623, 0.3846260315001372, 0.3796356070762176, 0.3747096022589854, 0.36984650631331106, 0.36504487378794714, 0.36030332062813675, 0.35562052058215476, 0.35099520187502586, 0.3464261441254983, 0.34191217548484465, 0.3374521699782602, 0.3330450450315682, 0.3286897591676632, 0.3243853098586461, 0.3201307315209597, 0.3159250936420387, 0.31176749902806655, 0.3076570821633897, 0.30359300767299824, 0.2995744688802595, 0.2956006864527758, 0.2916709071298629, 0.28778440252570836, 0.28394046800276895, 0.28013842161042846, 0.27637760308434534, 0.27265737290229586, 0.2689771113926577, 0.2653362178919829, 0.2617341099483942, 0.258170222567789, 0.2546440075000683, 0.2511549325628212, 0.24770248100008452, 0.24428615087398076, 0.24090545448719003, 0.2375599178343678, 0.23424908008075318, 0.23097249306633394, 0.22772972083405452, 0.22452033918065584, 0.22134393522883067, 0.2182001070194739, 0.21508846312288088, 0.2120086222678318, 0.20896021298756384, 0.20594287328170113, 0.20295625029327213, 0.19999999999999873, 0.19707378691909472, 0.194177283824857, 0.19131017147838003, 0.1884721383687621, 0.18566288046521384, 0.1828821009795123, 0.18012951013827838, 0.17740482496458598, 0.1747077690684421, 0.17203807244569957, 0.16939547128499355, 0.16677970778231554, 0.1641905299628572, 0.16162769150978284, 0.1590909515996023, 0.15658007474383817, 0.1540948306366977, 0.15163499400847225, 0.1492003444844061, 0.1467906664487888, 0.14440574891403646, 0.1420453853945418, 0.1397093737850852, 0.13739751624360586, 0.13510961907814534, 0.13284549263778722, 0.13060495120741966, 0.1283878129061613, 0.1261938995892985, 0.12402303675358595, 0.12187505344577387, 0.11974978217422994, 0.11764705882352877, 0.11556672257189271, 0.1135086158113674, 0.11147258407062499, 0.10945847594029179, 0.10746614300070201, 0.10549543975198239, 0.10354622354638077, 0.10161835452274937, 0.09971169554310577, 0.09782611213118841, 0.09596147241293695, 0.09411764705882308, 0.09229450922796456, 0.09049193451395887, 0.08870980089237201, 0.0869479886698239, 0.08520638043461404, 0.08348486100883157, 0.08178331740189904, 0.08010163876549758, 0.07843971634982838, 0.07679744346116169, 0.07517471542063181, 0.07357142952423346, 0.07198748500398144, 0.07042278299019222, 0.0688772264748524, 0.06735072027603661, 0.06584317100334136, 0.06435448702430169, 0.06288457843175832, 0.06143335701214636, 0.06000073621467361, 0.05858663112136431, 0.05719095841793631, 0.05581363636549119, 0.054454584772986814, 0.05311372497047295, 0.05179097978306402, 0.05048627350562718, 0.04919953187816517, 0.04793068206187323, 0.046679652615848055, 0.04544637347443348, 0.04423077592518099, 0.043032792587409, 0.041852357391343964, 0.040689405557826186, 0.03954387357856404, 0.038415699196923114, 0.03730482138923363, 0.036211180346602534, 0.035134717457217635, 0.03407537528912874, 0.03303309757349371, 0.03200782918827927, 0.03099951614239982, 0.0300081055602891, 0.029033545666887872, 0.028075785773040707, 0.02713477626129046, 0.026210468572059997, 0.025302815190212602, 0.024411769631980884, 0.023537286432256166, 0.022679321132229036, 0.02183783026737318, 0.021012771355764848, 0.020204102886728692, 0.019411784309804836, 0.018635776024027995, 0.01787603936751292, 0.0171325366073386, 0.016405230929725456, 0.0156940864304993, 0.014999068105835622, 0.014320141843278122, 0.013657274413026776, 0.013010433459490267, 0.012379587493095756, 0.0117647058823529, 0.011165758846166551, 0.010582717446393497, 0.01001555358063877, 0.009464239975287225, 0.008928750178766265, 0.008409058555036264, 0.00790514027730349, 0.007416971321952959, 0.006944528462698107, 0.006487789264942312, 0.006046732080350448, 0.005621336041626401, 0.005211581057494419, 0.004817447807880737, 0.004438917739292725, 0.004075973060393756, 0.003728596737769929, 0.0033967724918884112, 0.0030804847932421886, 0.002779718858682001, 0.0024944606479309073, 0.0022246968602822603, 0.0019704149314765385, 0.001731603030756479, 0.001508250058100069, 0.0013003456416276205, 0.001107880135183148, 0.0009308446160880557, 0.0007692308830661299, 0.0006230314543387294, 0.0004922395658889522, 0.0003768491698936671, 0.00027685493332363365, 0.00019225223670882308, 0.00012303717307138307, 0.00006920654702224915, 0.00003075787402306851, 0.000007689379813213826, 0]\n\n  const valsCurveCircleBigUp = [0, 0.08847462096218382, 0.12499903882752314, 0.1529411764705879, 0.17642700986983487, 0.1970563847278602, 0.215650620939098, 0.23269809724151794, 0.24851732576870328, 0.26332975630116884, 0.27729677693590055, 0.2905403363449635, 0.3031552641582378, 0.31521704257425176, 0.32678692793724906, 0.3379154497963541, 0.34864487483753454, 0.35901098714229973, 0.3690444033260728, 0.3787715630333224, 0.3882154877102607, 0.3973963706836355, 0.4063320422584658, 0.41503834075702717, 0.4235294117647052, 0.4318179518734354, 0.4399154090158473, 0.44783214848645286, 0.45557759157513983, 0.46316033214408353, 0.47058823529411686, 0.4778685213755398, 0.4850078379212637, 0.4920123215606224, 0.49888765156985804, 0.5056390964010825, 0.5122715542841696, 0.5187895887998668, 0.5251974601657468, 0.5314991528506589, 0.5376984000314535, 0.5437987053228451, 0.5498033621434308, 0.555715471025091, 0.5615379551268618, 0.5672735741760553, 0.5729249370274399, 0.5784945130045018, 0.5839846421642746, 0.5893975446081842, 0.5947353289452187, 0.5999999999999991, 0.6051934658466006, 0.6103175442389336, 0.6153739684998588, 0.6203643929237784, 0.6252903977410107, 0.630153493686685, 0.6349551262120491, 0.6396966793718595, 0.6443794794178415, 0.6490047981249704, 0.6535738558744981, 0.6580878245151518, 0.6625478300217362, 0.6669549549684284, 0.6713102408323334, 0.6756146901413504, 0.679869268479037, 0.6840749063579581, 0.6882325009719301, 0.6923429178366071, 0.6964069923269985, 0.7004255311197373, 0.7043993135472212, 0.708329092870134, 0.7122155974742886, 0.7160595319972279, 0.7198615783895685, 0.7236223969156518, 0.7273426270977011, 0.7310228886073393, 0.7346637821080142, 0.7382658900516029, 0.7418297774322081, 0.7453559924999289, 0.748845067437176, 0.7522975189999126, 0.7557138491260165, 0.7590945455128074, 0.7624400821656295, 0.7657509199192442, 0.7690275069336635, 0.7722702791659428, 0.7754796608193417, 0.7786560647711668, 0.7817998929805237, 0.7849115368771167, 0.7879913777321658, 0.7910397870124337, 0.7940571267182965, 0.7970437497067255, 0.7999999999999989, 0.8029262130809031, 0.8058227161751408, 0.8086898285216177, 0.8115278616312358, 0.8143371195347839, 0.8171178990204855, 0.8198704898617195, 0.8225951750354119, 0.8252922309315558, 0.8279619275542984, 0.8306045287150043, 0.8332202922176823, 0.8358094700371407, 0.838372308490215, 0.8409090484003958, 0.8434199252561598, 0.8459051693633003, 0.8483650059915258, 0.850799655515592, 0.8532093335512092, 0.8555942510859617, 0.8579546146054563, 0.8602906262149129, 0.8626024837563924, 0.8648903809218529, 0.867154507362211, 0.8693950487925786, 0.871612187093837, 0.8738061004106998, 0.8759769632464124, 0.8781249465542244, 0.8802502178257684, 0.8823529411764696, 0.8844332774281056, 0.8864913841886309, 0.8885274159293733, 0.8905415240597065, 0.8925338569992964, 0.894504560248016, 0.8964537764536178, 0.8983816454772491, 0.9002883044568927, 0.90217388786881, 0.9040385275870615, 0.9058823529411755, 0.907705490772034, 0.9095080654860397, 0.9112901991076265, 0.9130520113301748, 0.9147936195653846, 0.9165151389911671, 0.9182166825980996, 0.9198983612345011, 0.9215602836501703, 0.923202556538837, 0.924825284579367, 0.9264285704757652, 0.9280125149960173, 0.9295772170098066, 0.9311227735251464, 0.9326492797239622, 0.9341568289966574, 0.9356455129756972, 0.9371154215682405, 0.9385666429878525, 0.9399992637853253, 0.9414133688786346, 0.9428090415820625, 0.9441863636345077, 0.9455454152270122, 0.9468862750295259, 0.948209020216935, 0.9495137264943718, 0.9508004681218337, 0.9520693179381258, 0.953320347384151, 0.9545536265255655, 0.9557692240748181, 0.9569672074125901, 0.958147642608655, 0.9593105944421729, 0.9604561264214351, 0.961584300803076, 0.9626951786107656, 0.9637888196533967, 0.9648652825427815, 0.9659246247108705, 0.9669669024265054, 0.96799217081172, 0.9690004838575994, 0.96999189443971, 0.9709664543331114, 0.9719242142269585, 0.9728652237387088, 0.9737895314279392, 0.9746971848097866, 0.9755882303680183, 0.9764627135677431, 0.9773206788677703, 0.978162169732626, 0.9789872286442345, 0.9797958971132706, 0.9805882156901945, 0.9813642239759713, 0.9821239606324864, 0.9828674633926608, 0.983594769070274, 0.9843059135695001, 0.9850009318941638, 0.9856798581567214, 0.9863427255869727, 0.9869895665405092, 0.9876204125069037, 0.9882352941176467, 0.988834241153833, 0.9894172825536061, 0.9899844464193608, 0.9905357600247123, 0.9910712498212333, 0.9915909414449632, 0.9920948597226961, 0.9925830286780466, 0.9930554715373016, 0.9935122107350574, 0.9939532679196492, 0.9943786639583733, 0.9947884189425052, 0.9951825521921189, 0.9955610822607069, 0.995924026939606, 0.9962714032622298, 0.9966032275081113, 0.9969195152067575, 0.9972202811413178, 0.9975055393520689, 0.9977753031397175, 0.9980295850685234, 0.9982683969692434, 0.9984917499418998, 0.9986996543583723, 0.9988921198648167, 0.9990691553839118, 0.9992307691169338, 0.9993769685456612, 0.9995077604341109, 0.9996231508301062, 0.9997231450666764, 0.9998077477632911, 0.9998769628269285, 0.9999307934529778, 0.9999692421259769, 0.9999923106201868, 1]\n  const valsCurveCircleBigDown = [1, 0.9999923106201868, 0.9999692421259769, 0.9999307934529778, 0.9998769628269285, 0.9998077477632911, 0.9997231450666764, 0.9996231508301062, 0.9995077604341109, 0.9993769685456612, 0.9992307691169338, 0.9990691553839118, 0.9988921198648167, 0.9986996543583723, 0.9984917499418998, 0.9982683969692434, 0.9980295850685234, 0.9977753031397175, 0.9975055393520689, 0.9972202811413178, 0.9969195152067575, 0.9966032275081113, 0.9962714032622298, 0.995924026939606, 0.9955610822607069, 0.9951825521921189, 0.9947884189425052, 0.9943786639583733, 0.9939532679196492, 0.9935122107350574, 0.9930554715373016, 0.9925830286780466, 0.9920948597226961, 0.9915909414449632, 0.9910712498212333, 0.9905357600247123, 0.9899844464193608, 0.9894172825536061, 0.988834241153833, 0.9882352941176467, 0.9876204125069037, 0.9869895665405092, 0.9863427255869727, 0.9856798581567214, 0.9850009318941638, 0.9843059135695001, 0.983594769070274, 0.9828674633926608, 0.9821239606324864, 0.9813642239759713, 0.9805882156901945, 0.9797958971132706, 0.9789872286442345, 0.978162169732626, 0.9773206788677703, 0.9764627135677431, 0.9755882303680183, 0.9746971848097866, 0.9737895314279392, 0.9728652237387088, 0.9719242142269585, 0.9709664543331114, 0.96999189443971, 0.9690004838575994, 0.96799217081172, 0.9669669024265054, 0.9659246247108705, 0.9648652825427815, 0.9637888196533967, 0.9626951786107656, 0.961584300803076, 0.9604561264214351, 0.9593105944421729, 0.958147642608655, 0.9569672074125901, 0.9557692240748181, 0.9545536265255655, 0.953320347384151, 0.9520693179381258, 0.9508004681218337, 0.9495137264943718, 0.948209020216935, 0.9468862750295259, 0.9455454152270122, 0.9441863636345077, 0.9428090415820625, 0.9414133688786346, 0.9399992637853253, 0.9385666429878525, 0.9371154215682405, 0.9356455129756972, 0.9341568289966574, 0.9326492797239622, 0.9311227735251464, 0.9295772170098066, 0.9280125149960173, 0.9264285704757652, 0.924825284579367, 0.923202556538837, 0.9215602836501703, 0.9198983612345011, 0.9182166825980996, 0.9165151389911671, 0.9147936195653846, 0.9130520113301748, 0.9112901991076265, 0.9095080654860397, 0.907705490772034, 0.9058823529411755, 0.9040385275870615, 0.90217388786881, 0.9002883044568927, 0.8983816454772491, 0.8964537764536178, 0.894504560248016, 0.8925338569992964, 0.8905415240597065, 0.8885274159293733, 0.8864913841886309, 0.8844332774281056, 0.8823529411764696, 0.8802502178257684, 0.8781249465542244, 0.8759769632464124, 0.8738061004106998, 0.871612187093837, 0.8693950487925786, 0.867154507362211, 0.8648903809218529, 0.8626024837563924, 0.8602906262149129, 0.8579546146054563, 0.8555942510859617, 0.8532093335512092, 0.850799655515592, 0.8483650059915258, 0.8459051693633003, 0.8434199252561598, 0.8409090484003958, 0.838372308490215, 0.8358094700371407, 0.8332202922176823, 0.8306045287150043, 0.8279619275542984, 0.8252922309315558, 0.8225951750354119, 0.8198704898617195, 0.8171178990204855, 0.8143371195347839, 0.8115278616312358, 0.8086898285216177, 0.8058227161751408, 0.8029262130809031, 0.7999999999999989, 0.7970437497067255, 0.7940571267182965, 0.7910397870124337, 0.7879913777321658, 0.7849115368771167, 0.7817998929805237, 0.7786560647711668, 0.7754796608193417, 0.7722702791659428, 0.7690275069336635, 0.7657509199192442, 0.7624400821656295, 0.7590945455128074, 0.7557138491260165, 0.7522975189999126, 0.748845067437176, 0.7453559924999289, 0.7418297774322081, 0.7382658900516029, 0.7346637821080142, 0.7310228886073393, 0.7273426270977011, 0.7236223969156518, 0.7198615783895685, 0.7160595319972279, 0.7122155974742886, 0.708329092870134, 0.7043993135472212, 0.7004255311197373, 0.6964069923269985, 0.6923429178366071, 0.6882325009719301, 0.6840749063579581, 0.679869268479037, 0.6756146901413504, 0.6713102408323334, 0.6669549549684284, 0.6625478300217362, 0.6580878245151518, 0.6535738558744981, 0.6490047981249704, 0.6443794794178415, 0.6396966793718595, 0.6349551262120491, 0.630153493686685, 0.6252903977410107, 0.6203643929237784, 0.6153739684998588, 0.6103175442389336, 0.6051934658466006, 0.5999999999999991, 0.5947353289452187, 0.5893975446081842, 0.5839846421642746, 0.5784945130045018, 0.5729249370274399, 0.5672735741760553, 0.5615379551268618, 0.555715471025091, 0.5498033621434308, 0.5437987053228451, 0.5376984000314535, 0.5314991528506589, 0.5251974601657468, 0.5187895887998668, 0.5122715542841696, 0.5056390964010825, 0.49888765156985804, 0.4920123215606224, 0.4850078379212637, 0.4778685213755398, 0.47058823529411686, 0.46316033214408353, 0.45557759157513983, 0.44783214848645286, 0.4399154090158473, 0.4318179518734354, 0.4235294117647052, 0.41503834075702717, 0.4063320422584658, 0.3973963706836355, 0.3882154877102607, 0.3787715630333224, 0.3690444033260728, 0.35901098714229973, 0.34864487483753454, 0.3379154497963541, 0.32678692793724906, 0.31521704257425176, 0.3031552641582378, 0.2905403363449635, 0.27729677693590055, 0.26332975630116884, 0.24851732576870328, 0.23269809724151794, 0.215650620939098, 0.1970563847278602, 0.17642700986983487, 0.1529411764705879, 0.12499903882752314, 0.08847462096218382, 0]\n\n  const valsCurveRootMidUp = [0.5, 0.5442373104810919, 0.5624995194137615, 0.576470588235294, 0.5882135049349174, 0.5985281923639301, 0.607825310469549, 0.616349048620759, 0.6242586628843516, 0.6316648781505845, 0.6386483884679502, 0.6452701681724817, 0.6515776320791189, 0.6576085212871259, 0.6633934639686245, 0.6689577248981771, 0.6743224374187673, 0.6795054935711499, 0.6845222016630363, 0.6893857815166612, 0.6941077438551304, 0.6986981853418177, 0.7031660211292329, 0.7075191703785135, 0.7117647058823526, 0.7159089759367177, 0.7199577045079236, 0.7239160742432265, 0.7277887957875699, 0.7315801660720418, 0.7352941176470584, 0.7389342606877699, 0.7425039189606318, 0.7460061607803112, 0.749443825784929, 0.7528195482005413, 0.7561357771420848, 0.7593947943999334, 0.7625987300828734, 0.7657495764253295, 0.7688492000157268, 0.7718993526614226, 0.7749016810717154, 0.7778577355125456, 0.7807689775634309, 0.7836367870880276, 0.7864624685137199, 0.7892472565022509, 0.7919923210821374, 0.7946987723040921, 0.7973676644726093, 0.7999999999999996, 0.8025967329233004, 0.8051587721194668, 0.8076869842499295, 0.8101821964618892, 0.8126451988705053, 0.8150767468433425, 0.8174775631060245, 0.8198483396859297, 0.8221897397089207, 0.8245023990624851, 0.8267869279372491, 0.8290439122575759, 0.8312739150108681, 0.8334774774842142, 0.8356551204161666, 0.8378073450706752, 0.8399346342395184, 0.842037453178979, 0.8441162504859651, 0.8461714589183036, 0.8482034961634992, 0.8502127655598686, 0.8521996567736105, 0.854164546435067, 0.8561077987371444, 0.858029765998614, 0.8599307891947843, 0.8618111984578258, 0.8636713135488505, 0.8655114443036697, 0.8673318910540071, 0.8691329450258014, 0.870914888716104, 0.8726779962499644, 0.874422533718588, 0.8761487594999563, 0.8778569245630082, 0.8795472727564038, 0.8812200410828148, 0.882875459959622, 0.8845137534668317, 0.8861351395829714, 0.8877398304096709, 0.8893280323855834, 0.8908999464902618, 0.8924557684385583, 0.8939956888660829, 0.8955198935062169, 0.8970285633591483, 0.8985218748533628, 0.8999999999999995, 0.9014631065404515, 0.9029113580875704, 0.9043449142608089, 0.9057639308156179, 0.907168559767392, 0.9085589495102427, 0.9099352449308598, 0.911297587517706, 0.9126461154657779, 0.9139809637771492, 0.9153022643575022, 0.9166101461088412, 0.9179047350185703, 0.9191861542451075, 0.9204545242001979, 0.9217099626280799, 0.9229525846816502, 0.9241825029957629, 0.925399827757796, 0.9266046667756046, 0.9277971255429809, 0.9289773073027281, 0.9301453131074564, 0.9313012418781962, 0.9324451904609264, 0.9335772536811056, 0.9346975243962893, 0.9358060935469186, 0.9369030502053499, 0.9379884816232062, 0.9390624732771122, 0.9401251089128841, 0.9411764705882348, 0.9422166387140528, 0.9432456920943155, 0.9442637079646867, 0.9452707620298533, 0.9462669284996482, 0.947252280124008, 0.9482268882268089, 0.9491908227386245, 0.9501441522284464, 0.951086943934405, 0.9520192637935307, 0.9529411764705877, 0.953852745386017, 0.9547540327430198, 0.9556450995538133, 0.9565260056650874, 0.9573968097826924, 0.9582575694955835, 0.9591083412990498, 0.9599491806172505, 0.9607801418250852, 0.9616012782694185, 0.9624126422896835, 0.9632142852378827, 0.9640062574980086, 0.9647886085049033, 0.9655613867625732, 0.9663246398619811, 0.9670784144983287, 0.9678227564878485, 0.9685577107841202, 0.9692833214939263, 0.9699996318926627, 0.9707066844393173, 0.9714045207910312, 0.9720931818172538, 0.9727727076135061, 0.973443137514763, 0.9741045101084675, 0.9747568632471859, 0.9754002340609169, 0.9760346589690629, 0.9766601736920755, 0.9772768132627827, 0.9778846120374091, 0.9784836037062951, 0.9790738213043275, 0.9796552972210865, 0.9802280632107175, 0.980792150401538, 0.9813475893053828, 0.9818944098266984, 0.9824326412713907, 0.9829623123554352, 0.9834834512132526, 0.98399608540586, 0.9845002419287997, 0.9849959472198551, 0.9854832271665557, 0.9859621071134792, 0.9864326118693544, 0.9868947657139696, 0.9873485924048933, 0.9877941151840092, 0.9882313567838715, 0.9886603394338851, 0.989081084866313, 0.9894936143221172, 0.9898979485566353, 0.9902941078450973, 0.9906821119879856, 0.9910619803162433, 0.9914337316963304, 0.991797384535137, 0.99215295678475, 0.992500465947082, 0.9928399290783607, 0.9931713627934864, 0.9934947832702545, 0.9938102062534518, 0.9941176470588233, 0.9944171205769166, 0.994708641276803, 0.9949922232096804, 0.9952678800123562, 0.9955356249106166, 0.9957954707224816, 0.996047429861348, 0.9962915143390233, 0.9965277357686508, 0.9967561053675287, 0.9969766339598246, 0.9971893319791867, 0.9973942094712527, 0.9975912760960595, 0.9977805411303535, 0.9979620134698031, 0.998135701631115, 0.9983016137540557, 0.9984597576033787, 0.9986101405706589, 0.9987527696760344, 0.9988876515698588, 0.9990147925342616, 0.9991341984846217, 0.9992458749709499, 0.9993498271791861, 0.9994460599324084, 0.999534577691956, 0.9996153845584669, 0.9996884842728306, 0.9997538802170555, 0.9998115754150532, 0.9998615725333382, 0.9999038738816455, 0.9999384814134642, 0.9999653967264889, 0.9999846210629885, 0.9999961553100933, 1]\n  const valsCurveRootMidDown = [1, 0.9999961553100933, 0.9999846210629885, 0.9999653967264889, 0.9999384814134642, 0.9999038738816455, 0.9998615725333382, 0.9998115754150532, 0.9997538802170555, 0.9996884842728306, 0.9996153845584669, 0.999534577691956, 0.9994460599324084, 0.9993498271791861, 0.9992458749709499, 0.9991341984846217, 0.9990147925342616, 0.9988876515698588, 0.9987527696760344, 0.9986101405706589, 0.9984597576033787, 0.9983016137540557, 0.998135701631115, 0.9979620134698031, 0.9977805411303535, 0.9975912760960595, 0.9973942094712527, 0.9971893319791867, 0.9969766339598246, 0.9967561053675287, 0.9965277357686508, 0.9962915143390233, 0.996047429861348, 0.9957954707224816, 0.9955356249106166, 0.9952678800123562, 0.9949922232096804, 0.994708641276803, 0.9944171205769166, 0.9941176470588233, 0.9938102062534518, 0.9934947832702545, 0.9931713627934864, 0.9928399290783607, 0.992500465947082, 0.99215295678475, 0.991797384535137, 0.9914337316963304, 0.9910619803162433, 0.9906821119879856, 0.9902941078450973, 0.9898979485566353, 0.9894936143221172, 0.989081084866313, 0.9886603394338851, 0.9882313567838715, 0.9877941151840092, 0.9873485924048933, 0.9868947657139696, 0.9864326118693544, 0.9859621071134792, 0.9854832271665557, 0.9849959472198551, 0.9845002419287997, 0.98399608540586, 0.9834834512132526, 0.9829623123554352, 0.9824326412713907, 0.9818944098266984, 0.9813475893053828, 0.980792150401538, 0.9802280632107175, 0.9796552972210865, 0.9790738213043275, 0.9784836037062951, 0.9778846120374091, 0.9772768132627827, 0.9766601736920755, 0.9760346589690629, 0.9754002340609169, 0.9747568632471859, 0.9741045101084675, 0.973443137514763, 0.9727727076135061, 0.9720931818172538, 0.9714045207910312, 0.9707066844393173, 0.9699996318926627, 0.9692833214939263, 0.9685577107841202, 0.9678227564878485, 0.9670784144983287, 0.9663246398619811, 0.9655613867625732, 0.9647886085049033, 0.9640062574980086, 0.9632142852378827, 0.9624126422896835, 0.9616012782694185, 0.9607801418250852, 0.9599491806172505, 0.9591083412990498, 0.9582575694955835, 0.9573968097826924, 0.9565260056650874, 0.9556450995538133, 0.9547540327430198, 0.953852745386017, 0.9529411764705877, 0.9520192637935307, 0.951086943934405, 0.9501441522284464, 0.9491908227386245, 0.9482268882268089, 0.947252280124008, 0.9462669284996482, 0.9452707620298533, 0.9442637079646867, 0.9432456920943155, 0.9422166387140528, 0.9411764705882348, 0.9401251089128841, 0.9390624732771122, 0.9379884816232062, 0.9369030502053499, 0.9358060935469186, 0.9346975243962893, 0.9335772536811056, 0.9324451904609264, 0.9313012418781962, 0.9301453131074564, 0.9289773073027281, 0.9277971255429809, 0.9266046667756046, 0.925399827757796, 0.9241825029957629, 0.9229525846816502, 0.9217099626280799, 0.9204545242001979, 0.9191861542451075, 0.9179047350185703, 0.9166101461088412, 0.9153022643575022, 0.9139809637771492, 0.9126461154657779, 0.911297587517706, 0.9099352449308598, 0.9085589495102427, 0.907168559767392, 0.9057639308156179, 0.9043449142608089, 0.9029113580875704, 0.9014631065404515, 0.8999999999999995, 0.8985218748533628, 0.8970285633591483, 0.8955198935062169, 0.8939956888660829, 0.8924557684385583, 0.8908999464902618, 0.8893280323855834, 0.8877398304096709, 0.8861351395829714, 0.8845137534668317, 0.882875459959622, 0.8812200410828148, 0.8795472727564038, 0.8778569245630082, 0.8761487594999563, 0.874422533718588, 0.8726779962499644, 0.870914888716104, 0.8691329450258014, 0.8673318910540071, 0.8655114443036697, 0.8636713135488505, 0.8618111984578258, 0.8599307891947843, 0.858029765998614, 0.8561077987371444, 0.854164546435067, 0.8521996567736105, 0.8502127655598686, 0.8482034961634992, 0.8461714589183036, 0.8441162504859651, 0.842037453178979, 0.8399346342395184, 0.8378073450706752, 0.8356551204161666, 0.8334774774842142, 0.8312739150108681, 0.8290439122575759, 0.8267869279372491, 0.8245023990624851, 0.8221897397089207, 0.8198483396859297, 0.8174775631060245, 0.8150767468433425, 0.8126451988705053, 0.8101821964618892, 0.8076869842499295, 0.8051587721194668, 0.8025967329233004, 0.7999999999999996, 0.7973676644726093, 0.7946987723040921, 0.7919923210821374, 0.7892472565022509, 0.7864624685137199, 0.7836367870880276, 0.7807689775634309, 0.7778577355125456, 0.7749016810717154, 0.7718993526614226, 0.7688492000157268, 0.7657495764253295, 0.7625987300828734, 0.7593947943999334, 0.7561357771420848, 0.7528195482005413, 0.749443825784929, 0.7460061607803112, 0.7425039189606318, 0.7389342606877699, 0.7352941176470584, 0.7315801660720418, 0.7277887957875699, 0.7239160742432265, 0.7199577045079236, 0.7159089759367177, 0.7117647058823526, 0.7075191703785135, 0.7031660211292329, 0.6986981853418177, 0.6941077438551304, 0.6893857815166612, 0.6845222016630363, 0.6795054935711499, 0.6743224374187673, 0.6689577248981771, 0.6633934639686245, 0.6576085212871259, 0.6515776320791189, 0.6452701681724817, 0.6386483884679502, 0.6316648781505845, 0.6242586628843516, 0.616349048620759, 0.607825310469549, 0.5985281923639301, 0.5882135049349174, 0.576470588235294, 0.5624995194137615, 0.5442373104810919, 0.5]\n\n  const valsCurveGrayUp = [0, 0.049067674327418015, 0.0980171403295606, 0.14673047445536175, 0.19509032201612825, 0.24298017990326387, 0.29028467725446233, 0.33688985339222005, 0.3826834323650898, 0.4275550934302821, 0.47139673682599764, 0.5141027441932218, 0.5555702330196022, 0.5956993044924334, 0.6343932841636455, 0.6715589548470184, 0.7071067811865475, 0.7409511253549591, 0.7730104533627369, 0.8032075314806449, 0.8314696123025452, 0.8577286100002721, 0.881921264348355, 0.9039892931234433, 0.9238795325112867, 0.9415440651830208, 0.9569403357322089, 0.970031253194544, 0.9807852804032304, 0.989176509964781, 0.9951847266721969, 0.9987954562051724, 1, 0.9999751916296507, 0.9999007677495129, 0.999776732052257, 0.9996030906921302, 0.9993798522846508, 0.9991070279061809, 0.9987846310933769, 0.998412677842518, 0.9979911866087121, 0.9975201783049804, 0.99699967630122, 0.9964297064230436, 0.995810296950499, 0.9951414786166655, 0.9944232846061286, 0.9936557505533347, 0.9928389145408214, 0.9919728170973298, 0.9910575011957918, 0.9900930122511994, 0.9890793981183503, 0.9880167090894743, 0.9869049978917371, 0.9857443196846253, 0.9845347320572082, 0.9832762950252816, 0.9819690710283894, 0.9806131249267257, 0.9792085239979166, 0.9777553379336822, 0.9762536388363786, 0.9747035012154205, 0.9731050019835844, 0.9714582204531921, 0.9697632383321757, 0.9680201397200238, 0.966229011103608, 0.9643899413528927, 0.9625030217165246, 0.9605683458173062, 0.9585860096475498, 0.9565561115643152, 0.9544787522845292, 0.9523540348799885, 0.9501820647722455, 0.9479629497273782, 0.9456967998506421, 0.943383727581008, 0.941023847685583, 0.9386172772539161, 0.936164135692188, 0.9336645447172878, 0.9311186283507725, 0.9285265129127147, 0.9258883270154336, 0.9232042015571147, 0.9204742697153152, 0.9176986669403552, 0.9148775309485979, 0.9120110017156163, 0.9090992214692483, 0.9061423346825389, 0.9031404880665733, 0.9000938305631968, 0.8970025133376245, 0.8938666897709417, 0.8906865154524932, 0.8874621481721635, 0.884193747912548, 0.8808814768410147, 0.8775254993016587, 0.8741259818071471, 0.870683093030458, 0.8671970037965111, 0.863667887073692, 0.8600959179652701, 0.8564812737007104, 0.85282413362688, 0.8491246791991497, 0.8453830939723906, 0.8415995635918666, 0.8377742757840237, 0.833907420347175, 0.8299991891420841, 0.8260497760824452, 0.8220593771252621, 0.8180281902611252, 0.8139564155043877, 0.8098442548832419, 0.8056919124296951, 0.8014995941694462, 0.797267508111663, 0.7929958642386623, 0.7886848744954904, 0.7843347527794076, 0.7799457149292749, 0.7755179787148454, 0.7710517638259587, 0.7665472918616408, 0.7620047863191094, 0.7574244725826837, 0.7528065779126031, 0.7481513314337497, 0.743458964124281, 0.7387297088041691, 0.7339638001236489, 0.7291614745515758, 0.7243229703636922, 0.7194485276308057, 0.7145383882068777, 0.7095927957170226, 0.7046119955454205, 0.6995962348231424, 0.694545762415887, 0.6894608289116343, 0.6843416866082115, 0.6791885895007749, 0.6740017932692074, 0.6687815552654326, 0.6635281345006462, 0.6582417916324638, 0.6529227889519886, 0.6475713903707978, 0.642187861407847, 0.6367724691762967, 0.6313254823702592, 0.6258471712514663, 0.6203378076358603, 0.614797664880107, 0.6092270178680332, 0.6036261429969871, 0.5979953181641249, 0.5923348227526222, 0.5866449376178121, 0.5809259450732498, 0.5751781288767056, 0.5694017742160854, 0.5635971676952802, 0.5577645973199471, 0.5519043524832177, 0.5460167239513406, 0.5401020038492539, 0.5341604856460913, 0.5281924641406208, 0.5221982354466179, 0.5161780969781734, 0.5101323474349367, 0.5040612867872953, 0.497965216261491, 0.4918444383246744, 0.48569925666989733, 0.4795299762010444, 0.4733369030177049, 0.46712034439998523, 0.46088060879326226, 0.45461800579287975, 0.4483328461287867, 0.44202544165012053, 0.4356961053097337, 0.4293451511486662, 0.42297289428056384, 0.4165796508760433, 0.41016573814700485, 0.4037314743308933, 0.39727717867490775, 0.39080317142016235, 0.3843097737857964, 0.3777973079530364, 0.37126609704921093, 0.3647164651317179, 0.3581487371719459, 0.35156323903915, 0.34496029748428336, 0.3383402401237851, 0.33170339542332467, 0.32505009268150453, 0.31838066201352166, 0.3116954343347882, 0.30499474134451227, 0.29827891550924057, 0.29154829004636207, 0.2848031989075752, 0.2780439767623179, 0.27127095898116266, 0.2644844816191766, 0.25768488139924717, 0.25087249569537534, 0.24404766251593607, 0.2372107204869076, 0.23036200883506977, 0.2235018673711727, 0.21663063647307654, 0.20974865706886306, 0.2028562706199199, 0.19595381910399823, 0.1890416449982451, 0.18212009126221085, 0.17518950132083239, 0.16825021904739368, 0.161302588746464, 0.15434695513681446, 0.14738366333431419, 0.14041305883480704, 0.13343548749696893, 0.12645129552514767, 0.11946082945218531, 0.11246443612222433, 0.10546246267349844, 0.09845525652110863, 0.09144316533978557, 0.08442653704663915, 0.07740571978389599, 0.0703810619016257, 0.06335291194045693, 0.05632161861428389, 0.04928753079296433, 0.042250997485009725, 0.03521236782026864, 0.028171991032604017, 0.02113021644256536, 0.014087393440056564, 0.007043871467000329, 0]\n  const valsCurveGrayDown = [0, 0.049067674327418015, 0.0980171403295606, 0.14673047445536175, 0.19509032201612825, 0.24298017990326387, 0.29028467725446233, 0.33688985339222005, 0.3826834323650898, 0.4275550934302821, 0.47139673682599764, 0.5141027441932218, 0.5555702330196022, 0.5956993044924334, 0.6343932841636455, 0.6715589548470184, 0.7071067811865475, 0.7409511253549591, 0.7730104533627369, 0.8032075314806449, 0.8314696123025452, 0.8577286100002721, 0.881921264348355, 0.9039892931234433, 0.9238795325112867, 0.9415440651830208, 0.9569403357322089, 0.970031253194544, 0.9807852804032304, 0.989176509964781, 0.9951847266721969, 0.9987954562051724, 1, 0.9999751916296507, 0.9999007677495129, 0.999776732052257, 0.9996030906921302, 0.9993798522846508, 0.9991070279061809, 0.9987846310933769, 0.998412677842518, 0.9979911866087121, 0.9975201783049804, 0.99699967630122, 0.9964297064230436, 0.995810296950499, 0.9951414786166655, 0.9944232846061286, 0.9936557505533347, 0.9928389145408214, 0.9919728170973298, 0.9910575011957918, 0.9900930122511994, 0.9890793981183503, 0.9880167090894743, 0.9869049978917371, 0.9857443196846253, 0.9845347320572082, 0.9832762950252816, 0.9819690710283894, 0.9806131249267257, 0.9792085239979166, 0.9777553379336822, 0.9762536388363786, 0.9747035012154205, 0.9731050019835844, 0.9714582204531921, 0.9697632383321757, 0.9680201397200238, 0.966229011103608, 0.9643899413528927, 0.9625030217165246, 0.9605683458173062, 0.9585860096475498, 0.9565561115643152, 0.9544787522845292, 0.9523540348799885, 0.9501820647722455, 0.9479629497273782, 0.9456967998506421, 0.943383727581008, 0.941023847685583, 0.9386172772539161, 0.936164135692188, 0.9336645447172878, 0.9311186283507725, 0.9285265129127147, 0.9258883270154336, 0.9232042015571147, 0.9204742697153152, 0.9176986669403552, 0.9148775309485979, 0.9120110017156163, 0.9090992214692483, 0.9061423346825389, 0.9031404880665733, 0.9000938305631968, 0.8970025133376245, 0.8938666897709417, 0.8906865154524932, 0.8874621481721635, 0.884193747912548, 0.8808814768410147, 0.8775254993016587, 0.8741259818071471, 0.870683093030458, 0.8671970037965111, 0.863667887073692, 0.8600959179652701, 0.8564812737007104, 0.85282413362688, 0.8491246791991497, 0.8453830939723906, 0.8415995635918666, 0.8377742757840237, 0.833907420347175, 0.8299991891420841, 0.8260497760824452, 0.8220593771252621, 0.8180281902611252, 0.8139564155043877, 0.8098442548832419, 0.8056919124296951, 0.8014995941694462, 0.797267508111663, 0.7929958642386623, 0.7886848744954904, 0.7843347527794076, 0.7799457149292749, 0.7755179787148454, 0.7710517638259587, 0.7665472918616408, 0.7620047863191094, 0.7574244725826837, 0.7528065779126031, 0.7481513314337497, 0.743458964124281, 0.7387297088041691, 0.7339638001236489, 0.7291614745515758, 0.7243229703636922, 0.7194485276308057, 0.7145383882068777, 0.7095927957170226, 0.7046119955454205, 0.6995962348231424, 0.694545762415887, 0.6894608289116343, 0.6843416866082115, 0.6791885895007749, 0.6740017932692074, 0.6687815552654326, 0.6635281345006462, 0.6582417916324638, 0.6529227889519886, 0.6475713903707978, 0.642187861407847, 0.6367724691762967, 0.6313254823702592, 0.6258471712514663, 0.6203378076358603, 0.614797664880107, 0.6092270178680332, 0.6036261429969871, 0.5979953181641249, 0.5923348227526222, 0.5866449376178121, 0.5809259450732498, 0.5751781288767056, 0.5694017742160854, 0.5635971676952802, 0.5577645973199471, 0.5519043524832177, 0.5460167239513406, 0.5401020038492539, 0.5341604856460913, 0.5281924641406208, 0.5221982354466179, 0.5161780969781734, 0.5101323474349367, 0.5040612867872953, 0.497965216261491, 0.4918444383246744, 0.48569925666989733, 0.4795299762010444, 0.4733369030177049, 0.46712034439998523, 0.46088060879326226, 0.45461800579287975, 0.4483328461287867, 0.44202544165012053, 0.4356961053097337, 0.4293451511486662, 0.42297289428056384, 0.4165796508760433, 0.41016573814700485, 0.4037314743308933, 0.39727717867490775, 0.39080317142016235, 0.3843097737857964, 0.3777973079530364, 0.37126609704921093, 0.3647164651317179, 0.3581487371719459, 0.35156323903915, 0.34496029748428336, 0.3383402401237851, 0.33170339542332467, 0.32505009268150453, 0.31838066201352166, 0.3116954343347882, 0.30499474134451227, 0.29827891550924057, 0.29154829004636207, 0.2848031989075752, 0.2780439767623179, 0.27127095898116266, 0.2644844816191766, 0.25768488139924717, 0.25087249569537534, 0.24404766251593607, 0.2372107204869076, 0.23036200883506977, 0.2235018673711727, 0.21663063647307654, 0.20974865706886306, 0.2028562706199199, 0.19595381910399823, 0.1890416449982451, 0.18212009126221085, 0.17518950132083239, 0.16825021904739368, 0.161302588746464, 0.15434695513681446, 0.14738366333431419, 0.14041305883480704, 0.13343548749696893, 0.12645129552514767, 0.11946082945218531, 0.11246443612222433, 0.10546246267349844, 0.09845525652110863, 0.09144316533978557, 0.08442653704663915, 0.07740571978389599, 0.0703810619016257, 0.06335291194045693, 0.05632161861428389, 0.04928753079296433, 0.042250997485009725, 0.03521236782026864, 0.028171991032604017, 0.02113021644256536, 0.014087393440056564, 0.007043871467000329, 0]\n\n  const valsCurveSinFull = [0, 0.012271538285719925, 0.024541228522912288, 0.03680722294135883, 0.049067674327418015, 0.06132073630220858, 0.07356456359966743, 0.0857973123444399, 0.0980171403295606, 0.11022220729388306, 0.1224106751992162, 0.1345807085071262, 0.14673047445536175, 0.15885814333386145, 0.17096188876030122, 0.18303988795514098, 0.19509032201612825, 0.20711137619221856, 0.2191012401568698, 0.23105810828067114, 0.24298017990326387, 0.25486565960451457, 0.2667127574748984, 0.27851968938505306, 0.29028467725446233, 0.3020059493192281, 0.3136817403988915, 0.3253102921622629, 0.33688985339222005, 0.34841868024943456, 0.35989503653498817, 0.3713171939518375, 0.3826834323650898, 0.3939920400610481, 0.40524131400498986, 0.41642956009763715, 0.4275550934302821, 0.43861623853852766, 0.4496113296546066, 0.46053871095824, 0.47139673682599764, 0.4821837720791227, 0.49289819222978404, 0.5035383837257176, 0.5141027441932218, 0.524589682678469, 0.5349976198870972, 0.5453249884220465, 0.5555702330196022, 0.5657318107836131, 0.5758081914178453, 0.5857978574564389, 0.5956993044924334, 0.6055110414043255, 0.6152315905806268, 0.6248594881423863, 0.6343932841636455, 0.6438315428897915, 0.6531728429537768, 0.6624157775901718, 0.6715589548470184, 0.680600997795453, 0.6895405447370668, 0.6983762494089729, 0.7071067811865475, 0.7157308252838187, 0.7242470829514669, 0.7326542716724128, 0.7409511253549591, 0.7491363945234593, 0.7572088465064846, 0.765167265622459, 0.7730104533627369, 0.7807372285720945, 0.7883464276266062, 0.7958369046088836, 0.8032075314806449, 0.8104571982525948, 0.8175848131515837, 0.8245893027850253, 0.8314696123025452, 0.8382247055548381, 0.844853565249707, 0.8513551931052652, 0.8577286100002721, 0.8639728561215867, 0.8700869911087113, 0.8760700941954066, 0.881921264348355, 0.8876396204028539, 0.8932243011955153, 0.8986744656939538, 0.9039892931234433, 0.9091679830905224, 0.9142097557035307, 0.9191138516900578, 0.9238795325112867, 0.9285060804732156, 0.9329927988347388, 0.937339011912575, 0.9415440651830208, 0.9456073253805213, 0.9495281805930367, 0.9533060403541938, 0.9569403357322089, 0.9604305194155658, 0.9637760657954398, 0.9669764710448521, 0.970031253194544, 0.9729399522055602, 0.9757021300385286, 0.9783173707196277, 0.9807852804032304, 0.9831054874312163, 0.9852776423889412, 0.9873014181578584, 0.989176509964781, 0.99090263542778, 0.99247953459871, 0.9939069700023561, 0.9951847266721969, 0.996312612182778, 0.9972904566786902, 0.9981181129001492, 0.9987954562051724, 0.9993223845883495, 0.9996988186962042, 0.9999247018391445, 1, 0.9999235113880168, 0.9996940572530831, 0.9993116726964553, 0.9987764162142612, 0.9980883696885519, 0.9972476383747746, 0.9962543508856719, 0.9951086591716065, 0.9938107384973163, 0.9923607874151029, 0.9907590277344579, 0.9890057044881306, 0.987101085894644, 0.9850454633172632, 0.9828391512194237, 0.9804824871166252, 0.9779758315248003, 0.9753195679051626, 0.9725141026055468, 0.9695598647982466, 0.9664573064143603, 0.9632069020746571, 0.9598091490169693, 0.9562645670201276, 0.9525736983244458, 0.9487371075487713, 0.9447553816041101, 0.9406291296038441, 0.9363589827705495, 0.9319455943394349, 0.9273896394584106, 0.922691815084807, 0.9178528398787554, 0.9128734540932497, 0.9077544194609043, 0.9024965190774269, 0.8971005572818217, 0.891567359533345, 0.8858977722852279, 0.880092662855189, 0.8741529192927533, 0.8680794502434023, 0.861873184809571, 0.8555350724085166, 0.8490660826270794, 0.842467205073358, 0.835739449225322, 0.8288838442763844, 0.821901438977959, 0.8147933014790248, 0.8075605191627243, 0.8002041984800174, 0.7927254647804212, 0.7851254621398553, 0.7774053531856262, 0.7695663189185703, 0.7616095585323882, 0.7535362892301958, 0.7453477460383191, 0.7370451816173642, 0.7286298660705877, 0.7201030867496008, 0.7114661480574334, 0.7027203712489903, 0.6938670942289291, 0.6849076713469913, 0.6758434731908176, 0.6666758863762795, 0.6574063133353583, 0.6480361721016052, 0.6385668960932144, 0.6289999338937424, 0.6193367490305086, 0.6095788197507078, 0.5997276387952729, 0.5897847131705194, 0.5797515639176072, 0.5696297258798569, 0.5594207474679529, 0.5491261904230721, 0.5387476295779733, 0.5282866526160832, 0.5177448598286177, 0.5071238638697727, 0.49642528951002607, 0.4856507733875834, 0.4748019637580109, 0.46388052024208903, 0.45288811357192854, 0.4418264253353865, 0.4306971477188217, 0.41950198324822885, 0.4082426445287903, 0.396920853982887, 0.3855383435866072, 0.374096854604793, 0.3625981373246669, 0.35104395078807754, 0.3394360625224065, 0.3277762482701767, 0.3160662917174045, 0.3043079842207361, 0.2925031245334109, 0.2806535185300931, 0.2687609789306142, 0.256827325022668, 0.24485438238350124, 0.23284398260064146, 0.2207979629917062, 0.2087181663233351, 0.19660644052928852, 0.18446463842775587, 0.17229461743791663, 0.16009823929579745, 0.1478773697694689, 0.13563387837362562, 0.12336963808359294, 0.11108652504880454, 0.09878641830579413, 0.0864711994907457, 0.0741427525516462, 0.061802963460084105, 0.049453719922738996, 0.03709691109260531, 0.024734427279994954, 0.012368159663362913, 0]\n  const valsCurveSinFull32 = [0, 0.049067674327418015, 0.0980171403295606, 0.14673047445536175, 0.19509032201612825, 0.24298017990326387, 0.29028467725446233, 0.33688985339222005, 0.3826834323650898, 0.4275550934302821, 0.47139673682599764, 0.5141027441932218, 0.5555702330196022, 0.5956993044924334, 0.6343932841636455, 0.6715589548470184, 0.7071067811865475, 0.7409511253549591, 0.7730104533627369, 0.8032075314806449, 0.8314696123025452, 0.8577286100002721, 0.881921264348355, 0.9039892931234433, 0.9238795325112867, 0.9415440651830208, 0.9569403357322089, 0.970031253194544, 0.9807852804032304, 0.989176509964781, 0.9951847266721969, 0.9987954562051724, 1, 0.9999751916296507, 0.9999007677495129, 0.999776732052257, 0.9996030906921302, 0.9993798522846508, 0.9991070279061809, 0.9987846310933769, 0.998412677842518, 0.9979911866087121, 0.9975201783049804, 0.99699967630122, 0.9964297064230436, 0.995810296950499, 0.9951414786166655, 0.9944232846061286, 0.9936557505533347, 0.9928389145408214, 0.9919728170973298, 0.9910575011957918, 0.9900930122511994, 0.9890793981183503, 0.9880167090894743, 0.9869049978917371, 0.9857443196846253, 0.9845347320572082, 0.9832762950252816, 0.9819690710283894, 0.9806131249267257, 0.9792085239979166, 0.9777553379336822, 0.9762536388363786, 0.9747035012154205, 0.9731050019835844, 0.9714582204531921, 0.9697632383321757, 0.9680201397200238, 0.966229011103608, 0.9643899413528927, 0.9625030217165246, 0.9605683458173062, 0.9585860096475498, 0.9565561115643152, 0.9544787522845292, 0.9523540348799885, 0.9501820647722455, 0.9479629497273782, 0.9456967998506421, 0.943383727581008, 0.941023847685583, 0.9386172772539161, 0.936164135692188, 0.9336645447172878, 0.9311186283507725, 0.9285265129127147, 0.9258883270154336, 0.9232042015571147, 0.9204742697153152, 0.9176986669403552, 0.9148775309485979, 0.9120110017156163, 0.9090992214692483, 0.9061423346825389, 0.9031404880665733, 0.9000938305631968, 0.8970025133376245, 0.8938666897709417, 0.8906865154524932, 0.8874621481721635, 0.884193747912548, 0.8808814768410147, 0.8775254993016587, 0.8741259818071471, 0.870683093030458, 0.8671970037965111, 0.863667887073692, 0.8600959179652701, 0.8564812737007104, 0.85282413362688, 0.8491246791991497, 0.8453830939723906, 0.8415995635918666, 0.8377742757840237, 0.833907420347175, 0.8299991891420841, 0.8260497760824452, 0.8220593771252621, 0.8180281902611252, 0.8139564155043877, 0.8098442548832419, 0.8056919124296951, 0.8014995941694462, 0.797267508111663, 0.7929958642386623, 0.7886848744954904, 0.7843347527794076, 0.7799457149292749, 0.7755179787148454, 0.7710517638259587, 0.7665472918616408, 0.7620047863191094, 0.7574244725826837, 0.7528065779126031, 0.7481513314337497, 0.743458964124281, 0.7387297088041691, 0.7339638001236489, 0.7291614745515758, 0.7243229703636922, 0.7194485276308057, 0.7145383882068777, 0.7095927957170226, 0.7046119955454205, 0.6995962348231424, 0.694545762415887, 0.6894608289116343, 0.6843416866082115, 0.6791885895007749, 0.6740017932692074, 0.6687815552654326, 0.6635281345006462, 0.6582417916324638, 0.6529227889519886, 0.6475713903707978, 0.642187861407847, 0.6367724691762967, 0.6313254823702592, 0.6258471712514663, 0.6203378076358603, 0.614797664880107, 0.6092270178680332, 0.6036261429969871, 0.5979953181641249, 0.5923348227526222, 0.5866449376178121, 0.5809259450732498, 0.5751781288767056, 0.5694017742160854, 0.5635971676952802, 0.5577645973199471, 0.5519043524832177, 0.5460167239513406, 0.5401020038492539, 0.5341604856460913, 0.5281924641406208, 0.5221982354466179, 0.5161780969781734, 0.5101323474349367, 0.5040612867872953, 0.497965216261491, 0.4918444383246744, 0.48569925666989733, 0.4795299762010444, 0.4733369030177049, 0.46712034439998523, 0.46088060879326226, 0.45461800579287975, 0.4483328461287867, 0.44202544165012053, 0.4356961053097337, 0.4293451511486662, 0.42297289428056384, 0.4165796508760433, 0.41016573814700485, 0.4037314743308933, 0.39727717867490775, 0.39080317142016235, 0.3843097737857964, 0.3777973079530364, 0.37126609704921093, 0.3647164651317179, 0.3581487371719459, 0.35156323903915, 0.34496029748428336, 0.3383402401237851, 0.33170339542332467, 0.32505009268150453, 0.31838066201352166, 0.3116954343347882, 0.30499474134451227, 0.29827891550924057, 0.29154829004636207, 0.2848031989075752, 0.2780439767623179, 0.27127095898116266, 0.2644844816191766, 0.25768488139924717, 0.25087249569537534, 0.24404766251593607, 0.2372107204869076, 0.23036200883506977, 0.2235018673711727, 0.21663063647307654, 0.20974865706886306, 0.2028562706199199, 0.19595381910399823, 0.1890416449982451, 0.18212009126221085, 0.17518950132083239, 0.16825021904739368, 0.161302588746464, 0.15434695513681446, 0.14738366333431419, 0.14041305883480704, 0.13343548749696893, 0.12645129552514767, 0.11946082945218531, 0.11246443612222433, 0.10546246267349844, 0.09845525652110863, 0.09144316533978557, 0.08442653704663915, 0.07740571978389599, 0.0703810619016257, 0.06335291194045693, 0.05632161861428389, 0.04928753079296433, 0.042250997485009725, 0.03521236782026864, 0.028171991032604017, 0.02113021644256536, 0.014087393440056564, 0.007043871467000329, 0]\n  const valsCurveSinFull224 = [0, 0.007012426128843567, 0.014024507423562413, 0.02103589906698894, 0.028046256275868958, 0.035055234317816326, 0.04206248852826503, 0.04906767432741802, 0.0560704472371918, 0.06307046289815603, 0.07006737708646732, 0.07706084573079638, 0.08405052492924756, 0.09103607096627017, 0.09801714032956062, 0.10499338972695449, 0.11196447610330788, 0.11893005665736701, 0.1258897888586254, 0.13284333046416774, 0.1397903395354995, 0.14673047445536175, 0.1536633939445301, 0.16058875707859693, 0.16750622330473638, 0.17441545245845072, 0.18131610478029814, 0.18820784093260004, 0.1950903220161282, 0.20196320958676958, 0.20882616567216977, 0.21567885278835222, 0.22252093395631425, 0.22935207271859764, 0.2361719331558341, 0.2429801799032637, 0.24977647816722667, 0.2565604937416265, 0.2633318930243646, 0.2700903430337452, 0.2768355114248492, 0.2835670665058776, 0.2902846772544622, 0.29698801333394337, 0.30367674510961457, 0.31035054366493176, 0.31700908081768797, 0.3236520291361514, 0.33027906195516704, 0.33688985339222, 0.343484078363461, 0.3500614125996923, 0.356621532662313, 0.3631641159592248, 0.36968884076069497, 0.37619538621517723, 0.38268343236508984, 0.3891526601625491, 0.39560275148505886, 0.4020333891511536, 0.4084442569359963, 0.41483503958692797, 0.42120542283897094, 0.4275550934302823, 0.4338837391175583, 0.44019104869138936, 0.4464767119915632, 0.4527404199223172, 0.4589818644675379, 0.4652007387059078, 0.4713967368259979, 0.47756955414130614, 0.4837188871052401, 0.4898444333260438, 0.495945891581668, 0.5020229618345823, 0.5080753452465299, 0.5141027441932221, 0.520104862278975, 0.5260814043512838, 0.5320320765153369, 0.5379565861484689, 0.543854641914549, 0.5497259537783086, 0.5555702330196026, 0.5613871922476081, 0.5671765454149563, 0.5729380078317985, 0.5786712961798062, 0.5843761285261031, 0.5900522243371287, 0.5956993044924338, 0.6013170912984063, 0.6069053085019263, 0.6124636813039506, 0.6179919363730271, 0.6234898018587341, 0.6289570074050497, 0.634393284163646, 0.6397983648071098, 0.6451719835420882, 0.6505138761223589, 0.6558237798618246, 0.6611014336474306, 0.6663465779520046, 0.671558954847019, 0.6767383080152749, 0.6818843827635057, 0.6869969260349023, 0.6920756864215564, 0.6971204141768239, 0.702130861227606, 0.7071067811865482, 0.7120479293641562, 0.716954062780828, 0.7218249401788037, 0.7266603220340278, 0.7314599705679284, 0.7362236497591101, 0.7409511253549599, 0.7456421648831664, 0.7502965376631521, 0.7549140148174168, 0.7594943692827921, 0.7640373758216082, 0.7685428110327689, 0.7730104533627378, 0.777440083116433, 0.7818314824680306, 0.7861844354716763, 0.7904987280721043, 0.7947741481151634, 0.7990104853582498, 0.8032075314806457, 0.8073650800937632, 0.8114829267512936, 0.8155608689592609, 0.8195987061859797, 0.8235962398719155, 0.8275532734394498, 0.8314696123025461, 0.8353450638763186, 0.8391794375865029, 0.8429725448788274, 0.846724199228285, 0.8504342161483055, 0.8541024131998284, 0.8577286100002729, 0.8613126282324097, 0.8648542916531289, 0.8683534261021063, 0.8718098595103686, 0.8752234219087546, 0.8785939454362724, 0.8819212643483558, 0.8852052150250129, 0.888445635978873, 0.8916423678631279, 0.8947952534793668, 0.8979041377853075, 0.9009688679024199, 0.903989293123444, 0.9069652649198011, 0.9098966369488972, 0.9127832650613195, 0.9156250073079252, 0.9184217239468215, 0.9211732774502376, 0.9238795325112872, 0.9265403560506225, 0.9291556172229785, 0.9317251874236068, 0.9342489402946, 0.9367267517311055, 0.9391584998874279, 0.9415440651830208, 0.9438833303083676, 0.9461761802307496, 0.9484225021999027, 0.9506221857535627, 0.9527751227228962, 0.9548812072378203, 0.9569403357322087, 0.9589524069489844, 0.9609173219450994, 0.9628349840963992, 0.9647052991023756, 0.9665281749908029, 0.9683035221222611, 0.9700312531945436, 0.9717112832469507, 0.9733435296644666, 0.9749279121818233, 0.9764643528874465, 0.9779527762272874, 0.9793931090085378, 0.9807852804032301, 0.9821292219517187, 0.9834248675660481, 0.9846721535332017, 0.9858710185182354, 0.9870214035672937, 0.9881232521105084, 0.9891765099647806, 0.9901811253364452, 0.9911370488238179, 0.9920442334196242, 0.9929026345133115, 0.9937122098932422, 0.9944729197487698, 0.9951847266721966, 0.9958475956606129, 0.9964614941176189, 0.9970263918549267, 0.9975422610938457, 0.998009076466648, 0.9984268150178164, 0.9987954562051722, 0.9991149819008868, 0.9993853763923718, 0.9996066263830528, 0.9997787209930221, 0.9999016517595749, 0.9999754126376246, 1, 0.9987165071710529, 0.9948693233918952, 0.9884683243281115, 0.9795299412524946, 0.9680771188662044, 0.9541392564000489, 0.9377521321470806, 0.9189578116202307, 0.8978045395707419, 0.8743466161445823, 0.8486442574947511, 0.8207634412072765, 0.7907757369376988, 0.758758122692791, 0.7247927872291201, 0.6889669190756866, 0.6513724827222223, 0.6121059825476628, 0.5712682150947922, 0.5289640103269624, 0.48530196253108093, 0.44039415155763423, 0.3943558551133185, 0.3473052528448202, 0.2993631229733579, 0.25065253225872053, 0.20129852008866006, 0.1514277775045767, 0.10116832198743217, 0.05064916883871271, 0]\n\n  const curveSinUpVals = [0, 0.006159946638138648, 0.012319659535238444, 0.018478904959129905, 0.024637449195381973, 0.030795058556170356, 0.03695149938914489, 0.043106538086295575, 0.04925994109281686, 0.055411474915969955, 0.06156090613394284, 0.06770800140470745, 0.07385252747487396, 0.07999425118854163, 0.08613293949614599, 0.09226835946330197, 0.09840027827964268, 0.10452846326765343, 0.1106526818915008, 0.11677270176585626, 0.12288829066471407, 0.12899921653020321, 0.1351052474813929, 0.14120615182309132, 0.14730169805463744, 0.1533916548786853, 0.15947579120998076, 0.16555387618412992, 0.1716256791663596, 0.1776909697602686, 0.18374951781657034, 0.18980109344182577, 0.19584546700716698, 0.20188240915701028, 0.20791169081775937, 0.21393308320649748, 0.21994635783966868, 0.2259512865417477, 0.2319476414538982, 0.23793519504261884, 0.24391372010837722, 0.24988298979423093, 0.2558427775944357, 0.2617928573630404, 0.267733003322468, 0.273662990072083, 0.27958259259674395, 0.2854915862753421, 0.2913897468893247, 0.2972768506312027, 0.30315267411304353, 0.3090169943749474, 0.31486958889350786, 0.3207102355902551, 0.32653871284008323, 0.33235479947965957, 0.338158274815817, 0.343948918633928, 0.349726511206261, 0.3554908333003179, 0.36124166618715275, 0.36697879164967184, 0.37270199199091375, 0.37841105004231, 0.3841057491719256, 0.38978587329267905, 0.39545120687054225, 0.40110153493271844, 0.4067366430757999, 0.41235631747390317, 0.4179603448867831, 0.4235485126679239, 0.4291206087726085, 0.4346764217659645, 0.44021574083098686, 0.44573835577653775, 0.45124405704532233, 0.4567326357218401, 0.46220388354031267, 0.46765759289258624, 0.4730935568360095, 0.47851156910128595, 0.483911424100301, 0.489292916933923, 0.4946558433997782, 0.4999999999999994, 0.5053251839489474, 0.5106311931809063, 0.5159178263577504, 0.5211848828765844, 0.5264321628773552, 0.5316594672504353, 0.5368665976441792, 0.5420533564724486, 0.5472195469221103, 0.5523649729605049, 0.5574894393428846, 0.5625927516198223, 0.5676747161445892, 0.5727351400805043, 0.5777738314082502, 0.58279059893316, 0.5877852522924722, 0.592757601962554, 0.5977074592660927, 0.6026346363792554, 0.607538946338816, 0.612420203049249, 0.617278221289792, 0.6221128167214729, 0.6269238058941055, 0.6317110062532499, 0.6364742361471404, 0.6412133148335774, 0.6459280624867862, 0.650618300204241, 0.6552838500134526, 0.6599245348787215, 0.6645401787078569, 0.6691306063588571, 0.6736956436465561, 0.6782351173492328, 0.6827488552151842, 0.6872366859692616, 0.6916984393193688, 0.6961339459629254, 0.7005430375932897, 0.704925546906146, 0.7092813076058523, 0.7136101544117511, 0.7179119230644407, 0.7221864503320081, 0.7264335740162229, 0.7306531329586919, 0.7348449670469744, 0.7390089172206579, 0.743144825477393, 0.7472525348788898, 0.751331889556872, 0.7553827347189925, 0.7594049166547059, 0.7633982827411017, 0.7673626814486957, 0.7712979623471793, 0.7752039761111285, 0.7790805745256691, 0.7829276104921015, 0.7867449380334819, 0.790532412300162, 0.7942898895752848, 0.7980172272802382, 0.8017142839800654, 0.8053809193888313, 0.8090169943749461, 0.8126223709664443, 0.8161969123562204, 0.8197404829072198, 0.8232529481575859, 0.8267341748257622, 0.8301840308155494, 0.8336023852211182, 0.8369891083319766, 0.8403440716378914, 0.8436671478337651, 0.8469582108244658, 0.8502171357296129, 0.8534437988883147, 0.8566380778638615, 0.8597998514483711, 0.8629289996673883, 0.8660254037844374, 0.869088946305527, 0.8721195109836096, 0.8751169828229914, 0.8780812480836967, 0.8810121942857833, 0.8839097102136108, 0.8867736859200607, 0.8896040127307083, 0.8924005832479466, 0.8951632913550611, 0.8978920322202568, 0.9005867023006362, 0.9032471993461277, 0.905873422403366, 0.9084652718195227, 0.9110226492460873, 0.9135454576426, 0.9160336012803326, 0.9184869857459222, 0.9209055179449528, 0.9232891061054886, 0.9256376597815555, 0.927951089856574, 0.9302293085467398, 0.9324722294043553, 0.9346797673211101, 0.9368518385313102, 0.9389883606150562, 0.9410892525013712, 0.9431544344712772, 0.9451838281608193, 0.94717735656404, 0.949134944035901, 0.9510565162951534, 0.9529420004271564, 0.9547913248866442, 0.9566044195004407, 0.9583812154701222, 0.9601216453746282, 0.961825643172819, 0.9634931442059832, 0.9651240852002891, 0.9667184042691875, 0.9682760409157589, 0.9697969360350096, 0.971281031916114, 0.9727282722446049, 0.9741386021045103, 0.9755119679804368, 0.976848317759601, 0.9781476007338059, 0.9794097676013661, 0.9806347704689781, 0.9818225628535372, 0.9829730996839021, 0.9840863373026048, 0.9851622334675068, 0.9862007473534029, 0.9872018395535693, 0.9881654720812597, 0.9890916083711463, 0.9899802132807073, 0.9908312530915606, 0.9916446955107431, 0.9924205096719361, 0.9931586661366365, 0.9938591368952739, 0.9945218953682736, 0.9951469164070648, 0.9957341762950348, 0.9962836527484298, 0.9967953249171994, 0.9972691733857884, 0.9977051801738731, 0.9981033287370443, 0.9984636039674342, 0.9987859921942901, 0.9990704811844934, 0.999317060143023, 0.999525719713366, 0.9996964519778717, 0.9998292504580528, 0.9999241101148306, 0.999981027348727, 1]\n  const curveSinDownVals = [1, 0.999981027348727, 0.9999241101148306, 0.9998292504580528, 0.9996964519778717, 0.999525719713366, 0.999317060143023, 0.9990704811844934, 0.9987859921942901, 0.9984636039674342, 0.9981033287370443, 0.9977051801738731, 0.9972691733857884, 0.9967953249171994, 0.9962836527484298, 0.9957341762950348, 0.9951469164070648, 0.9945218953682736, 0.9938591368952739, 0.9931586661366365, 0.9924205096719361, 0.9916446955107431, 0.9908312530915606, 0.9899802132807073, 0.9890916083711463, 0.9881654720812597, 0.9872018395535693, 0.9862007473534029, 0.9851622334675068, 0.9840863373026048, 0.9829730996839021, 0.9818225628535372, 0.9806347704689781, 0.9794097676013661, 0.9781476007338059, 0.976848317759601, 0.9755119679804368, 0.9741386021045103, 0.9727282722446049, 0.971281031916114, 0.9697969360350096, 0.9682760409157589, 0.9667184042691875, 0.9651240852002891, 0.9634931442059832, 0.961825643172819, 0.9601216453746282, 0.9583812154701222, 0.9566044195004407, 0.9547913248866442, 0.9529420004271564, 0.9510565162951534, 0.949134944035901, 0.94717735656404, 0.9451838281608193, 0.9431544344712772, 0.9410892525013712, 0.9389883606150562, 0.9368518385313102, 0.9346797673211101, 0.9324722294043553, 0.9302293085467398, 0.927951089856574, 0.9256376597815555, 0.9232891061054886, 0.9209055179449528, 0.9184869857459222, 0.9160336012803326, 0.9135454576426, 0.9110226492460873, 0.9084652718195227, 0.905873422403366, 0.9032471993461277, 0.9005867023006362, 0.8978920322202568, 0.8951632913550611, 0.8924005832479466, 0.8896040127307083, 0.8867736859200607, 0.8839097102136108, 0.8810121942857833, 0.8780812480836967, 0.8751169828229914, 0.8721195109836096, 0.869088946305527, 0.8660254037844374, 0.8629289996673883, 0.8597998514483711, 0.8566380778638615, 0.8534437988883147, 0.8502171357296129, 0.8469582108244658, 0.8436671478337651, 0.8403440716378914, 0.8369891083319766, 0.8336023852211182, 0.8301840308155494, 0.8267341748257622, 0.8232529481575859, 0.8197404829072198, 0.8161969123562204, 0.8126223709664443, 0.8090169943749461, 0.8053809193888313, 0.8017142839800654, 0.7980172272802382, 0.7942898895752848, 0.790532412300162, 0.7867449380334819, 0.7829276104921015, 0.7790805745256691, 0.7752039761111285, 0.7712979623471793, 0.7673626814486957, 0.7633982827411017, 0.7594049166547059, 0.7553827347189925, 0.751331889556872, 0.7472525348788898, 0.743144825477393, 0.7390089172206579, 0.7348449670469744, 0.7306531329586919, 0.7264335740162229, 0.7221864503320081, 0.7179119230644407, 0.7136101544117511, 0.7092813076058523, 0.704925546906146, 0.7005430375932897, 0.6961339459629254, 0.6916984393193688, 0.6872366859692616, 0.6827488552151842, 0.6782351173492328, 0.6736956436465561, 0.6691306063588571, 0.6645401787078569, 0.6599245348787215, 0.6552838500134526, 0.650618300204241, 0.6459280624867862, 0.6412133148335774, 0.6364742361471404, 0.6317110062532499, 0.6269238058941055, 0.6221128167214729, 0.617278221289792, 0.612420203049249, 0.607538946338816, 0.6026346363792554, 0.5977074592660927, 0.592757601962554, 0.5877852522924722, 0.58279059893316, 0.5777738314082502, 0.5727351400805043, 0.5676747161445892, 0.5625927516198223, 0.5574894393428846, 0.5523649729605049, 0.5472195469221103, 0.5420533564724486, 0.5368665976441792, 0.5316594672504353, 0.5264321628773552, 0.5211848828765844, 0.5159178263577504, 0.5106311931809063, 0.5053251839489474, 0.4999999999999994, 0.4946558433997782, 0.489292916933923, 0.483911424100301, 0.47851156910128595, 0.4730935568360095, 0.46765759289258624, 0.46220388354031267, 0.4567326357218401, 0.45124405704532233, 0.44573835577653775, 0.44021574083098686, 0.4346764217659645, 0.4291206087726085, 0.4235485126679239, 0.4179603448867831, 0.41235631747390317, 0.4067366430757999, 0.40110153493271844, 0.39545120687054225, 0.38978587329267905, 0.3841057491719256, 0.37841105004231, 0.37270199199091375, 0.36697879164967184, 0.36124166618715275, 0.3554908333003179, 0.349726511206261, 0.343948918633928, 0.338158274815817, 0.33235479947965957, 0.32653871284008323, 0.3207102355902551, 0.31486958889350786, 0.3090169943749474, 0.30315267411304353, 0.2972768506312027, 0.2913897468893247, 0.2854915862753421, 0.27958259259674395, 0.273662990072083, 0.267733003322468, 0.2617928573630404, 0.2558427775944357, 0.24988298979423093, 0.24391372010837722, 0.23793519504261884, 0.2319476414538982, 0.2259512865417477, 0.21994635783966868, 0.21393308320649748, 0.20791169081775937, 0.20188240915701028, 0.19584546700716698, 0.18980109344182577, 0.18374951781657034, 0.1776909697602686, 0.1716256791663596, 0.16555387618412992, 0.15947579120998076, 0.1533916548786853, 0.14730169805463744, 0.14120615182309132, 0.1351052474813929, 0.12899921653020321, 0.12288829066471407, 0.11677270176585626, 0.1106526818915008, 0.10452846326765343, 0.09840027827964268, 0.09226835946330197, 0.08613293949614599, 0.07999425118854163, 0.07385252747487396, 0.06770800140470745, 0.06156090613394284, 0.055411474915969955, 0.04925994109281686, 0.043106538086295575, 0.03695149938914489, 0.030795058556170356, 0.024637449195381973, 0.018478904959129905, 0.012319659535238444, 0.006159946638138648, 0]\n\n  const curveLogDown0Vals = [1, 0.9992941796073571, 0.9985855858465207, 0.9978741968367888, 0.9971599904374896, 0.9964429442438464, 0.9957230355827609, 0.9950002415085101, 0.9942745387983595, 0.9935459039480847, 0.9928143131674051, 0.9920797423753214, 0.9913421671953608, 0.9906015629507225, 0.9898579046593242, 0.9891111670287451, 0.9883613244510647, 0.9876083509975935, 0.9868522204134929, 0.9860929061122824, 0.9853303811702302, 0.9845646183206249, 0.9837955899479256, 0.983023268081785, 0.9822476243909466, 0.9814686301770073, 0.980686256368047, 0.979900473512118, 0.9791112517705928, 0.9783185609113643, 0.9775223703018984, 0.9767226489021297, 0.9759193652572005, 0.9751124874900381, 0.9743019832937633, 0.9734878199239289, 0.9726699641905824, 0.9718483824501467, 0.9710230405971157, 0.9701939040555599, 0.9693609377704334, 0.9685241061986826, 0.9676833733001434, 0.9668387025282297, 0.9659900568204, 0.9651373985883981, 0.9642806897082652, 0.9634198915101102, 0.9625549647676365, 0.9616858696874157, 0.9608125658979022, 0.9599350124381807, 0.9590531677464369, 0.9581669896481471, 0.9572764353439743, 0.9563814613973661, 0.9554820237218407, 0.9545780775679562, 0.9536695775099511, 0.952756477432047, 0.9518387305144009, 0.9509162892187013, 0.949989105273391, 0.9490571296585101, 0.9481203125901445, 0.9471786035044686, 0.9462319510413685, 0.9452803030276341, 0.9443236064597047, 0.9433618074859546, 0.942394851388504, 0.941422682564539, 0.9404452445071265, 0.9394624797855052, 0.9384743300248369, 0.9374807358854007, 0.9364816370412093, 0.935476972158032, 0.9344666788707997, 0.9334506937603746, 0.9324289523296622, 0.9314013889790411, 0.9303679369810909, 0.9293285284545906, 0.9282830943377621, 0.9272315643607373, 0.9261738670172128, 0.925109929535273, 0.924039677847345, 0.9229630365592565, 0.9218799289183656, 0.920790276780727, 0.9196940005772605, 0.9185910192788846, 0.917481250360578, 0.9163646097643271, 0.9152410118609203, 0.9141103694105444, 0.9129725935221379, 0.9118275936114533, 0.9106752773577811, 0.9095155506592797, 0.9083483175868626, 0.9071734803365815, 0.9059909391804483, 0.9048005924156348, 0.9036023363119852, 0.9023960650577701, 0.9011816707036188, 0.8999590431045456, 0.8987280698600022, 0.8974886362518668, 0.8962406251802891, 0.8949839170972987, 0.8937183899380852, 0.8924439190498491, 0.8911603771181209, 0.8898676340904383, 0.8885655570972711, 0.8872540103700658, 0.8859328551562924, 0.8846019496313539, 0.8832611488072216, 0.8819103044376487, 0.8805492649198068, 0.8791778751921814, 0.8777959766285569, 0.8764034069279066, 0.875, 0.8735855858465207, 0.8721599904374896, 0.8707230355827608, 0.8692745387983595, 0.867814313167405, 0.8663421671953608, 0.8648579046593242, 0.8633613244510647, 0.8618522204134931, 0.8603303811702302, 0.8587955899479256, 0.8572476243909466, 0.855686256368047, 0.8541112517705928, 0.8525223703018984, 0.8509193652572005, 0.8493019832937633, 0.8476699641905824, 0.8460230405971159, 0.8443609377704336, 0.8426833733001434, 0.8409900568204, 0.8392806897082654, 0.8375549647676365, 0.8358125658979022, 0.8340531677464369, 0.8322764353439743, 0.8304820237218405, 0.8286695775099512, 0.826838730514401, 0.8249891052733909, 0.8231203125901445, 0.8212319510413685, 0.8193236064597046, 0.817394851388504, 0.8154452445071265, 0.813474330024837, 0.8114816370412092, 0.8094666788707997, 0.8074289523296622, 0.805367936981091, 0.8032830943377622, 0.8011738670172127, 0.799039677847345, 0.7968799289183656, 0.7946940005772605, 0.792481250360578, 0.7902410118609202, 0.7879725935221379, 0.785675277357781, 0.7833483175868626, 0.7809909391804482, 0.7786023363119852, 0.7761816707036188, 0.7737280698600021, 0.771240625180289, 0.7687183899380853, 0.7661603771181208, 0.763565557097271, 0.7609328551562925, 0.7582611488072215, 0.7555492649198067, 0.7527959766285568, 0.75, 0.7471599904374896, 0.7442745387983594, 0.7413421671953608, 0.7383613244510648, 0.7353303811702302, 0.7322476243909465, 0.7291112517705928, 0.7259193652572006, 0.7226699641905825, 0.7193609377704336, 0.7159900568204, 0.7125549647676365, 0.7090531677464369, 0.7054820237218405, 0.701838730514401, 0.6981203125901445, 0.6943236064597047, 0.6904452445071266, 0.6864816370412093, 0.6824289523296622, 0.6782830943377622, 0.6740396778473451, 0.6696940005772605, 0.6652410118609203, 0.660675277357781, 0.6559909391804482, 0.6511816707036188, 0.646240625180289, 0.6411603771181208, 0.6359328551562924, 0.6305492649198067, 0.625, 0.6192745387983594, 0.6133613244510648, 0.6072476243909465, 0.6009193652572005, 0.5943609377704335, 0.5875549647676365, 0.5804820237218407, 0.5731203125901445, 0.5654452445071266, 0.5574289523296622, 0.5490396778473451, 0.5402410118609203, 0.5309909391804482, 0.521240625180289, 0.5109328551562924, 0.5, 0.48836132445106484, 0.47591936525720047, 0.4625549647676365, 0.44812031259014456, 0.4324289523296621, 0.4152410118609203, 0.396240625180289, 0.375, 0.3509193652572005, 0.3231203125901445, 0.29024101186092033, 0.25, 0.1981203125901445, 0.125, 0]\n  const curveLogUp0Vals = [0, 0.125, 0.1981203125901445, 0.25, 0.29024101186092033, 0.3231203125901445, 0.3509193652572005, 0.375, 0.396240625180289, 0.4152410118609203, 0.4324289523296621, 0.44812031259014456, 0.4625549647676365, 0.47591936525720047, 0.48836132445106484, 0.5, 0.5109328551562924, 0.521240625180289, 0.5309909391804482, 0.5402410118609203, 0.5490396778473451, 0.5574289523296622, 0.5654452445071266, 0.5731203125901445, 0.5804820237218407, 0.5875549647676365, 0.5943609377704335, 0.6009193652572005, 0.6072476243909465, 0.6133613244510648, 0.6192745387983594, 0.625, 0.6305492649198067, 0.6359328551562924, 0.6411603771181208, 0.646240625180289, 0.6511816707036188, 0.6559909391804482, 0.660675277357781, 0.6652410118609203, 0.6696940005772605, 0.6740396778473451, 0.6782830943377622, 0.6824289523296622, 0.6864816370412093, 0.6904452445071266, 0.6943236064597047, 0.6981203125901445, 0.701838730514401, 0.7054820237218405, 0.7090531677464369, 0.7125549647676365, 0.7159900568204, 0.7193609377704336, 0.7226699641905825, 0.7259193652572006, 0.7291112517705928, 0.7322476243909465, 0.7353303811702302, 0.7383613244510648, 0.7413421671953608, 0.7442745387983594, 0.7471599904374896, 0.75, 0.7527959766285568, 0.7555492649198067, 0.7582611488072215, 0.7609328551562925, 0.763565557097271, 0.7661603771181208, 0.7687183899380853, 0.771240625180289, 0.7737280698600021, 0.7761816707036188, 0.7786023363119852, 0.7809909391804482, 0.7833483175868626, 0.785675277357781, 0.7879725935221379, 0.7902410118609202, 0.792481250360578, 0.7946940005772605, 0.7968799289183656, 0.799039677847345, 0.8011738670172127, 0.8032830943377622, 0.805367936981091, 0.8074289523296622, 0.8094666788707997, 0.8114816370412092, 0.813474330024837, 0.8154452445071265, 0.817394851388504, 0.8193236064597046, 0.8212319510413685, 0.8231203125901445, 0.8249891052733909, 0.826838730514401, 0.8286695775099512, 0.8304820237218405, 0.8322764353439743, 0.8340531677464369, 0.8358125658979022, 0.8375549647676365, 0.8392806897082654, 0.8409900568204, 0.8426833733001434, 0.8443609377704336, 0.8460230405971159, 0.8476699641905824, 0.8493019832937633, 0.8509193652572005, 0.8525223703018984, 0.8541112517705928, 0.855686256368047, 0.8572476243909466, 0.8587955899479256, 0.8603303811702302, 0.8618522204134931, 0.8633613244510647, 0.8648579046593242, 0.8663421671953608, 0.867814313167405, 0.8692745387983595, 0.8707230355827608, 0.8721599904374896, 0.8735855858465207, 0.875, 0.8764034069279066, 0.8777959766285569, 0.8791778751921814, 0.8805492649198068, 0.8819103044376487, 0.8832611488072216, 0.8846019496313539, 0.8859328551562924, 0.8872540103700658, 0.8885655570972711, 0.8898676340904383, 0.8911603771181209, 0.8924439190498491, 0.8937183899380852, 0.8949839170972987, 0.8962406251802891, 0.8974886362518668, 0.8987280698600022, 0.8999590431045456, 0.9011816707036188, 0.9023960650577701, 0.9036023363119852, 0.9048005924156348, 0.9059909391804483, 0.9071734803365815, 0.9083483175868626, 0.9095155506592797, 0.9106752773577811, 0.9118275936114533, 0.9129725935221379, 0.9141103694105444, 0.9152410118609203, 0.9163646097643271, 0.917481250360578, 0.9185910192788846, 0.9196940005772605, 0.920790276780727, 0.9218799289183656, 0.9229630365592565, 0.924039677847345, 0.925109929535273, 0.9261738670172128, 0.9272315643607373, 0.9282830943377621, 0.9293285284545906, 0.9303679369810909, 0.9314013889790411, 0.9324289523296622, 0.9334506937603746, 0.9344666788707997, 0.935476972158032, 0.9364816370412093, 0.9374807358854007, 0.9384743300248369, 0.9394624797855052, 0.9404452445071265, 0.941422682564539, 0.942394851388504, 0.9433618074859546, 0.9443236064597047, 0.9452803030276341, 0.9462319510413685, 0.9471786035044686, 0.9481203125901445, 0.9490571296585101, 0.949989105273391, 0.9509162892187013, 0.9518387305144009, 0.952756477432047, 0.9536695775099511, 0.9545780775679562, 0.9554820237218407, 0.9563814613973661, 0.9572764353439743, 0.9581669896481471, 0.9590531677464369, 0.9599350124381807, 0.9608125658979022, 0.9616858696874157, 0.9625549647676365, 0.9634198915101102, 0.9642806897082652, 0.9651373985883981, 0.9659900568204, 0.9668387025282297, 0.9676833733001434, 0.9685241061986826, 0.9693609377704334, 0.9701939040555599, 0.9710230405971157, 0.9718483824501467, 0.9726699641905824, 0.9734878199239289, 0.9743019832937633, 0.9751124874900381, 0.9759193652572005, 0.9767226489021297, 0.9775223703018984, 0.9783185609113643, 0.9791112517705928, 0.979900473512118, 0.980686256368047, 0.9814686301770073, 0.9822476243909466, 0.983023268081785, 0.9837955899479256, 0.9845646183206249, 0.9853303811702302, 0.9860929061122824, 0.9868522204134929, 0.9876083509975935, 0.9883613244510647, 0.9891111670287451, 0.9898579046593242, 0.9906015629507225, 0.9913421671953608, 0.9920797423753214, 0.9928143131674051, 0.9935459039480847, 0.9942745387983595, 0.9950002415085101, 0.9957230355827609, 0.9964429442438464, 0.9971599904374896, 0.9978741968367888, 0.9985855858465207, 0.9992941796073571, 1]\n  \n  const curveSinUpMid_f64vals = [0.5, 0.5092394524795649, 0.5184757496945724, 0.527705737457985, 0.536926263737437, 0.546134179731651, 0.5553263409457504, 0.5644996082651016, 0.5736508490273188, 0.582776938092065, 0.5918747589082851, 0.6009412045785051, 0.6099731789198343, 0.6189675975213094, 0.6279213887972178, 0.6368314950360414, 0.6456948734446624, 0.6545084971874737, 0.6632693564200416, 0.6719744593169641, 0.6806208330935765, 0.6892055250211552, 0.6977256034352712, 0.7061781587369518, 0.7145603043863045, 0.7228691778882691, 0.7311019417701565, 0.7392557845506433, 0.7473279216998894, 0.7553155965904534, 0.7632160814386779, 0.7710266782362246, 0.7787447196714428, 0.7863675700402526, 0.7938926261462366, 0.8013173181896283, 0.8086391106448965, 0.8158555031266255, 0.8229640312433937, 0.8299622674393613, 0.8368478218232787, 0.8436183429846313, 0.8502715187966454, 0.8568050772058762, 0.863216787008112, 0.8695044586103295, 0.8756659447784366, 0.8816991413705515, 0.8876019880555649, 0.8933724690167417, 0.8990086136401197, 0.9045084971874737, 0.9098702414536105, 0.9150920154077753, 0.9201720358189464, 0.9251085678648071, 0.9298999257241862, 0.9345444731527641, 0.939040624041849, 0.943386842960031, 0.9475816456775312, 0.9516235996730644, 0.9555113246230441, 0.9592434928729615, 0.962818829890778, 0.9662361147021779, 0.9694941803075283, 0.9725919140804098, 0.9755282581475768, 0.9783022097502203, 0.9809128215864096, 0.9833592021345937, 0.9856405159580569, 0.9877559839902184, 0.989704883800683, 0.991486549841951, 0.9931003736767012, 0.994545804185573, 0.9958223477553714, 0.9969295684476369, 0.9978670881475172, 0.9986345866928941, 0.999231801983717, 0.9996585300715115, 0.9999146252290263, 1, 0.9999146252290263, 0.9996585300715115, 0.999231801983717, 0.9986345866928941, 0.9978670881475173, 0.9969295684476369, 0.9958223477553714, 0.994545804185573, 0.9931003736767012, 0.991486549841951, 0.989704883800683, 0.9877559839902184, 0.9856405159580569, 0.9833592021345937, 0.9809128215864096, 0.9783022097502204, 0.9755282581475768, 0.9725919140804098, 0.9694941803075283, 0.966236114702178, 0.962818829890778, 0.9592434928729614, 0.9555113246230442, 0.9516235996730644, 0.947581645677531, 0.943386842960031, 0.939040624041849, 0.9345444731527642, 0.9298999257241862, 0.925108567864807, 0.9201720358189464, 0.9150920154077753, 0.9098702414536106, 0.9045084971874737, 0.8990086136401199, 0.8933724690167417, 0.887601988055565, 0.8816991413705515, 0.8756659447784367, 0.8695044586103298, 0.863216787008112, 0.8568050772058762, 0.8502715187966455, 0.8436183429846315, 0.8368478218232787, 0.8299622674393614, 0.8229640312433937, 0.8158555031266255, 0.8086391106448965, 0.8013173181896283, 0.7938926261462367, 0.7863675700402526, 0.7787447196714429, 0.7710266782362247, 0.7632160814386779, 0.7553155965904534, 0.7473279216998894, 0.7392557845506433, 0.7311019417701569, 0.7228691778882694, 0.7145603043863048, 0.706178158736952, 0.6977256034352712, 0.6892055250211551, 0.6806208330935765, 0.6719744593169641, 0.6632693564200417, 0.6545084971874737, 0.6456948734446624, 0.6368314950360415, 0.6279213887972177, 0.6189675975213094, 0.6099731789198343, 0.6009412045785051, 0.5918747589082852, 0.582776938092065, 0.5736508490273189, 0.5644996082651019, 0.5553263409457503, 0.5461341797316509, 0.5369262637374369, 0.527705737457985, 0.5184757496945724, 0.509239452479565, 0.5000000000000001, 0.49076054752043513, 0.48152425030542745, 0.47229426254201495, 0.463073736262563, 0.453865820268349, 0.44467365905424955, 0.4355003917348984, 0.4263491509726813, 0.4172230619079351, 0.40812524109171494, 0.399058795421495, 0.39002682108016584, 0.3810324024786908, 0.3720786112027824, 0.3631685049639588, 0.35430512655533797, 0.34549150281252655, 0.3367306435799584, 0.328025540683036, 0.31937916690642365, 0.31079447497884505, 0.3022743965647289, 0.29382184126304844, 0.28543969561369575, 0.2771308221117311, 0.26889805822984325, 0.26074421544935666, 0.2526720783001105, 0.24468440340954645, 0.23678391856132208, 0.22897332176377533, 0.22125528032855724, 0.2136324299597474, 0.2061073738537635, 0.1986826818103719, 0.19136088935510365, 0.18414449687337464, 0.1770359687566065, 0.17003773256063887, 0.16315217817672156, 0.15638165701536882, 0.1497284812033544, 0.14319492279412377, 0.1367832129918879, 0.1304955413896704, 0.12433405522156332, 0.1183008586294485, 0.1123980119444351, 0.10662753098325839, 0.10099138635988003, 0.09549150281252633, 0.09012975854638927, 0.08490798459222476, 0.07982796418105376, 0.074891432135193, 0.07010007427581388, 0.06545552684723593, 0.06095937595815093, 0.056613157039969164, 0.052418354322468774, 0.04837640032693569, 0.04448867537695578, 0.040756507127038655, 0.03718117010922184, 0.03376388529782226, 0.030505819692471736, 0.027408085919590264, 0.024471741852423234, 0.021697790249779636, 0.019087178413590478, 0.016640797865406287, 0.014359484041943149, 0.012244016009781755, 0.010295116199317111, 0.008513450158049163, 0.006899626323298769, 0.005454195814427076, 0.004177652244628682, 0.0030704315523631953, 0.002132911852482766, 0.0013654133071059893, 0.0007681980162830282, 0.00034146992848854696, 0.00008537477097364521, 0]\n\n  for (let i = 0; i < 256; i++) {\n\n    lineUpFromPoint1[i] = <f32> valsLineUpFromPoint1[i]\n    lineDownToPoint1[i] = <f32> valsLineDownToPoint1[i]\n    \n    lineUpFromPoint2[i] = <f32> valsLineUpFromPoint2[i]\n    lineDownToPoint2[i] = <f32> valsLineDownToPoint2[i]\n    lineDownToPoint5[i] = <f32> valsLineDownToPoint5[i]\n    lineDownToPoint75[i] = <f32> valsLineDownToPoint75[i]\n\n    curveExpUp[i] = <f32> valscurveExpUp[i]\n    curveExpDown[i] = <f32> valscurveExpDown[i]\n    \n    curveCircleBigUp[i] = <f32> valsCurveCircleBigUp[i]\n    curveCircleBigDown[i] = <f32> valsCurveCircleBigDown[i]\n\n    curveRootMidUp[i] = <f32> valsCurveRootMidUp[i]\n    curveRootMidDown[i] = <f32> valsCurveRootMidDown[i]\n\n    curveGrayUp[i] = <f32> valsCurveGrayUp[i]\n    curveGrayDown[i] = <f32> valsCurveGrayDown[i]\n\n    curveSinFull[i] = <f32> valsCurveSinFull[i]\n    curveSinFull32[i] = <f32> valsCurveSinFull32[i]\n    curveSinFull224[i] = <f32> valsCurveSinFull224[i]\n\n    curveSinUp[i] = <f32> curveSinUpVals[i]\n    curveSinDown[i] = <f32> curveSinDownVals[i]\n\n    curveLogDown0[i] = <f32> curveLogDown0Vals[i]\n    curveLogUp0[i] = <f32> curveLogUp0Vals[i]\n\n    curveSinFull_0[i] = valsCurveSinFull[i]\n    curveSinUpMid_f64[i] = curveSinUpMid_f64vals[i]\n\n    curve_camel[i] = [0.0000000000000000000000000, 0.0006070039028550276672888, 0.0024265417964677861960288, 0.0054541958144270130323661, 0.0096826147655111240858394, 0.0151015319824952618660285, 0.0216977902497795978320472, 0.0294553737493141974679300, 0.0383554469472553241637947, 0.0483764003269355480352232, 0.0594939028571077402340883, 0.0716809610680686076777945, 0.0849079845922246639888797, 0.0991428580099666528768765, 0.1143510188264096616439502, 0.1304955413896704274900884, 0.1475372265469264143611383, 0.1654346968205708534593867, 0.1841444968733745024547233, 0.2036211990187225540083205, 0.2238175135197470744241599, 0.2446844034095465025835381, 0.2661712035537066034507347, 0.2882257436660378702164564, 0.3107944749788448257632467, 0.3338226002601701880578844, 0.3572542068623289490680861, 0.3810324024786905794393022, 0.4050994532790869739891093, 0.4293969240884543125957862, 0.4538658202683489850670639, 0.4784467309568520843043871, 0.5030799733190693956430550, 0.5277057374579849913232010, 0.5522642316338267631792291, 0.5766958274393427785753374, 0.6009412045785050837665153, 0.6249414948971154792900506, 0.6486384253156012302810041, 0.6719744593169640900498507, 0.6948929366463395540520764, 0.7173382108829824410634046, 0.7392557845506431135618186, 0.7605924414382925213828912, 0.7812963758099115141320112, 0.8013173181896282581959667, 0.8206066574167891758406768, 0.8391175586746170145246992, 0.8568050772058759534388628, 0.8736262674394456029247635, 0.8895402872628351831352234, 0.9045084971874736146091323, 0.9184945541659887968677367, 0.9314644998336947256944995, 0.9433868429600309468696651, 0.9542326359097618171389854, 0.9639755449282872978855607, 0.9725919140804097917651916, 0.9800608226873139816603953, 0.9863641361223023373838714, 0.9914865498419507261473882, 0.9954156265457801966434204, 0.9981418263742146690375989, 0.9996585300715115085523621, 0.9999620550574152000322670, 0.9990516643685221076509606, 0.9969295684476368046844641, 0.9936009197767845524396080, 0.9890738003669029554387748, 0.9833592021345937128629089, 0.9764710002135782440646494, 0.9684259192656553549838350, 0.9592434928729615117859453, 0.9489460161101291868490648, 0.9375584914114962753473037, 0.9251085678648069965390732, 0.9116264740787936027288652, 0.8971449447876429506010254, 0.8816991413705513869203401, 0.8653265664793466926951737, 0.8480669729814633850395467, 0.8299622674393615229249122, 0.8110564083607368912609559, 0.7913952994665803819529515, 0.7710266782362248383364545, 0.7500000000000001110223025, 0.7283663178609202093483077, 0.7061781587369517776409111, 0.6834893958248361434115736, 0.6603551177951275663602360, 0.6368314950360416393237983, 0.6129756432708740598869213, 0.5888454848801346619424635, 0.5644996082651019264631032, 0.5399971255942707104580336, 0.5153975292780852424101568, 0.4907605475204352418749920, 0.4661459992976464405955994, 0.4416136491170716826815124, 0.4172230619079349556166392, 0.3930334583967512451785353, 0.3691035713184798172648016, 0.3454915028125264409020190, 0.3222545833498411949058493, 0.2994492325336408633518204, 0.2771308221117311232362113, 0.2553535415330381308507413, 0.2341702663747819990192056, 0.2136324299597474885015203, 0.1937898984753751163712110, 0.1746908498978787804833956, 0.1563816570153685192590132, 0.1389067748339956054337563, 0.1223086326405034007791528, 0.1066275309832584172742287, 0.0919015438218892394273141, 0.0781664260831169410703723, 0.0654555268472359758069601, 0.0537997083760260383367147, 0.0432272711786995458838057, 0.0337638852978221076783782, 0.0254325279820494208615766, 0.0182534278970084840043597, 0.0122440160097817343776150, 0.0074188832662468034984116, 0.0037897451640321691036795, 0.0013654133071059767166877, 0.0001517740110641936158217, 0.0001517740110641875713945, 0.0013654133071059587189316, 0.0037897451640320836685483, 0.0074188832662466838024917, 0.0122440160097816823359107, 0.0182534278970084250237615, 0.0254325279820493410642968, 0.0337638852978220174727575, 0.0432272711786994418003971, 0.0537997083760259342533061, 0.0654555268472356288622649, 0.0781664260831165663701015, 0.0919015438218893365718287, 0.1066275309832585144187433, 0.1223086326405032481234869, 0.1389067748339954389003026, 0.1563816570153683527255595, 0.1746908498978786139499420, 0.1937898984753745890152743, 0.2136324299597469056344323, 0.2341702663747821377970837, 0.2553535415330383528953462, 0.2771308221117309011916063, 0.2994492325336406413072154, 0.3222545833498409173500932, 0.3454915028125261633462628, 0.3691035713184797062424991, 0.3930334583967509676227792, 0.4172230619079350666389416, 0.4416136491170717937038148, 0.4661459992976462740621457, 0.4907605475204349088080846, 0.5153975292780849093432494, 0.5399971255942705994357311, 0.5644996082651012603292884, 0.5888454848801334406971364, 0.6129756432708738378423163, 0.6368314950360414172791934, 0.6603551177951273443156310, 0.6834893958248356993223638, 0.7061781587369513335517013, 0.7283663178609199873037028, 0.7499999999999996669330926, 0.7710266782362242832249422, 0.7913952994665806039975564, 0.8110564083607371133055608, 0.8299622674393615229249122, 0.8480669729814633850395467, 0.8653265664793466926951737, 0.8816991413705513869203401, 0.8971449447876429506010254, 0.9116264740787936027288652, 0.9251085678648069965390732, 0.9375584914114962753473037, 0.9489460161101288537821574, 0.9592434928729612897413404, 0.9684259192656551329392300, 0.9764710002135780220200445, 0.9833592021345934908183040, 0.9890738003669027333941699, 0.9936009197767845524396080, 0.9969295684476368046844641, 0.9990516643685221076509606, 0.9999620550574152000322670, 0.9996585300715115085523621, 0.9981418263742146690375989, 0.9954156265457801966434204, 0.9914865498419509481919931, 0.9863641361223023373838714, 0.9800608226873139816603953, 0.9725919140804097917651916, 0.9639755449282872978855607, 0.9542326359097618171389854, 0.9433868429600309468696651, 0.9314644998336949477391045, 0.9184945541659890189123416, 0.9045084971874738366537372, 0.8895402872628354051798283, 0.8736262674394456029247635, 0.8568050772058763975280726, 0.8391175586746174586139091, 0.8206066574167895089075841, 0.8013173181896285912628741, 0.7812963758099120692435235, 0.7605924414382925213828912, 0.7392557845506431135618186, 0.7173382108829824410634046, 0.6948929366463397760966814, 0.6719744593169643120944556, 0.6486384253156014523256090, 0.6249414948971155903123531, 0.6009412045785054168334227, 0.5766958274393421124415227, 0.5522642316338264301123218, 0.5277057374579846582562936, 0.5030799733190690625761476, 0.4784467309568529724828068, 0.4538658202683497622231812, 0.4293969240884552007742059, 0.4050994532790880842121339, 0.3810324024786906904616046, 0.3572542068623291711126910, 0.3338226002601704656136405, 0.3107944749788452143413053, 0.2882257436660382032833638, 0.2661712035537070475399446, 0.2446844034095469744283236, 0.2238175135197476017800966, 0.2036211990187223597192911, 0.1841444968733743914324208, 0.1654346968205708534593867, 0.1475372265469264143611383, 0.1304955413896705107568152, 0.1143510188264097726662527, 0.0991428580099667916547546, 0.0849079845922248305223334, 0.0716809610680687880890360, 0.0594939028571079484009054, 0.0483764003269357770187220, 0.0383554469472555392695057, 0.0294553737493144264514289, 0.0216977902497798094683112, 0.0151015319824954526856109, 0.0096826147655112906192931, 0.0054541958144270173691748, 0.0024265417964677966043696, 0.0006070039028550363409062, 0.0000000000000000000000000][i]\n    curveSinFull_1[i] = [0.1000000000000000055511151, 0.1110443844571479404814696, 0.1220871056706210600051321, 0.1331265006472229506240268, 0.1441609068946762273188966, 0.1551886626719877204649833, 0.1662081072397006975549516, 0.1772175811099959141792226, 0.1882154262966045377147850, 0.1991999865644947798060116, 0.2101696076792946010769469, 0.2211226376564135454039217, 0.2320574270098255953431732, 0.2429723290004753011306349, 0.2538656998842711010055950, 0.2647358991596268640300593, 0.2755812898145154621332154, 0.2864002385729966793093126, 0.2971911161411828206091457, 0.3079522974526039957865464, 0.3186821619129375227075229, 0.3293790936440631478276941, 0.3400414817274085566012332, 0.3506677204465478148165403, 0.3612562095290161590099842, 0.3718053543873053312651678, 0.3823135663590023769486947, 0.3927792629460366002902560, 0.4032008680529980404472212, 0.4135768122244911637608311, 0.4239055328814893552902276, 0.4341854745566537943091134, 0.4444150891285808535613455, 0.4545928360549432722947927, 0.4647171826044909082042977, 0.4747866040878734317232102, 0.4847995840872538764187993, 0.4947546146846748538195015, 0.5046501966891459023401012, 0.5144848398624159990788485, 0.5242570631433979277957746, 0.5339653948712104192253491, 0.5436083730068056452111591, 0.5531845453531458733920090, 0.5626924697738995284623797, 0.5721307144106220210488800, 0.5814978578983874824004374, 0.5907924895798418729597756, 0.6000132097176419376793888, 0.6091586297052518084171879, 0.6182273722760608380966119, 0.6272180717107950220778889, 0.6361293740431900323173409, 0.6449599372638930017131997, 0.6537084315225640818169950, 0.6623735393281476868665436, 0.6709539557472808946059217, 0.6794483886008122475175242, 0.6878555586583990910654052, 0.6961741998311545831512603, 0.7044030593623165081851312, 0.7125408980159076977045629, 0.7205864902633601909442973, 0.7285386244680756018254897, 0.7363961030678927155435076, 0.7441577427554367796247448, 0.7518223746563201803638776, 0.7593888445051715230249556, 0.7668560128194631397846592, 0.7742227550711133776673023, 0.7814879618558361329405670, 0.7886505390602130960431282, 0.7957094080264631719145996, 0.8026635057148849838881688, 0.8095117848639455937487241, 0.8162532141479952318974256, 0.8228867783325803930694065, 0.8294114784273353135901630, 0.8358263318364252958403426, 0.8421303725065227840929083, 0.8483226510722906565931112, 0.8544022349993541931567620, 0.8603682087247362941795359, 0.8662196737947386315781273, 0.8719557490002448618682251, 0.8775755705094280267886120, 0.8830782919978401590554995, 0.8884630847758658855894964, 0.8937291379135194890892535, 0.8988756583625685525618110, 0.9039018710759637587059956, 0.9088070191245584128481028, 0.9135903638110990376830500, 0.9182511847814701644310276, 0.9227887801331776662649986, 0.9272024665210519822622359, 0.9314915792601580202259015, 0.9356554724258939748082753, 0.9396935189512649611032202, 0.9436051107213174748977735, 0.9473896586647186923713093, 0.9510465928424691739451191, 0.9545753625337329850708556, 0.9579754363187743537721985, 0.9612463021589879863526562, 0.9643874674740091634816963, 0.9673984592158958450980322, 0.9702788239403669079408132, 0.9730281278750895213036642, 0.9756459569850040036698147, 0.9781319170346757241318869, 0.9804856336476648337452389, 0.9827067523629073875213180, 0.9847949386880946454070340, 0.9867498781500471105587735, 0.9885712763420725357477181, 0.9902588589683029018928551, 0.9918123718850020420489955, 0.9932315811388389148461897, 0.9945162730021204211539043, 0.9956662540049771026318126, 0.9966813509645001678549647, 0.9975614110108211862737448, 0.9983063016101342279640107, 0.9989159105846551200968975, 0.9993901461295146004815138, 0.9997289368265838138682966, 0.9999322316552300415892773, 0.9999322316552300415892773, 0.9997289368265838138682966, 0.9993901461295146004815138, 0.9989159105846551200968975, 0.9983063016101342279640107, 0.9975614110108211862737448, 0.9966813509645001678549647, 0.9956662540049771026318126, 0.9945162730021204211539043, 0.9932315811388389148461897, 0.9918123718850020420489955, 0.9902588589683029018928551, 0.9885712763420725357477181, 0.9867498781500471105587735, 0.9847949386880946454070340, 0.9827067523629073875213180, 0.9804856336476648337452389, 0.9781319170346757241318869, 0.9756459569850040036698147, 0.9730281278750895213036642, 0.9702788239403669079408132, 0.9673984592158958450980322, 0.9643874674740091634816963, 0.9612463021589879863526562, 0.9579754363187743537721985, 0.9545753625337329850708556, 0.9510465928424691739451191, 0.9473896586647186923713093, 0.9436051107213174748977735, 0.9396935189512649611032202, 0.9356554724258939748082753, 0.9314915792601580202259015, 0.9272024665210519822622359, 0.9227887801331776662649986, 0.9182511847814701644310276, 0.9135903638110990376830500, 0.9088070191245584128481028, 0.9039018710759637587059956, 0.8988756583625685525618110, 0.8937291379135194890892535, 0.8884630847758658855894964, 0.8830782919978401590554995, 0.8775755705094280267886120, 0.8719557490002448618682251, 0.8662196737947386315781273, 0.8603682087247362941795359, 0.8544022349993541931567620, 0.8483226510722906565931112, 0.8421303725065227840929083, 0.8358263318364252958403426, 0.8294114784273353135901630, 0.8228867783325803930694065, 0.8162532141479952318974256, 0.8095117848639455937487241, 0.8026635057148849838881688, 0.7957094080264631719145996, 0.7886505390602130960431282, 0.7814879618558361329405670, 0.7742227550711133776673023, 0.7668560128194631397846592, 0.7593888445051715230249556, 0.7518223746563201803638776, 0.7441577427554367796247448, 0.7363961030678927155435076, 0.7285386244680756018254897, 0.7205864902633601909442973, 0.7125408980159076977045629, 0.7044030593623165081851312, 0.6961741998311545831512603, 0.6878555586583990910654052, 0.6794483886008122475175242, 0.6709539557472808946059217, 0.6623735393281476868665436, 0.6537084315225640818169950, 0.6449599372638930017131997, 0.6361293740431900323173409, 0.6272180717107950220778889, 0.6182273722760608380966119, 0.6091586297052518084171879, 0.6000132097176419376793888, 0.5907924895798418729597756, 0.5814978578983874824004374, 0.5721307144106220210488800, 0.5626924697738995284623797, 0.5531845453531458733920090, 0.5436083730068056452111591, 0.5339653948712104192253491, 0.5242570631433979277957746, 0.5144848398624159990788485, 0.5046501966891459023401012, 0.4947546146846748538195015, 0.4847995840872538764187993, 0.4747866040878734317232102, 0.4647171826044909082042977, 0.4545928360549432722947927, 0.4444150891285808535613455, 0.4341854745566537943091134, 0.4239055328814893552902276, 0.4135768122244911637608311, 0.4032008680529980404472212, 0.3927792629460366002902560, 0.3823135663590023769486947, 0.3718053543873053312651678, 0.3612562095290161590099842, 0.3506677204465478148165403, 0.3400414817274085566012332, 0.3293790936440631478276941, 0.3186821619129375227075229, 0.3079522974526039957865464, 0.2971911161411828206091457, 0.2864002385729966793093126, 0.2755812898145154621332154, 0.2647358991596268640300593, 0.2538656998842711010055950, 0.2429723290004753011306349, 0.2320574270098255953431732, 0.2211226376564135454039217, 0.2101696076792946010769469, 0.1991999865644947798060116, 0.1882154262966045377147850, 0.1772175811099959141792226, 0.1662081072397006975549516, 0.1551886626719877204649833, 0.1441609068946762273188966, 0.1331265006472229506240268, 0.1220871056706210600051321, 0.1110443844571479404814696, 0.1000000000000000055511151][i]\n    curveSinFull_25[i] = [0.2500000000000000000000000, 0.2592036537142899388364015, 0.2684059213921842212968727, 0.2776054172060191116422345, 0.2868007557455635181398179, 0.2959905522266564337208195, 0.3051734226997505627920759, 0.3143479842583299377345440, 0.3235128552471704388437956, 0.3326666554704122980012926, 0.3418080063994121120529712, 0.3509355313803446119180762, 0.3600478558415213248267150, 0.3691436075003960981533169, 0.3782214165702258990009454, 0.3872799159663556922694738, 0.3963177415120961999406290, 0.4053335321441638994244272, 0.4143259301176523412557628, 0.4232935812105033113184049, 0.4322351349274479170858854, 0.4411492447033859010119272, 0.4500345681061737601602601, 0.4588897670387898086730161, 0.4677135079408467621675527, 0.4765044619894210908839227, 0.4852613052991686659609627, 0.4939827191216972224196979, 0.5026673900441650522097348, 0.5113140101870758957858243, 0.5199212774012410553936547, 0.5284878954638780879093929, 0.5370125742738173224566367, 0.5454940300457860047345093, 0.5539309855037424235035814, 0.5623221700732279337842101, 0.5706663200727115636823328, 0.5789621789038956745088171, 0.5872084972409549186167510, 0.5954040332186800732472420, 0.6035475526194982176519943, 0.6116378290593420530285584, 0.6196736441723380561796830, 0.6276537877942881538118058, 0.6355770581449162737186498, 0.6434422620088516842074000, 0.6512482149153229205040816, 0.6589937413165348756294293, 0.6666776747647016332365411, 0.6742988580877098403476566, 0.6818561435633839762360253, 0.6893483930923292035686245, 0.6967744783693250454348345, 0.7041332810532441310868990, 0.7114236929354701421956975, 0.7186446161067897575591701, 0.7257949631227340603345510, 0.7328736571673435395979368, 0.7398796322153325943915547, 0.7468118331926287822852828, 0.7536692161352637198135085, 0.7604507483465897665908528, 0.7671554085528000666016624, 0.7737821870567296311804739, 0.7803300858899105962862564, 0.7867981189628638905020352, 0.7931853122136001132957972, 0.7994907037543096395282305, 0.8057133440162193016575998, 0.8118522958925944443819844, 0.8179066348798633701022709, 0.8238754492168441911914556, 0.8297578400220526617658834, 0.8355529214290707828993732, 0.8412598207199546429535530, 0.8468776784566627302552888, 0.8524056486104836238837379, 0.8578428986894460761547521, 0.8631886098636878390522043, 0.8684419770887690237515244, 0.8736022092269088989979764, 0.8786685291661284757935846, 0.8836401739372802266458962, 0.8885163948289489521670248, 0.8932964575002040330531372, 0.8979796420911900778349946, 0.9025652433315335398944512, 0.9070525706465549786727820, 0.9114409482612662039002771, 0.9157297153021404234607417, 0.9199182258966365210994809, 0.9240058492704653625438027, 0.9279919698425824758913905, 0.9318759873178917851888059, 0.9356573167776480737245492, 0.9393353887675433000481462, 0.9429096493834649983512008, 0.9463795603549116641772798, 0.9497445991260541342526835, 0.9530042589344311920740438, 0.9561580488872656324872423, 0.9592054940353909042727309, 0.9621461354447775615739147, 0.9649795302656453133138825, 0.9677052517991566737975973, 0.9703228895616743399088477, 0.9728320493465798524113097, 0.9752323532836391084543948, 0.9775234398959079529234373, 0.9797049641541700770730472, 0.9817765975288964552802895, 0.9837380280397207688025674, 0.9855889603024228229344317, 0.9873291155734121860021446, 0.9889582317917059439693617, 0.9904760636183937982934822, 0.9918823824735857330736621, 0.9931769765708350350408296, 0.9943596509490324475422085, 0.9954302275017670176282536, 0.9963885450041476410376617, 0.9972344591370835287236218, 0.9979678425090177107392719, 0.9985885846751119121478268, 0.9990965921538792482436975, 0.9994917884412621855716452, 0.9997741140221532152310147, 0.9999435263793583494873474, 0.9999435263793583494873474, 0.9997741140221532152310147, 0.9994917884412621855716452, 0.9990965921538792482436975, 0.9985885846751119121478268, 0.9979678425090177107392719, 0.9972344591370835287236218, 0.9963885450041476410376617, 0.9954302275017670176282536, 0.9943596509490324475422085, 0.9931769765708350350408296, 0.9918823824735857330736621, 0.9904760636183937982934822, 0.9889582317917059439693617, 0.9873291155734121860021446, 0.9855889603024228229344317, 0.9837380280397207688025674, 0.9817765975288964552802895, 0.9797049641541700770730472, 0.9775234398959079529234373, 0.9752323532836391084543948, 0.9728320493465798524113097, 0.9703228895616743399088477, 0.9677052517991566737975973, 0.9649795302656453133138825, 0.9621461354447775615739147, 0.9592054940353909042727309, 0.9561580488872656324872423, 0.9530042589344311920740438, 0.9497445991260541342526835, 0.9463795603549116641772798, 0.9429096493834649983512008, 0.9393353887675433000481462, 0.9356573167776480737245492, 0.9318759873178917851888059, 0.9279919698425824758913905, 0.9240058492704653625438027, 0.9199182258966365210994809, 0.9157297153021404234607417, 0.9114409482612662039002771, 0.9070525706465549786727820, 0.9025652433315335398944512, 0.8979796420911900778349946, 0.8932964575002040330531372, 0.8885163948289489521670248, 0.8836401739372802266458962, 0.8786685291661284757935846, 0.8736022092269088989979764, 0.8684419770887690237515244, 0.8631886098636878390522043, 0.8578428986894460761547521, 0.8524056486104836238837379, 0.8468776784566627302552888, 0.8412598207199546429535530, 0.8355529214290707828993732, 0.8297578400220526617658834, 0.8238754492168441911914556, 0.8179066348798633701022709, 0.8118522958925944443819844, 0.8057133440162193016575998, 0.7994907037543096395282305, 0.7931853122136001132957972, 0.7867981189628638905020352, 0.7803300858899105962862564, 0.7737821870567296311804739, 0.7671554085528000666016624, 0.7604507483465897665908528, 0.7536692161352637198135085, 0.7468118331926287822852828, 0.7398796322153325943915547, 0.7328736571673435395979368, 0.7257949631227340603345510, 0.7186446161067897575591701, 0.7114236929354701421956975, 0.7041332810532441310868990, 0.6967744783693250454348345, 0.6893483930923292035686245, 0.6818561435633839762360253, 0.6742988580877098403476566, 0.6666776747647016332365411, 0.6589937413165348756294293, 0.6512482149153229205040816, 0.6434422620088516842074000, 0.6355770581449162737186498, 0.6276537877942881538118058, 0.6196736441723380561796830, 0.6116378290593420530285584, 0.6035475526194982176519943, 0.5954040332186800732472420, 0.5872084972409549186167510, 0.5789621789038956745088171, 0.5706663200727115636823328, 0.5623221700732279337842101, 0.5539309855037424235035814, 0.5454940300457860047345093, 0.5370125742738173224566367, 0.5284878954638780879093929, 0.5199212774012410553936547, 0.5113140101870758957858243, 0.5026673900441650522097348, 0.4939827191216972224196979, 0.4852613052991686659609627, 0.4765044619894210908839227, 0.4677135079408467621675527, 0.4588897670387898086730161, 0.4500345681061737601602601, 0.4411492447033859010119272, 0.4322351349274479170858854, 0.4232935812105033113184049, 0.4143259301176523412557628, 0.4053335321441638994244272, 0.3963177415120961999406290, 0.3872799159663556922694738, 0.3782214165702258990009454, 0.3691436075003960981533169, 0.3600478558415213248267150, 0.3509355313803446119180762, 0.3418080063994121120529712, 0.3326666554704122980012926, 0.3235128552471704388437956, 0.3143479842583299377345440, 0.3051734226997505627920759, 0.2959905522266564337208195, 0.2868007557455635181398179, 0.2776054172060191116422345, 0.2684059213921842212968727, 0.2592036537142899388364015, 0.2500000000000000000000000][i]\n    curveSinFull_5[i] = [0.5000000000000000000000000, 0.5061357691428599592242676, 0.5122706142614561475312485, 0.5184036114706793707540555, 0.5245338371637090491006461, 0.5306603681511042891472130, 0.5367822817998336715206165, 0.5428986561722199954971302, 0.5490085701647803295699646, 0.5551111036469414949934276, 0.5612053375996081117094150, 0.5672903542535631116194850, 0.5733652372276808462103759, 0.5794290716669306950947771, 0.5854809443801506363413978, 0.5915199439775704615129825, 0.5975451610080640962863185, 0.6035556880961092662829515, 0.6095506200784348571630744, 0.6155290541403355408789366, 0.6214900899516319077164894, 0.6274328298022573413561531, 0.6333563787374492104476076, 0.6392598446925265021079099, 0.6451423386272311377709343, 0.6510029746596139865744135, 0.6568408701994457032924402, 0.6626551460811314075982636, 0.6684449266961099977990557, 0.6742093401247173378720845, 0.6799475182674941109439715, 0.6856585969759187992877969, 0.6913417161825449186451920, 0.6969960200305240771712079, 0.7026206570024948749875193, 0.7082147800488185485079384, 0.7137775467151410424548885, 0.7193081192692638570207464, 0.7248056648273032420703998, 0.7302693554791199748166264, 0.7356983684129988487754304, 0.7410918860395613316782715, 0.7464490961148919634382537, 0.7517691918628588432227389, 0.7570513720966107751308982, 0.7622948413392345301531350, 0.7674988099435485766619536, 0.7726624942110231764047512, 0.7777851165098010888243607, 0.7828659053918065602317711, 0.7879040957089227248388852, 0.7928989287282194320383155, 0.7978496522462166229416880, 0.8027555207021628280728009, 0.8076157952903133541155967, 0.8124297440711931717061134, 0.8171966420818227438971348, 0.8219157714448956930652912, 0.8265864214768883222461682, 0.8312078887950858918642894, 0.8357794774235092205572073, 0.8403004988977265110605686, 0.8447702723685334147418757, 0.8491881247044864577944168, 0.8535533905932737308575042, 0.8578654126419092973421243, 0.8621235414757334458712990, 0.8663271358362063523372854, 0.8704755626774796084532682, 0.8745681972617296295879896, 0.8786044232532422837422814, 0.8825836328112295348091720, 0.8865052266813684411772556, 0.8903686142860471885995821, 0.8941732138133031693172370, 0.8979184523044417831627584, 0.9016037657403224159224919, 0.9052285991262973841031680, 0.9087924065757918556940353, 0.9122946513925126454935821, 0.9157348061512726733468526, 0.9191123527774189838623897, 0.9224267826248535584454658, 0.9256775965526325977705824, 0.9288643050001360590428590, 0.9319864280607933482158955, 0.9350434955543556192480992, 0.9380350470977032451003197, 0.9409606321741774692668514, 0.9438198102014270229886961, 0.9466121505977576067181190, 0.9493372328469769083625351, 0.9519946465617217246091286, 0.9545839915452611901258706, 0.9571048778517653454755987, 0.9595569258450289407136324, 0.9619397662556433692415681, 0.9642530402366078501330549, 0.9664963994173694228351224, 0.9686695059562875353975642, 0.9707720325915103476432932, 0.9728036626902606398559215, 0.9747640902965183373751756, 0.9766530201770968755425884, 0.9784701678661045232132665, 0.9802152597077828932725652, 0.9818880328977199756224081, 0.9834882355224260352954957, 0.9850156265972720426304932, 0.9864699761027799773671632, 0.9878510650192642295053247, 0.9891586853598137718535099, 0.9903926402016152152896211, 0.9915527437156081980162980, 0.9926388211944705552980395, 0.9936507090789292728771898, 0.9945882549823905627306431, 0.9954513177138899493456847, 0.9962397672993550390430073, 0.9969534850011780857670374, 0.9975923633360983533435729, 0.9981563060913889451342129, 0.9986452283393451034854138, 0.9990590564500745340836829, 0.9993977281025862025032325, 0.9996611922941747163662285, 0.9998494093481020694724748, 0.9999623509195723070064332, 0.9999623509195723070064332, 0.9998494093481020694724748, 0.9996611922941747163662285, 0.9993977281025862025032325, 0.9990590564500745340836829, 0.9986452283393451034854138, 0.9981563060913889451342129, 0.9975923633360983533435729, 0.9969534850011780857670374, 0.9962397672993550390430073, 0.9954513177138899493456847, 0.9945882549823905627306431, 0.9936507090789292728771898, 0.9926388211944705552980395, 0.9915527437156081980162980, 0.9903926402016152152896211, 0.9891586853598137718535099, 0.9878510650192642295053247, 0.9864699761027799773671632, 0.9850156265972720426304932, 0.9834882355224260352954957, 0.9818880328977199756224081, 0.9802152597077828932725652, 0.9784701678661045232132665, 0.9766530201770968755425884, 0.9747640902965183373751756, 0.9728036626902606398559215, 0.9707720325915103476432932, 0.9686695059562875353975642, 0.9664963994173694228351224, 0.9642530402366078501330549, 0.9619397662556433692415681, 0.9595569258450289407136324, 0.9571048778517653454755987, 0.9545839915452611901258706, 0.9519946465617217246091286, 0.9493372328469769083625351, 0.9466121505977576067181190, 0.9438198102014270229886961, 0.9409606321741774692668514, 0.9380350470977032451003197, 0.9350434955543556192480992, 0.9319864280607933482158955, 0.9288643050001360590428590, 0.9256775965526325977705824, 0.9224267826248535584454658, 0.9191123527774189838623897, 0.9157348061512726733468526, 0.9122946513925126454935821, 0.9087924065757918556940353, 0.9052285991262973841031680, 0.9016037657403224159224919, 0.8979184523044417831627584, 0.8941732138133031693172370, 0.8903686142860471885995821, 0.8865052266813684411772556, 0.8825836328112295348091720, 0.8786044232532422837422814, 0.8745681972617296295879896, 0.8704755626774796084532682, 0.8663271358362063523372854, 0.8621235414757334458712990, 0.8578654126419092973421243, 0.8535533905932737308575042, 0.8491881247044864577944168, 0.8447702723685334147418757, 0.8403004988977265110605686, 0.8357794774235092205572073, 0.8312078887950858918642894, 0.8265864214768883222461682, 0.8219157714448956930652912, 0.8171966420818227438971348, 0.8124297440711931717061134, 0.8076157952903133541155967, 0.8027555207021628280728009, 0.7978496522462166229416880, 0.7928989287282194320383155, 0.7879040957089227248388852, 0.7828659053918065602317711, 0.7777851165098010888243607, 0.7726624942110231764047512, 0.7674988099435485766619536, 0.7622948413392345301531350, 0.7570513720966107751308982, 0.7517691918628588432227389, 0.7464490961148919634382537, 0.7410918860395613316782715, 0.7356983684129988487754304, 0.7302693554791199748166264, 0.7248056648273032420703998, 0.7193081192692638570207464, 0.7137775467151410424548885, 0.7082147800488185485079384, 0.7026206570024948749875193, 0.6969960200305240771712079, 0.6913417161825449186451920, 0.6856585969759187992877969, 0.6799475182674941109439715, 0.6742093401247173378720845, 0.6684449266961099977990557, 0.6626551460811314075982636, 0.6568408701994457032924402, 0.6510029746596139865744135, 0.6451423386272311377709343, 0.6392598446925265021079099, 0.6333563787374492104476076, 0.6274328298022573413561531, 0.6214900899516319077164894, 0.6155290541403355408789366, 0.6095506200784348571630744, 0.6035556880961092662829515, 0.5975451610080640962863185, 0.5915199439775704615129825, 0.5854809443801506363413978, 0.5794290716669306950947771, 0.5733652372276808462103759, 0.5672903542535631116194850, 0.5612053375996081117094150, 0.5551111036469414949934276, 0.5490085701647803295699646, 0.5428986561722199954971302, 0.5367822817998336715206165, 0.5306603681511042891472130, 0.5245338371637090491006461, 0.5184036114706793707540555, 0.5122706142614561475312485, 0.5061357691428599592242676, 0.5000000000000000000000000][i]\n\n    curve_gamma_up_0_25[i] = [0.0000000000000000000000000, 0.2502447384232382998625610, 0.2975928234249097803498785, 0.3293405971169179879964872, 0.3538995029906511491368803, 0.3742031646082124574093086, 0.3916541813506835278957396, 0.4070422262074326891223564, 0.4208598069524090989901310, 0.4334366012758323338793787, 0.4450050658086207033825588, 0.4557357796065328314760734, 0.4657579390827988330414655, 0.4751719469253833372235363, 0.4840575115124259863996770, 0.4924790605054523151551393, 0.5004894768464765997251220, 0.5081327481546147328828056, 0.5154458901398172310237555, 0.5224603717824506388112127, 0.5292031904718659252040425, 0.5356976960859320957553109, 0.5419642316694008865596288, 0.5480206379188944376679160, 0.5538826550262683223735394, 0.5595642461260142974666110, 0.5650778601333612538581974, 0.5704346472015739966110459, 0.5756446367610885683774313, 0.5807168857304306763822410, 0.5856596027429394890617687, 0.5904802529333550431545063, 0.5951856468498195606997569, 0.5997820163128023684961931, 0.6042750794713536155455813, 0.6086700968648568466079496, 0.6129719199531815654324873, 0.6171850333064884397415994, 0.6213135914306571194742901, 0.6253614510325380404509588, 0.6293321993912830425443872, 0.6332291793905681087650805, 0.6370555116759558655914475, 0.6408141143276628870495415, 0.6445077203782345609539561, 0.6481388934544840552121059, 0.6517100417814792878701269, 0.6552234307517389444441847, 0.6586811942338359759929745, 0.6620853447702982341738220, 0.6654377827941899692376637, 0.6687403049764220064332676, 0.6719946118011056457319796, 0.6752023144537256937880443, 0.6783649410961789527618748, 0.6814839425935317329674490, 0.6845606977494435030351383, 0.6875965181003809156834450, 0.6905926523128502747539414, 0.6935502902227588251093948, 0.6964705665515706911605776, 0.6993545643300445036061319, 0.7022033180569521304548175, 0.7050178166172174076820056, 0.7077990059813022982737607, 0.7105477917053864000962449, 0.7132650412498626746327091, 0.7159515861318898055642990, 0.7186082239261684101450101, 0.7212357201267043382841848, 0.7238348098810831743321614, 0.7264061996076752736328785, 0.7289505685052020123038119, 0.7314685699632167414918626, 0.7339608328812674553631723, 0.7364279629037998597951287, 0.7388705435772311425068892, 0.7412891374350540907300910, 0.7436842870163199448185765, 0.7460565158223897430644911, 0.7484063292164249148186173, 0.7507342152697148440765318, 0.7530406455585981762013148, 0.7553260759154274417426222, 0.7575909471367456848867050, 0.7598356856515925406014844, 0.7620607041526237246387154, 0.7642664021925218431618987, 0.7664531667479808074716630, 0.7686213727533747208653381, 0.7707713836060628986857068, 0.7729035516451328025056000, 0.7750182186052558819255864, 0.7771157160472033087472710, 0.7791963657664606746067193, 0.7812604801812733645860476, 0.7833083627013670557914793, 0.7853403080784920886614486, 0.7873566027398682942717301, 0.7893575251055271468914043, 0.7913433458904860495763955, 0.7933143283926211708489973, 0.7952707287670507385612950, 0.7972127962877871842906075, 0.7991407735973663495343544, 0.8010548969451144474263060, 0.8029553964146751710018179, 0.8048424961413759293193948, 0.8067164145199776648098577, 0.8085773644033192875113514, 0.8104255532923337890238713, 0.8122611835178880079766373, 0.8140844524148653782447127, 0.8158955524888908961145262, 0.8176946715760703421338462, 0.8194819929960945881219914, 0.8212576956990418342030580, 0.8230219544061858627514994, 0.8247749397451069608422358, 0.8265168183793800693592857, 0.8282477531331040587758707, 0.8299679031105144932922713, 0.8316774238109170269694914, 0.8333764672391588135269558, 0.8350651820118462076436572, 0.8367437134595065995057439, 0.8384122037248785686003316, 0.8400707918575084365286898, 0.8417196139048181979802621, 0.8433588029998044799384616, 0.8449884894455170769589358, 0.8466088007964592820897565, 0.8482198619370460157540492, 0.8498217951572454298414527, 0.8514147202255268886972317, 0.8529987544592306791813030, 0.8545740127924681406312857, 0.8561406078416564646715869, 0.8576986499687879739184382, 0.8592482473425272493372518, 0.8607895059972260343172934, 0.8623225298899406254804489, 0.8638474209555342397948152, 0.8653642791599411854264190, 0.8668732025516646677587573, 0.8683742873115822824559018, 0.8698676278011230333930826, 0.8713533166088808235016927, 0.8728314445957263689734873, 0.8743021009384736030867202, 0.8757653731721587453407096, 0.8772213472309831061579644, 0.8786701074879713635468192, 0.8801117367933933843815453, 0.8815463165119962196669690, 0.8829739265590904606639810, 0.8843946454355334774177777, 0.8858085502616492856731156, 0.8872157168101261204284924, 0.8886162195379254669092006, 0.8900101316172414067651175, 0.8913975249655425869832470, 0.8927784702747293410496354, 0.8941530370394389359844922, 0.8955212935845271449153415, 0.8968833070917552330314493, 0.8982391436257116668073763, 0.8995888681589926383352918, 0.9009325445966682721632424, 0.9022702358000591615905250, 0.9036020036098447727468397, 0.9049279088685294736293940, 0.9062480114422838406440519, 0.9075623702421856675570666, 0.9088710432448782183811886, 0.9101740875126659302551957, 0.9114715592130656629521468, 0.9127635136378319247185686, 0.9140500052214718396115245, 0.9153310875592676199019593, 0.9166068134248217535997583, 0.9178772347871393399998396, 0.9191424028272650037507674, 0.9204023679544837133192914, 0.9216571798221044886645359, 0.9229068873428358799060334, 0.9241515387037684270410409, 0.9253911813809743147629661, 0.9266258621537376560794996, 0.9278556271184257298045850, 0.9290805217020126072213770, 0.9303005906752641607226906, 0.9315158781655976660829310, 0.9327264276696222156104454, 0.9339322820653718215666572, 0.9351334836242397585692743, 0.9363300740226222496076502, 0.9375220943532810435883107, 0.9387095851364318788156993, 0.9398925863305679362369460, 0.9410711373430253878780150, 0.9422452770402982569208916, 0.9434150437581102499606800, 0.9445804753112497786915469, 0.9457416090031758315603838, 0.9468984816353998024140992, 0.9480511295166513807686215, 0.9491995884718325005025008, 0.9503438938507666744470725, 0.9514840805367489329213981, 0.9526201829549015842601989, 0.9537522350803410153829986, 0.9548802704461621937426230, 0.9560043221512425359875920, 0.9571244228678743581895105, 0.9582406048492264627469694, 0.9593528999366419673933137, 0.9604613395667754849327480, 0.9615659547785752048199015, 0.9626667762201116529396927, 0.9637638341552602350148504, 0.9648571584702384518195117, 0.9659467786800033373140195, 0.9670327239345126724145985, 0.9681150230248519727993539, 0.9691937043892331349326241, 0.9702687961188651843968955, 0.9713403259637031217366143, 0.9724083213380760870592212, 0.9734728093261981740624833, 0.9745338166875657792687093, 0.9755913698622432628226875, 0.9766454949760402515224200, 0.9776962178455825824840986, 0.9787435639832813283334190, 0.9797875586021995708563281, 0.9808282266208216970682088, 0.9818655926677272161029464, 0.9828996810861706512341129, 0.9839305159385695054297116, 0.9849581210109046303102787, 0.9859825198170325544211323, 0.9870037356029128794432381, 0.9880217913507539639894617, 0.9890367097830761178300918, 0.9900485133666970805066398, 0.9910572243166397843339155, 0.9920628645999649553033350, 0.9930654559395298841550925, 0.9940650198176754770429397, 0.9950615774798433621484151, 0.9960551499381237183783355, 0.9970457579747364906808116, 0.9980334221454474352697162, 0.9990181627829189947576083, 1.0000000000000000000000000][i]\n    curve_gamma_up_0_50[i] = [0.0000000000000000000000000, 0.0626224291085149542546162, 0.0885614885540095264637728, 0.1084652289093280819187726, 0.1252448582170299085092324, 0.1400280084028009686125671, 0.1533929977694740987015365, 0.1656833739159027929499501, 0.1771229771080190529275455, 0.1878672873255448350082730, 0.1980295085953348577234578, 0.2076951008135742848814687, 0.2169304578186561638375451, 0.2257883791448593302497727, 0.2343116744516024474442872, 0.2425356250363329690955538, 0.2504897164340598170184649, 0.2581988897471610977518708, 0.2656844656620285793913183, 0.2729648400830565480035261, 0.2800560168056019372251342, 0.2869720215917757055734683, 0.2937252284090040022057622, 0.3003266195850320396942834, 0.3067859955389481974030730, 0.3131121455425747157619298, 0.3193129880128985353948678, 0.3253956867279842457563177, 0.3313667478318055858999003, 0.3372321013724500771147063, 0.3429971702850176940025051, 0.3486669291042389651202882, 0.3542459542160381058550911, 0.3597384670922507132750923, 0.3651483716701107162805329, 0.3704792868174742181963666, 0.3757345746510896700165461, 0.3809173653375312884605819, 0.3860305788964615847369544, 0.3910769444375214454190370, 0.3960590171906697154469157, 0.4009791936316524085803792, 0.4058397249567138875825378, 0.4106427291215469232987800, 0.4153902016271485697629373, 0.4200840252084029335932769, 0.4247259785588174962889241, 0.4293177442060787663002941, 0.4338609156373123276750903, 0.4383570037596046797823135, 0.4428074427700476323188639, 0.4472135954999579277036048, 0.4515767582897186604995454, 0.4558981654436679020747647, 0.4601789933084222683490339, 0.4644203640128239940487731, 0.4686233489032048948885745, 0.4727889717037675465505231, 0.4769182114284973295070813, 0.4810120050680729564263061, 0.4850712500726659381911077, 0.4890968066492663579580835, 0.4930894998901931280954614, 0.4970501217477084066054260, 0.5009794328681196340369297, 0.5048781642974012884295121, 0.5087470190691683047390370, 0.5125866736847688454048466, 0.5163977794943221955037416, 0.5201809639866856738166234, 0.5239368319955838293466854, 0.5276659668284658932790876, 0.5313689313240571587826366, 0.5350462688440332792438880, 0.5386985042037638615752826, 0.5423261445466404095938628, 0.5459296801661130960070523, 0.5495095852792064583525189, 0.5530663187549721415692261, 0.5566003248010438220205742, 0.5601120336112038744502684, 0.5636018619766345327803947, 0.5670702138633102462605962, 0.5705174809577979733177244, 0.5739440431835514111469365, 0.5773502691896257310588680, 0.5807365168135928401582646, 0.5841031335203016316981461, 0.5874504568180080044115243, 0.5907788146532823025935954, 0.5940885257860045731703735, 0.5973799001456604473858647, 0.6006532391700640793885668, 0.6039088361275575245201708, 0.6071469764236598898321517, 0.6103679378930737531305795, 0.6135719910778963948061460, 0.6167593994928208811501236, 0.6199304198780667407575606, 0.6230853024407227991332547, 0.6262242910851494315238597, 0.6293476236330355355619304, 0.6324555320336758823529522, 0.6355482425649928712729775, 0.6386259760257970707897357, 0.6416889479197478429739476, 0.6447373686314482599257758, 0.6477714435950807647657257, 0.6507913734559684915126354, 0.6537973542254180703281463, 0.6567895774291853117077267, 0.6597682302498800721579642, 0.6627334956636111717998006, 0.6656855525711525833898463, 0.6686245759238974573079872, 0.6715507368448513370040587, 0.6744642027449001542294127, 0.6773651374345779352381669, 0.6802537012315447162436044, 0.6831300510639731760065274, 0.6859943405700353880050102, 0.6888467201936644412896271, 0.6916873372767637917490902, 0.6945163361480207742104653, 0.6973338582084779302405764, 0.7001400420140049263295623, 0.7029350233548073978440129, 0.7057189353321012825759340, 0.7084919084320762117101822, 0.7112540705972630883380248, 0.7140055472954166537746801, 0.7167464615860188459350866, 0.7194769341845014265501845, 0.7221970835242831343592229, 0.7249070258167121805215061, 0.7276068751089989072866615, 0.7302967433402214325610657, 0.7329767403954809967814299, 0.7356469741582815080604973, 0.7383075505612050060122442, 0.7409585736349484363927331, 0.7436001455557874617596781, 0.7462323666915280373501673, 0.7488553356460045939968495, 0.7514691493021793400330921, 0.7540739028638984153829483, 0.7566696898963530815152012, 0.7592566023652965734314080, 0.7618347306750625769211638, 0.7644041637054288518271505, 0.7669649888473704102409556, 0.7695172920377409964132198, 0.7720611577929231694739087, 0.7745966692414834042779148, 0.7771239081558686256911983, 0.7796429549831781491420202, 0.7821538888750428908380741, 0.7846567877166449322956510, 0.7871517281549059719125694, 0.7896387856258745285842338, 0.7921180343813394308938314, 0.7945895475146950159839321, 0.7970533969860856826628037, 0.7995096536468523362728433, 0.8019583872633048171607584, 0.8043996665398437384553176, 0.8068335591414519392117199, 0.8092601317155774243161659, 0.8116794499134277751650757, 0.8140915784106943497988595, 0.8164965809277260344600791, 0.8188945202491695329882759, 0.8212854582430938465975601, 0.8236694558796141540923941, 0.8260465732490333001791782, 0.8284168695795139925053263, 0.8307804032542971395258746, 0.8331372318284806510746421, 0.8354874120453728014723538, 0.8378309998524317014911844, 0.8401680504168058671865538, 0.8424986181404854335141863, 0.8448227566750782235871498, 0.8471405189362207766023971, 0.8494519571176349925778482, 0.8517571227048420512417692, 0.8540560664885428199255557, 0.8563488385776751865563483, 0.8586354884121575326005882, 0.8609160647753271167204048, 0.8631906158060839162615707, 0.8654591890107454776881468, 0.8677218312746246553501805, 0.8699785888733350125434640, 0.8722295074838330997124558, 0.8744746321952061585136562, 0.8767140075192093595646270, 0.8789476774005624548635751, 0.8811756852270119511061353, 0.8833980738391640219475676, 0.8856148855400952646377277, 0.8878261621047484064561672, 0.8900319447891170687725548, 0.8922322743392265831374743, 0.8944271909999158554072096, 0.8966167345234256069730350, 0.8988009441777984331878315, 0.9009798587550961190828502, 0.9031535165794373209990908, 0.9053219555148626085383512, 0.9074852129730300864807191, 0.9096433259207461485829072, 0.9117963308873358041495294, 0.9139442639718565741802081, 0.9160871608501616192299366, 0.9182250567818114328488832, 0.9203579866168445366980677, 0.9224859848024048458725588, 0.9246090853892328098595499, 0.9267273220380225495773630, 0.9288407280256479880975462, 0.9309493362512627490090722, 0.9330531792422753767368704, 0.9351522891602034315283731, 0.9372466978064097897771489, 0.9393364366277242583080920, 0.9414215367219519459140997, 0.9435020288432730550809424, 0.9455779434075350931010462, 0.9476493104974406112006591, 0.9497161598676341354163810, 0.9517785209496884002433603, 0.9538364228569946590141626, 0.9558898943895569599860096, 0.9579389640386956061846035, 0.9599836599916585777592104, 0.9620240101361459128526121, 0.9640600420647473800528360, 0.9660917830792958849173147, 0.9681192601951394971493414, 0.9701425001453318763822153, 0.9721615293847448713293602, 0.9741763740941048466126517, 0.9761870601839527372689531, 0.9781936132985327159161670, 0.9801960588196069190658477, 0.9821944218702024498313108, 0.9841887273182883255628894, 0.9861789997803862561909227, 0.9881652636251155863433837, 0.9901475429766742886172892, 0.9921258617182580064053354, 0.9941002434954168132108521, 0.9960707117193527970755440, 0.9980372895701588031869278, 1.0000000000000000000000000][i]\n    curve_gamma_up_1[i] =    [0.0000000000000000000000000, 0.0039215686274509803377342, 0.0078431372549019606754683, 0.0117647058823529410132025, 0.0156862745098039213509367, 0.0196078431372549016886708, 0.0235294117647058820264050, 0.0274509803921568623641392, 0.0313725490196078427018733, 0.0352941176470588230396075, 0.0392156862745098033773417, 0.0431372549019607837150758, 0.0470588235294117640528100, 0.0509803921568627443905442, 0.0549019607843137247282783, 0.0588235294117647050660125, 0.0627450980392156854037466, 0.0666666666666666657414808, 0.0705882352941176460792150, 0.0745098039215686264169491, 0.0784313725490196067546833, 0.0823529411764705870924175, 0.0862745098039215674301516, 0.0901960784313725477678858, 0.0941176470588235281056200, 0.0980392156862745084433541, 0.1019607843137254887810883, 0.1058823529411764691188225, 0.1098039215686274494565566, 0.1137254901960784297942908, 0.1176470588235294101320250, 0.1215686274509803904697591, 0.1254901960784313708074933, 0.1294117647058823650230153, 0.1333333333333333314829616, 0.1372549019607843256984836, 0.1411764705882352921584300, 0.1450980392156862863739519, 0.1490196078431372528338983, 0.1529411764705882470494203, 0.1568627450980392135093666, 0.1607843137254902077248886, 0.1647058823529411741848349, 0.1686274509803921684003569, 0.1725490196078431348603033, 0.1764705882352941290758253, 0.1803921568627450955357716, 0.1843137254901960897512936, 0.1882352941176470562112399, 0.1921568627450980504267619, 0.1960784313725490168867083, 0.2000000000000000111022302, 0.2039215686274509775621766, 0.2078431372549019717776986, 0.2117647058823529382376449, 0.2156862745098039324531669, 0.2196078431372548989131133, 0.2235294117647058931286352, 0.2274509803921568595885816, 0.2313725490196078538041036, 0.2352941176470588202640499, 0.2392156862745098144795719, 0.2431372549019607809395183, 0.2470588235294117751550402, 0.2509803921568627416149866, 0.2549019607843137080749329, 0.2588235294117647300460305, 0.2627450980392156965059769, 0.2666666666666666629659233, 0.2705882352941176294258696, 0.2745098039215686513969672, 0.2784313725490196178569136, 0.2823529411764705843168599, 0.2862745098039215507768063, 0.2901960784313725727479039, 0.2941176470588235392078502, 0.2980392156862745056677966, 0.3019607843137254721277429, 0.3058823529411764940988405, 0.3098039215686274605587869, 0.3137254901960784270187332, 0.3176470588235293934786796, 0.3215686274509804154497772, 0.3254901960784313819097235, 0.3294117647058823483696699, 0.3333333333333333148296163, 0.3372549019607843368007138, 0.3411764705882353032606602, 0.3450980392156862697206066, 0.3490196078431372361805529, 0.3529411764705882581516505, 0.3568627450980392246115969, 0.3607843137254901910715432, 0.3647058823529411575314896, 0.3686274509803921795025872, 0.3725490196078431459625335, 0.3764705882352941124224799, 0.3803921568627450788824262, 0.3843137254901961008535238, 0.3882352941176470673134702, 0.3921568627450980337734165, 0.3960784313725490002333629, 0.4000000000000000222044605, 0.4039215686274509886644069, 0.4078431372549019551243532, 0.4117647058823529215842996, 0.4156862745098039435553972, 0.4196078431372549100153435, 0.4235294117647058764752899, 0.4274509803921568429352362, 0.4313725490196078649063338, 0.4352941176470588313662802, 0.4392156862745097978262265, 0.4431372549019607642861729, 0.4470588235294117862572705, 0.4509803921568627527172168, 0.4549019607843137191771632, 0.4588235294117646856371096, 0.4627450980392157076082071, 0.4666666666666666740681535, 0.4705882352941176405280999, 0.4745098039215686069880462, 0.4784313725490196289591438, 0.4823529411764705954190902, 0.4862745098039215618790365, 0.4901960784313725283389829, 0.4941176470588235503100805, 0.4980392156862745167700268, 0.5019607843137254832299732, 0.5058823529411764496899195, 0.5098039215686274161498659, 0.5137254901960783826098123, 0.5176470588235294600920611, 0.5215686274509804265520074, 0.5254901960784313930119538, 0.5294117647058823594719001, 0.5333333333333333259318465, 0.5372549019607842923917929, 0.5411764705882352588517392, 0.5450980392156862253116856, 0.5490196078431373027939344, 0.5529411764705882692538808, 0.5568627450980392357138271, 0.5607843137254902021737735, 0.5647058823529411686337198, 0.5686274509803921350936662, 0.5725490196078431015536125, 0.5764705882352940680135589, 0.5803921568627451454958077, 0.5843137254901961119557541, 0.5882352941176470784157004, 0.5921568627450980448756468, 0.5960784313725490113355931, 0.5999999999999999777955395, 0.6039215686274509442554859, 0.6078431372549019107154322, 0.6117647058823529881976810, 0.6156862745098039546576274, 0.6196078431372549211175738, 0.6235294117647058875775201, 0.6274509803921568540374665, 0.6313725490196078204974128, 0.6352941176470587869573592, 0.6392156862745097534173055, 0.6431372549019608308995544, 0.6470588235294117973595007, 0.6509803921568627638194471, 0.6549019607843137302793934, 0.6588235294117646967393398, 0.6627450980392156631992862, 0.6666666666666666296592325, 0.6705882352941175961191789, 0.6745098039215686736014277, 0.6784313725490196400613740, 0.6823529411764706065213204, 0.6862745098039215729812668, 0.6901960784313725394412131, 0.6941176470588235059011595, 0.6980392156862744723611058, 0.7019607843137254388210522, 0.7058823529411765163033010, 0.7098039215686274827632474, 0.7137254901960784492231937, 0.7176470588235294156831401, 0.7215686274509803821430864, 0.7254901960784313486030328, 0.7294117647058823150629792, 0.7333333333333332815229255, 0.7372549019607843590051743, 0.7411764705882353254651207, 0.7450980392156862919250671, 0.7490196078431372583850134, 0.7529411764705882248449598, 0.7568627450980391913049061, 0.7607843137254901577648525, 0.7647058823529411242247988, 0.7686274509803922017070477, 0.7725490196078431681669940, 0.7764705882352941346269404, 0.7803921568627451010868867, 0.7843137254901960675468331, 0.7882352941176470340067794, 0.7921568627450980004667258, 0.7960784313725489669266722, 0.8000000000000000444089210, 0.8039215686274510108688673, 0.8078431372549019773288137, 0.8117647058823529437887601, 0.8156862745098039102487064, 0.8196078431372548767086528, 0.8235294117647058431685991, 0.8274509803921568096285455, 0.8313725490196078871107943, 0.8352941176470588535707407, 0.8392156862745098200306870, 0.8431372549019607864906334, 0.8470588235294117529505797, 0.8509803921568627194105261, 0.8549019607843136858704725, 0.8588235294117646523304188, 0.8627450980392157298126676, 0.8666666666666666962726140, 0.8705882352941176627325603, 0.8745098039215686291925067, 0.8784313725490195956524531, 0.8823529411764705621123994, 0.8862745098039215285723458, 0.8901960784313724950322921, 0.8941176470588235725145410, 0.8980392156862745389744873, 0.9019607843137255054344337, 0.9058823529411764718943800, 0.9098039215686274383543264, 0.9137254901960784048142727, 0.9176470588235293712742191, 0.9215686274509803377341655, 0.9254901960784314152164143, 0.9294117647058823816763606, 0.9333333333333333481363070, 0.9372549019607843145962534, 0.9411764705882352810561997, 0.9450980392156862475161461, 0.9490196078431372139760924, 0.9529411764705881804360388, 0.9568627450980392579182876, 0.9607843137254902243782340, 0.9647058823529411908381803, 0.9686274509803921572981267, 0.9725490196078431237580730, 0.9764705882352940902180194, 0.9803921568627450566779657, 0.9843137254901960231379121, 0.9882352941176471006201609, 0.9921568627450980670801073, 0.9960784313725490335400536, 1.0000000000000000000000000][i]\n    curve_gamma_up_1_50[i] = [0.0000000000000000000000000, 0.0002455781533667252838037, 0.0006945999102275256849998, 0.0012760615165803303704128, 0.0019646252269338022704293, 0.0027456472235843328369431, 0.0036092470063405668496970, 0.0045481710486718418887109, 0.0055567992818202054799981, 0.0066306101409015823916482, 0.0077658630821699943524994, 0.0089593965056835971061400, 0.0102084921326426429633027, 0.0115107801132673381871996, 0.0128641703620487619225132, 0.0142668014727254689744118, 0.0157170018154704181634340, 0.0172132593164774083671631, 0.0187541975761431924107914, 0.0203385567120708786459371, 0.0219651777886746626955450, 0.0236329900134403525502336, 0.0253410000980317171026535, 0.0270882833351205366823056, 0.0288739760507245347975758, 0.0306972691708406603128267, 0.0325574026993543583219370, 0.0344536609476689195674659, 0.0363853683893747351096870, 0.0383518860384354925985306, 0.0403526082688256126917992, 0.0423869600087506126495640, 0.0444543942545616438399847, 0.0465543898589971597012926, 0.0486864495560147686470387, 0.0508500981906337204407897, 0.0530448811272126591331855, 0.0552703628136810148907543, 0.0575261254826099632797565, 0.0598117679727974069225915, 0.0621269046573599548199951, 0.0644711644662656901960673, 0.0668441899928705202116319, 0.0692456366753981117367900, 0.0716751720454687768491198, 0.0741324750367770013426139, 0.0766172353478651174674141, 0.0791291528536694210860247, 0.0816679370611411437064220, 0.0842333066047867839998275, 0.0868249887784407203827897, 0.0894427190999916021940663, 0.0920862409061387054975967, 0.0947553049745662734348883, 0.0974496691711952967018817, 0.1001690981204130248549689, 0.1029133628963900953801058, 0.1056822407337833363838442, 0.1084755147562856680831800, 0.1112929737216325765114533, 0.1141344117818037517952945, 0.1169996282572754731088338, 0.1198884274242822539635611, 0.1228006183141397422708962, 0.1257360145237633453074722, 0.1286944340365924754898685, 0.1316756990531965099133771, 0.1346796358309000629649432, 0.1377060745318192669373047, 0.1407548490787502437626699, 0.1438257970183955680720800, 0.1469187593914552114604533, 0.1500335806091455392863310, 0.1531701083357428494480246, 0.1563281933767785569777686, 0.1595076895725413002047333, 0.1627084536965670291674968, 0.1659303453588191756828962, 0.1691732269132856236737439, 0.1724369633697351300583023, 0.1757214223093973015643599, 0.1790264738043427228397775, 0.1823519903403585940004916, 0.1856978467431263934983576, 0.1890639201075228204018686, 0.1924500897298752344344308, 0.1958562370430156351908124, 0.1992822455539852710693083, 0.2027280007842537368212277, 0.2061933902123220252455837, 0.2096783032185898787425060, 0.2131826310323729489759614, 0.2167062666809642934584446, 0.2202491049406386236508837, 0.2238110422895059903325432, 0.2273919768621255332874398, 0.2309918084057962783806062, 0.2346104382384456010779417, 0.2382477692080413322894827, 0.2419037056534571183963322, 0.2455781533667252825026139, 0.2492710195566140707335023, 0.2529822128134703862478716, 0.2567116430752716116359124, 0.2604592215948348665754963, 0.2642248609081314647539784, 0.2680084748036608566224004, 0.2718099782928378171931172, 0.2756292875813513565397272, 0.2794663200414532200355211, 0.2833209941851387858591238, 0.2871932296381831117848549, 0.2910829471149978808774961, 0.2949900683942754398003672, 0.2989145162953895096258350, 0.3028562146555212053478101, 0.3068150883074839407882450, 0.3107910630582181310543888, 0.3147840656679304904841388, 0.3187940238298541673067632, 0.3228208661506049015343933, 0.3268645221311113346907007, 0.3309249221480987657173500, 0.3350019974361041485977353, 0.3390956800700049011965120, 0.3432059029480415968116347, 0.3473325997753166083370502, 0.3514757050477523847575867, 0.3556351540364931507198776, 0.3598108827727330427670438, 0.3640028280329574705831419, 0.3682109273245821601250327, 0.3724351188719772776103412, 0.3766753416028614243060701, 0.3809315351350566203336712, 0.3852036397635876796563537, 0.3894915964481181491763095, 0.3937953468007093782432548, 0.3981148330738935037231840, 0.4024499981490489153301837, 0.4068007855250697635263180, 0.4111671393073177971366761, 0.4155490041968509240533081, 0.4199463254799162825747771, 0.4243590490177012730654837, 0.4287871212363343897955303, 0.4332304891171275817995934, 0.4376891001870533148832010, 0.4421629025094481191260343, 0.4466518446749369042336752, 0.4511558757925708817992927, 0.4556749454811721555813619, 0.4602090038608797062380518, 0.4647580015448899981578279, 0.4693218896313873234049652, 0.4739006196956572769529714, 0.4784941437823792553807323, 0.4831024143980912066709266, 0.4877253845038240775977556, 0.4923630075078982426539653, 0.4970152372588796385599608, 0.5016820280386897756841336, 0.5063633345558662401941774, 0.5110591119389682468465708, 0.5157693157301255215685387, 0.5204939018787224647155654, 0.5252328267352196489170524, 0.5299860470451036587036242, 0.5347535199429641616930553, 0.5395352029466954357772579, 0.5443310539518173563067194, 0.5491410312259136228263401, 0.5539650934031848938943199, 0.5588031994791108347797604, 0.5636553088052227433735197, 0.5685213810839802039964752, 0.5734013763637502147929581, 0.5782952550338865682633127, 0.5832029778199072644895296, 0.5881245057787657382064594, 0.5930598002942160107409109, 0.5980088230722661046812050, 0.6029715361367224968347500, 0.6079479018248172828009501, 0.6129378827829209397393129, 0.6179414419623363574629593, 0.6229585426151723615006972, 0.6279891482902950627931205, 0.6330332228293553686881978, 0.6380907303628895466118820, 0.6431616353064939506367637, 0.6482459023570681377890423, 0.6533434964891291496513759, 0.6584543829511907420126704, 0.6635785272622103381223724, 0.6687158952080988205679546, 0.6738664528382942719986204, 0.6790301664623953348254304, 0.6842070026468564103439007, 0.6893969282117398122977647, 0.6945999102275257630623173, 0.6998159160119781230235958, 0.7050449131270652980418845, 0.7102868693759332163750742, 0.7155417527999328175525307, 0.7208095316756950587944175, 0.7260901745122607664484349, 0.7313836500482544522583339, 0.7366899272491096439807734, 0.7420089753043384028785567, 0.7473407636248483587593228, 0.7526852618403035988237093, 0.7580424397965301874791066, 0.7634122675529626533830196, 0.7687947153801355515412297, 0.7741897537572135501449111, 0.7795973533695623736150537, 0.7850174851063601577649820, 0.7904501200582461084565011, 0.7958952295150074629503933, 0.8013527849633041988397508, 0.8068227580844278268301650, 0.8123051207520985972365679, 0.8177998450302954580592996, 0.8233069031711207630408467, 0.8288262676126978423241098, 0.8343579109771024349129220, 0.8399018060683254294218614, 0.8454579258702666910707535, 0.8510262435447604190130733, 0.8566067324296307017306162, 0.8621993660367766043606252, 0.8678041180502853446654399, 0.8734209623245755560461134, 0.8790498728825677510201331, 0.8846908239138813190294286, 0.8903437897730606120916264, 0.8960087449778240120679129, 0.9016856642073428629302612, 0.9073745223005426074891488, 0.9130752942544300143623559, 0.9187879552224451629172108, 0.9245124805128366318740518, 0.9302488455870607797493221, 0.9359970260582037848706705, 0.9417569976894262229194510, 0.9475287363924306260898334, 0.9533122182259499144407755, 0.9591074193942580317084889, 0.9649143162457010092225573, 0.9707328852712492350818252, 0.9765631031030695963224275, 0.9824049465131179381671700, 0.9882583924117500639994205, 0.9941234178463542736636782, 1.0000000000000000000000000][i]\n    curve_gamma_up_2[i] =    [0.0000000000000000000000000, 0.0000153787004998077645422, 0.0000615148019992310581688, 0.0001384083044982698808799, 0.0002460592079969242326754, 0.0003844675124951941677653, 0.0005536332179930795235195, 0.0007535563244905805167784, 0.0009842368319876969307014, 0.0012456747404844289821291, 0.0015378700499807766710614, 0.0018608227604767395638174, 0.0022145328719723180940782, 0.0025990003844675122618435, 0.0030142252979623220671135, 0.0034602076124567475098881, 0.0039369473279507877228056, 0.0044444444444444444405895, 0.0049826989619377159285163, 0.0055517108804306030539477, 0.0061514801999231066842455, 0.0067820069204152250846862, 0.0074432910419069582552698, 0.0081353325643983079307198, 0.0088581314878892723763126, 0.0096116878123798533267719, 0.0103960015378700490473740, 0.0112110726643598612728425, 0.0120569011918492882684539, 0.0129334871203383317689317, 0.0138408304498269900395524, 0.0147789311803152630803160, 0.0157477893118031508912225, 0.0167474048442906621458892, 0.0177777777777777777623580, 0.0188389081122645185573106, 0.0199307958477508637140652, 0.0210534409842368340493035, 0.0222068435217224122157909, 0.0233910034602076155607620, 0.0246059207996924267369820, 0.0258515955401768596222389, 0.0271280276816609003387448, 0.0284352172241445627642875, 0.0297731641676278330210792, 0.0311418685121107319258016, 0.0325413302575932317228791, 0.0339715494040753601678873, 0.0354325259515570895052505, 0.0369242599000384544294384, 0.0384467512495194133070875, 0.0400000000000000077715612, 0.0415840061514801961894960, 0.0431987697039600201942555, 0.0448442906574394450913701, 0.0465205690119184986364154, 0.0482276047673971530738157, 0.0499653979238754361591468, 0.0517339484813533270757269, 0.0535332564398308397013437, 0.0553633217993079601582096, 0.0572241445597847023241123, 0.0591157247212610523212639, 0.0610380622837370309663463, 0.0629911572472126035648898, 0.0649750096116877978724702, 0.0669896193771626485835569, 0.0690349865436370724314230, 0.0711111111111111110494321, 0.0732179930795847644375840, 0.0753556324490580742292423, 0.0775240292195309571576800, 0.0797231833910034548562606, 0.0819530949634755812027720, 0.0842137639369473361972140, 0.0865051903114186920840112, 0.0888273740868896488631634, 0.0911803152633602342902464, 0.0935640138408304622430478, 0.0959784698193002772104165, 0.0984236831987697069479282, 0.1008996539792387375777949, 0.1034063821607074384889557, 0.1059438677431757125368961, 0.1085121107266436013549793, 0.1111111111111111049432054, 0.1137408688965782510571501, 0.1164013840830449841856620, 0.1190926566705113320843168, 0.1218146866589773086309023, 0.1245674740484429277032064, 0.1273510188389081199122899, 0.1301653210303729268915163, 0.1330103806228373486408856, 0.1358861976163014406715490, 0.1387927720107650919612041, 0.1417301038062283580210021, 0.1446981930026912666065186, 0.1476970396001538177177537, 0.1507266435986159280879804, 0.1537870049980776532283500, 0.1568781237985390208944381, 0.1600000000000000310862447, 0.1631526336024606005370430, 0.1663360246059207847579842, 0.1695501730103806115046439, 0.1727950788158400807770221, 0.1760707420222991093083920, 0.1793771626297577803654804, 0.1827143406382160661927117, 0.1860822760476739945456615, 0.1894809688581314821576029, 0.1929104190695886122952629, 0.1963706266820453572030658, 0.1998615916955017446365872, 0.2033833141099577190846759, 0.2069357939254133083029075, 0.2105190311418684845357063, 0.2141330257593233588053749, 0.2177777777777777923340352, 0.2214532871972318406328384, 0.2251595540176854759462088, 0.2288965782391388092964490, 0.2326643598615917019056809, 0.2364628988850442092850557, 0.2402921953094963314345733, 0.2441522491349481238653851, 0.2480430603613994755551886, 0.2519646289888504142595593, 0.2559169550173009954896486, 0.2599000384467511914898807, 0.2639138792772010022602558, 0.2679584775086505943342274, 0.2720338331410996346448883, 0.2761399461745482897256920, 0.2802768166089965595766387, 0.2844444444444444441977282, 0.2886428296808919435889607, 0.2928719723183390577503360, 0.2971318723567857866818542, 0.3014225297962322969169691, 0.3057439446366782553887731, 0.3100961168781238286307200, 0.3144790465205690166428099, 0.3188927335640138194250426, 0.3233371780084582369774182, 0.3278123798539023248110880, 0.3323183391003459719037494, 0.3368550557477893447888562, 0.3414225297962322769329546, 0.3460207612456747683360447, 0.3506497500961168745092777, 0.3553094963475585954526537, 0.3599999999999999866773237, 0.3647212610534409371609854, 0.3694732795078815024147900, 0.3742560553633218489721912, 0.3790695886197616437662816, 0.3839138792772011088416662, 0.3887889273356401331760424, 0.3936947327950788277917127, 0.3986312956555170816663747, 0.4035986159169549503111796, 0.4085966935793924892372786, 0.4136255286428297539558230, 0.4186851211072664669110566, 0.4237754709727028501475843, 0.4288965782391387926431037, 0.4340484429065744054199172, 0.4392310649750095774557224, 0.4444444444444444197728217, 0.4496885813148788213489127, 0.4549634755863130042286002, 0.4602691272587466908561282, 0.4656055363321799367426479, 0.4709727028066128529104617, 0.4763706266820453283372672, 0.4817993079584774740453668, 0.4872587466359092345236093, 0.4927489427143405542608434, 0.4982698961937717108128254, 0.5038216070742023156014966, 0.5094040753556324796491594, 0.5150173010380623139781164, 0.5206612841214917075660651, 0.5263360246059207714353079, 0.5320415224913493945635423, 0.5377777777777776879730709, 0.5435447904652057626861961, 0.5493425605536332856360104, 0.5551710880430603678448165, 0.5610303729334871203349167, 0.5669204152249134320840085, 0.5728412149173394141143945, 0.5787927720107650664260746, 0.5847750865051902779967463, 0.5907881584006152708710147, 0.5968319876970396009596698, 0.6029065743944637123519215, 0.6090119184928873830031648, 0.6151480199923106129133998, 0.6213148788927335131049290, 0.6275124951941560835777523, 0.6337408688965781022872648, 0.6400000000000001243449788, 0.6462898885044213725947770, 0.6526105344098424021481719, 0.6589619377162629909605585, 0.6653440984236831390319367, 0.6717570165321029573846090, 0.6782006920415224460185755, 0.6846751249519414939115336, 0.6911803152633603231080883, 0.6977162629757786005413323, 0.7042829680891964372335678, 0.7108804306036139442070976, 0.7175086505190311214619214, 0.7241676278354478579757370, 0.7308573625528642647708466, 0.7375778546712802308249479, 0.7443291041906959781826458, 0.7511111111111111737770329, 0.7579238754325259286304117, 0.7647673971549404647873871, 0.7716416762783544491810517, 0.7785467128027681038560104, 0.7854825067281814288122632, 0.7924490580545943130275077, 0.7994463667820069785463488, 0.8064744329104190923018791, 0.8135332564398308763387035, 0.8206228373702422196345196, 0.8277431757016532332116299, 0.8348942714340638060477318, 0.8420761245674739381428253, 0.8492887351018837405192130, 0.8565321030372934352214997, 0.8638062283737024671381732, 0.8711111111111111693361408, 0.8784467512495194307931001, 0.8858131487889273625313535, 0.8932103037293348535285986, 0.9006382160707419037848354, 0.9080968858131487353446687, 0.9155863129565552371857962, 0.9231064975009611872636128, 0.9306574394463668076227236, 0.9382391387927719872408261, 0.9458515955401768371402227, 0.9534948096885812462986109, 0.9611687812379853257382933, 0.9688735101883889644369674, 0.9766089965397924954615405, 0.9843752402921953637005004, 0.9921722414455979022207543, 1.0000000000000000000000000][i]\n\n    curve_gamma_down_0_25[i] = [1.0000000000000000000000000, 0.9990181627829189947576083, 0.9980334221454474352697162, 0.9970457579747364906808116, 0.9960551499381237183783355, 0.9950615774798433621484151, 0.9940650198176754770429397, 0.9930654559395298841550925, 0.9920628645999649553033350, 0.9910572243166397843339155, 0.9900485133666970805066398, 0.9890367097830761178300918, 0.9880217913507539639894617, 0.9870037356029128794432381, 0.9859825198170325544211323, 0.9849581210109046303102787, 0.9839305159385695054297116, 0.9828996810861706512341129, 0.9818655926677272161029464, 0.9808282266208216970682088, 0.9797875586021995708563281, 0.9787435639832813283334190, 0.9776962178455825824840986, 0.9766454949760402515224200, 0.9755913698622432628226875, 0.9745338166875657792687093, 0.9734728093261981740624833, 0.9724083213380760870592212, 0.9713403259637031217366143, 0.9702687961188651843968955, 0.9691937043892331349326241, 0.9681150230248519727993539, 0.9670327239345126724145985, 0.9659467786800033373140195, 0.9648571584702384518195117, 0.9637638341552602350148504, 0.9626667762201116529396927, 0.9615659547785752048199015, 0.9604613395667754849327480, 0.9593528999366419673933137, 0.9582406048492264627469694, 0.9571244228678743581895105, 0.9560043221512425359875920, 0.9548802704461621937426230, 0.9537522350803410153829986, 0.9526201829549015842601989, 0.9514840805367489329213981, 0.9503438938507666744470725, 0.9491995884718325005025008, 0.9480511295166513807686215, 0.9468984816353998024140992, 0.9457416090031758315603838, 0.9445804753112497786915469, 0.9434150437581102499606800, 0.9422452770402982569208916, 0.9410711373430253878780150, 0.9398925863305679362369460, 0.9387095851364318788156993, 0.9375220943532810435883107, 0.9363300740226222496076502, 0.9351334836242397585692743, 0.9339322820653718215666572, 0.9327264276696222156104454, 0.9315158781655976660829310, 0.9303005906752641607226906, 0.9290805217020126072213770, 0.9278556271184257298045850, 0.9266258621537376560794996, 0.9253911813809743147629661, 0.9241515387037684270410409, 0.9229068873428358799060334, 0.9216571798221044886645359, 0.9204023679544837133192914, 0.9191424028272650037507674, 0.9178772347871393399998396, 0.9166068134248217535997583, 0.9153310875592676199019593, 0.9140500052214718396115245, 0.9127635136378319247185686, 0.9114715592130656629521468, 0.9101740875126659302551957, 0.9088710432448782183811886, 0.9075623702421856675570666, 0.9062480114422838406440519, 0.9049279088685294736293940, 0.9036020036098447727468397, 0.9022702358000591615905250, 0.9009325445966682721632424, 0.8995888681589926383352918, 0.8982391436257116668073763, 0.8968833070917552330314493, 0.8955212935845271449153415, 0.8941530370394389359844922, 0.8927784702747293410496354, 0.8913975249655425869832470, 0.8900101316172414067651175, 0.8886162195379254669092006, 0.8872157168101261204284924, 0.8858085502616492856731156, 0.8843946454355334774177777, 0.8829739265590904606639810, 0.8815463165119962196669690, 0.8801117367933933843815453, 0.8786701074879713635468192, 0.8772213472309831061579644, 0.8757653731721587453407096, 0.8743021009384736030867202, 0.8728314445957263689734873, 0.8713533166088808235016927, 0.8698676278011230333930826, 0.8683742873115822824559018, 0.8668732025516646677587573, 0.8653642791599411854264190, 0.8638474209555342397948152, 0.8623225298899406254804489, 0.8607895059972260343172934, 0.8592482473425272493372518, 0.8576986499687879739184382, 0.8561406078416564646715869, 0.8545740127924681406312857, 0.8529987544592306791813030, 0.8514147202255268886972317, 0.8498217951572454298414527, 0.8482198619370460157540492, 0.8466088007964592820897565, 0.8449884894455170769589358, 0.8433588029998044799384616, 0.8417196139048181979802621, 0.8400707918575084365286898, 0.8384122037248785686003316, 0.8367437134595065995057439, 0.8350651820118462076436572, 0.8333764672391588135269558, 0.8316774238109170269694914, 0.8299679031105144932922713, 0.8282477531331040587758707, 0.8265168183793800693592857, 0.8247749397451069608422358, 0.8230219544061858627514994, 0.8212576956990418342030580, 0.8194819929960945881219914, 0.8176946715760703421338462, 0.8158955524888908961145262, 0.8140844524148653782447127, 0.8122611835178880079766373, 0.8104255532923337890238713, 0.8085773644033192875113514, 0.8067164145199776648098577, 0.8048424961413759293193948, 0.8029553964146751710018179, 0.8010548969451144474263060, 0.7991407735973663495343544, 0.7972127962877871842906075, 0.7952707287670507385612950, 0.7933143283926211708489973, 0.7913433458904860495763955, 0.7893575251055271468914043, 0.7873566027398682942717301, 0.7853403080784920886614486, 0.7833083627013670557914793, 0.7812604801812733645860476, 0.7791963657664606746067193, 0.7771157160472033087472710, 0.7750182186052558819255864, 0.7729035516451328025056000, 0.7707713836060628986857068, 0.7686213727533747208653381, 0.7664531667479808074716630, 0.7642664021925218431618987, 0.7620607041526237246387154, 0.7598356856515925406014844, 0.7575909471367456848867050, 0.7553260759154274417426222, 0.7530406455585981762013148, 0.7507342152697148440765318, 0.7484063292164249148186173, 0.7460565158223897430644911, 0.7436842870163199448185765, 0.7412891374350540907300910, 0.7388705435772311425068892, 0.7364279629037998597951287, 0.7339608328812674553631723, 0.7314685699632167414918626, 0.7289505685052020123038119, 0.7264061996076752736328785, 0.7238348098810831743321614, 0.7212357201267043382841848, 0.7186082239261684101450101, 0.7159515861318898055642990, 0.7132650412498626746327091, 0.7105477917053864000962449, 0.7077990059813022982737607, 0.7050178166172174076820056, 0.7022033180569521304548175, 0.6993545643300445036061319, 0.6964705665515706911605776, 0.6935502902227588251093948, 0.6905926523128502747539414, 0.6875965181003809156834450, 0.6845606977494435030351383, 0.6814839425935317329674490, 0.6783649410961789527618748, 0.6752023144537256937880443, 0.6719946118011056457319796, 0.6687403049764220064332676, 0.6654377827941899692376637, 0.6620853447702982341738220, 0.6586811942338359759929745, 0.6552234307517389444441847, 0.6517100417814792878701269, 0.6481388934544840552121059, 0.6445077203782345609539561, 0.6408141143276628870495415, 0.6370555116759558655914475, 0.6332291793905681087650805, 0.6293321993912830425443872, 0.6253614510325380404509588, 0.6213135914306571194742901, 0.6171850333064884397415994, 0.6129719199531815654324873, 0.6086700968648568466079496, 0.6042750794713536155455813, 0.5997820163128023684961931, 0.5951856468498195606997569, 0.5904802529333550431545063, 0.5856596027429394890617687, 0.5807168857304306763822410, 0.5756446367610885683774313, 0.5704346472015739966110459, 0.5650778601333612538581974, 0.5595642461260142974666110, 0.5538826550262683223735394, 0.5480206379188944376679160, 0.5419642316694008865596288, 0.5356976960859320957553109, 0.5292031904718659252040425, 0.5224603717824506388112127, 0.5154458901398172310237555, 0.5081327481546147328828056, 0.5004894768464765997251220, 0.4924790605054523151551393, 0.4840575115124259863996770, 0.4751719469253833372235363, 0.4657579390827988330414655, 0.4557357796065328314760734, 0.4450050658086207033825588, 0.4334366012758323338793787, 0.4208598069524090989901310, 0.4070422262074326891223564, 0.3916541813506835278957396, 0.3742031646082124574093086, 0.3538995029906511491368803, 0.3293405971169179879964872, 0.2975928234249097803498785, 0.2502447384232382998625610, 0.0000000000000000000000000][i]\n    curve_gamma_down_0_50[i] = [1.0000000000000000000000000, 0.9980372895701588031869278, 0.9960707117193527970755440, 0.9941002434954168132108521, 0.9921258617182580064053354, 0.9901475429766742886172892, 0.9881652636251155863433837, 0.9861789997803862561909227, 0.9841887273182883255628894, 0.9821944218702024498313108, 0.9801960588196069190658477, 0.9781936132985327159161670, 0.9761870601839527372689531, 0.9741763740941048466126517, 0.9721615293847448713293602, 0.9701425001453318763822153, 0.9681192601951394971493414, 0.9660917830792958849173147, 0.9640600420647473800528360, 0.9620240101361459128526121, 0.9599836599916585777592104, 0.9579389640386956061846035, 0.9558898943895569599860096, 0.9538364228569946590141626, 0.9517785209496884002433603, 0.9497161598676341354163810, 0.9476493104974406112006591, 0.9455779434075350931010462, 0.9435020288432730550809424, 0.9414215367219519459140997, 0.9393364366277242583080920, 0.9372466978064097897771489, 0.9351522891602034315283731, 0.9330531792422753767368704, 0.9309493362512627490090722, 0.9288407280256479880975462, 0.9267273220380225495773630, 0.9246090853892328098595499, 0.9224859848024048458725588, 0.9203579866168445366980677, 0.9182250567818114328488832, 0.9160871608501616192299366, 0.9139442639718565741802081, 0.9117963308873358041495294, 0.9096433259207461485829072, 0.9074852129730300864807191, 0.9053219555148626085383512, 0.9031535165794373209990908, 0.9009798587550961190828502, 0.8988009441777984331878315, 0.8966167345234256069730350, 0.8944271909999158554072096, 0.8922322743392265831374743, 0.8900319447891170687725548, 0.8878261621047484064561672, 0.8856148855400952646377277, 0.8833980738391640219475676, 0.8811756852270119511061353, 0.8789476774005624548635751, 0.8767140075192093595646270, 0.8744746321952061585136562, 0.8722295074838330997124558, 0.8699785888733350125434640, 0.8677218312746246553501805, 0.8654591890107454776881468, 0.8631906158060839162615707, 0.8609160647753271167204048, 0.8586354884121575326005882, 0.8563488385776751865563483, 0.8540560664885428199255557, 0.8517571227048420512417692, 0.8494519571176349925778482, 0.8471405189362207766023971, 0.8448227566750782235871498, 0.8424986181404854335141863, 0.8401680504168058671865538, 0.8378309998524317014911844, 0.8354874120453728014723538, 0.8331372318284806510746421, 0.8307804032542971395258746, 0.8284168695795139925053263, 0.8260465732490333001791782, 0.8236694558796141540923941, 0.8212854582430938465975601, 0.8188945202491695329882759, 0.8164965809277260344600791, 0.8140915784106943497988595, 0.8116794499134277751650757, 0.8092601317155774243161659, 0.8068335591414519392117199, 0.8043996665398437384553176, 0.8019583872633048171607584, 0.7995096536468523362728433, 0.7970533969860856826628037, 0.7945895475146950159839321, 0.7921180343813394308938314, 0.7896387856258745285842338, 0.7871517281549059719125694, 0.7846567877166449322956510, 0.7821538888750428908380741, 0.7796429549831781491420202, 0.7771239081558686256911983, 0.7745966692414834042779148, 0.7720611577929231694739087, 0.7695172920377409964132198, 0.7669649888473704102409556, 0.7644041637054288518271505, 0.7618347306750625769211638, 0.7592566023652965734314080, 0.7566696898963530815152012, 0.7540739028638984153829483, 0.7514691493021793400330921, 0.7488553356460045939968495, 0.7462323666915280373501673, 0.7436001455557874617596781, 0.7409585736349484363927331, 0.7383075505612050060122442, 0.7356469741582815080604973, 0.7329767403954809967814299, 0.7302967433402214325610657, 0.7276068751089989072866615, 0.7249070258167121805215061, 0.7221970835242831343592229, 0.7194769341845014265501845, 0.7167464615860188459350866, 0.7140055472954166537746801, 0.7112540705972630883380248, 0.7084919084320762117101822, 0.7057189353321012825759340, 0.7029350233548073978440129, 0.7001400420140049263295623, 0.6973338582084779302405764, 0.6945163361480207742104653, 0.6916873372767637917490902, 0.6888467201936644412896271, 0.6859943405700353880050102, 0.6831300510639731760065274, 0.6802537012315447162436044, 0.6773651374345779352381669, 0.6744642027449001542294127, 0.6715507368448513370040587, 0.6686245759238974573079872, 0.6656855525711525833898463, 0.6627334956636111717998006, 0.6597682302498800721579642, 0.6567895774291853117077267, 0.6537973542254180703281463, 0.6507913734559684915126354, 0.6477714435950807647657257, 0.6447373686314482599257758, 0.6416889479197478429739476, 0.6386259760257970707897357, 0.6355482425649928712729775, 0.6324555320336758823529522, 0.6293476236330355355619304, 0.6262242910851494315238597, 0.6230853024407227991332547, 0.6199304198780667407575606, 0.6167593994928208811501236, 0.6135719910778963948061460, 0.6103679378930737531305795, 0.6071469764236598898321517, 0.6039088361275575245201708, 0.6006532391700640793885668, 0.5973799001456604473858647, 0.5940885257860045731703735, 0.5907788146532823025935954, 0.5874504568180080044115243, 0.5841031335203016316981461, 0.5807365168135928401582646, 0.5773502691896257310588680, 0.5739440431835514111469365, 0.5705174809577979733177244, 0.5670702138633102462605962, 0.5636018619766345327803947, 0.5601120336112038744502684, 0.5566003248010438220205742, 0.5530663187549721415692261, 0.5495095852792064583525189, 0.5459296801661130960070523, 0.5423261445466404095938628, 0.5386985042037638615752826, 0.5350462688440332792438880, 0.5313689313240571587826366, 0.5276659668284658932790876, 0.5239368319955838293466854, 0.5201809639866856738166234, 0.5163977794943221955037416, 0.5125866736847688454048466, 0.5087470190691683047390370, 0.5048781642974012884295121, 0.5009794328681196340369297, 0.4970501217477084066054260, 0.4930894998901931280954614, 0.4890968066492663579580835, 0.4850712500726659381911077, 0.4810120050680729564263061, 0.4769182114284973295070813, 0.4727889717037675465505231, 0.4686233489032048948885745, 0.4644203640128239940487731, 0.4601789933084222683490339, 0.4558981654436679020747647, 0.4515767582897186604995454, 0.4472135954999579277036048, 0.4428074427700476323188639, 0.4383570037596046797823135, 0.4338609156373123276750903, 0.4293177442060787663002941, 0.4247259785588174962889241, 0.4200840252084029335932769, 0.4153902016271485697629373, 0.4106427291215469232987800, 0.4058397249567138875825378, 0.4009791936316524085803792, 0.3960590171906697154469157, 0.3910769444375214454190370, 0.3860305788964615847369544, 0.3809173653375312884605819, 0.3757345746510896700165461, 0.3704792868174742181963666, 0.3651483716701107162805329, 0.3597384670922507132750923, 0.3542459542160381058550911, 0.3486669291042389651202882, 0.3429971702850176940025051, 0.3372321013724500771147063, 0.3313667478318055858999003, 0.3253956867279842457563177, 0.3193129880128985353948678, 0.3131121455425747157619298, 0.3067859955389481974030730, 0.3003266195850320396942834, 0.2937252284090040022057622, 0.2869720215917757055734683, 0.2800560168056019372251342, 0.2729648400830565480035261, 0.2656844656620285793913183, 0.2581988897471610977518708, 0.2504897164340598170184649, 0.2425356250363329690955538, 0.2343116744516024474442872, 0.2257883791448593302497727, 0.2169304578186561638375451, 0.2076951008135742848814687, 0.1980295085953348577234578, 0.1878672873255448350082730, 0.1771229771080190529275455, 0.1656833739159027929499501, 0.1533929977694740987015365, 0.1400280084028009686125671, 0.1252448582170299085092324, 0.1084652289093280819187726, 0.0885614885540095264637728, 0.0626224291085149542546162, 0.0000000000000000000000000][i]\n    curve_gamma_down_1[i] = [1.0000000000000000000000000, 0.9960784313725490335400536, 0.9921568627450980670801073, 0.9882352941176471006201609, 0.9843137254901960231379121, 0.9803921568627450566779657, 0.9764705882352940902180194, 0.9725490196078431237580730, 0.9686274509803921572981267, 0.9647058823529411908381803, 0.9607843137254902243782340, 0.9568627450980392579182876, 0.9529411764705881804360388, 0.9490196078431372139760924, 0.9450980392156862475161461, 0.9411764705882352810561997, 0.9372549019607843145962534, 0.9333333333333333481363070, 0.9294117647058823816763606, 0.9254901960784314152164143, 0.9215686274509803377341655, 0.9176470588235293712742191, 0.9137254901960784048142727, 0.9098039215686274383543264, 0.9058823529411764718943800, 0.9019607843137255054344337, 0.8980392156862745389744873, 0.8941176470588235725145410, 0.8901960784313724950322921, 0.8862745098039215285723458, 0.8823529411764705621123994, 0.8784313725490195956524531, 0.8745098039215686291925067, 0.8705882352941176627325603, 0.8666666666666666962726140, 0.8627450980392157298126676, 0.8588235294117646523304188, 0.8549019607843136858704725, 0.8509803921568627194105261, 0.8470588235294117529505797, 0.8431372549019607864906334, 0.8392156862745098200306870, 0.8352941176470588535707407, 0.8313725490196078871107943, 0.8274509803921568096285455, 0.8235294117647058431685991, 0.8196078431372548767086528, 0.8156862745098039102487064, 0.8117647058823529437887601, 0.8078431372549019773288137, 0.8039215686274510108688673, 0.8000000000000000444089210, 0.7960784313725489669266722, 0.7921568627450980004667258, 0.7882352941176470340067794, 0.7843137254901960675468331, 0.7803921568627451010868867, 0.7764705882352941346269404, 0.7725490196078431681669940, 0.7686274509803922017070477, 0.7647058823529411242247988, 0.7607843137254901577648525, 0.7568627450980391913049061, 0.7529411764705882248449598, 0.7490196078431372583850134, 0.7450980392156862919250671, 0.7411764705882353254651207, 0.7372549019607843590051743, 0.7333333333333332815229255, 0.7294117647058823150629792, 0.7254901960784313486030328, 0.7215686274509803821430864, 0.7176470588235294156831401, 0.7137254901960784492231937, 0.7098039215686274827632474, 0.7058823529411765163033010, 0.7019607843137254388210522, 0.6980392156862744723611058, 0.6941176470588235059011595, 0.6901960784313725394412131, 0.6862745098039215729812668, 0.6823529411764706065213204, 0.6784313725490196400613740, 0.6745098039215686736014277, 0.6705882352941175961191789, 0.6666666666666666296592325, 0.6627450980392156631992862, 0.6588235294117646967393398, 0.6549019607843137302793934, 0.6509803921568627638194471, 0.6470588235294117973595007, 0.6431372549019608308995544, 0.6392156862745097534173055, 0.6352941176470587869573592, 0.6313725490196078204974128, 0.6274509803921568540374665, 0.6235294117647058875775201, 0.6196078431372549211175738, 0.6156862745098039546576274, 0.6117647058823529881976810, 0.6078431372549019107154322, 0.6039215686274509442554859, 0.5999999999999999777955395, 0.5960784313725490113355931, 0.5921568627450980448756468, 0.5882352941176470784157004, 0.5843137254901961119557541, 0.5803921568627451454958077, 0.5764705882352940680135589, 0.5725490196078431015536125, 0.5686274509803921350936662, 0.5647058823529411686337198, 0.5607843137254902021737735, 0.5568627450980392357138271, 0.5529411764705882692538808, 0.5490196078431373027939344, 0.5450980392156862253116856, 0.5411764705882352588517392, 0.5372549019607842923917929, 0.5333333333333333259318465, 0.5294117647058823594719001, 0.5254901960784313930119538, 0.5215686274509804265520074, 0.5176470588235294600920611, 0.5137254901960783826098123, 0.5098039215686274161498659, 0.5058823529411764496899195, 0.5019607843137254832299732, 0.4980392156862745167700268, 0.4941176470588235503100805, 0.4901960784313725283389829, 0.4862745098039215618790365, 0.4823529411764705954190902, 0.4784313725490196289591438, 0.4745098039215686069880462, 0.4705882352941176405280999, 0.4666666666666666740681535, 0.4627450980392157076082071, 0.4588235294117646856371096, 0.4549019607843137191771632, 0.4509803921568627527172168, 0.4470588235294117862572705, 0.4431372549019607642861729, 0.4392156862745097978262265, 0.4352941176470588313662802, 0.4313725490196078649063338, 0.4274509803921568429352362, 0.4235294117647058764752899, 0.4196078431372549100153435, 0.4156862745098039435553972, 0.4117647058823529215842996, 0.4078431372549019551243532, 0.4039215686274509886644069, 0.4000000000000000222044605, 0.3960784313725490002333629, 0.3921568627450980337734165, 0.3882352941176470673134702, 0.3843137254901961008535238, 0.3803921568627450788824262, 0.3764705882352941124224799, 0.3725490196078431459625335, 0.3686274509803921795025872, 0.3647058823529411575314896, 0.3607843137254901910715432, 0.3568627450980392246115969, 0.3529411764705882581516505, 0.3490196078431372361805529, 0.3450980392156862697206066, 0.3411764705882353032606602, 0.3372549019607843368007138, 0.3333333333333333148296163, 0.3294117647058823483696699, 0.3254901960784313819097235, 0.3215686274509804154497772, 0.3176470588235293934786796, 0.3137254901960784270187332, 0.3098039215686274605587869, 0.3058823529411764940988405, 0.3019607843137254721277429, 0.2980392156862745056677966, 0.2941176470588235392078502, 0.2901960784313725727479039, 0.2862745098039215507768063, 0.2823529411764705843168599, 0.2784313725490196178569136, 0.2745098039215686513969672, 0.2705882352941176294258696, 0.2666666666666666629659233, 0.2627450980392156965059769, 0.2588235294117647300460305, 0.2549019607843137080749329, 0.2509803921568627416149866, 0.2470588235294117751550402, 0.2431372549019607809395183, 0.2392156862745098144795719, 0.2352941176470588202640499, 0.2313725490196078538041036, 0.2274509803921568595885816, 0.2235294117647058931286352, 0.2196078431372548989131133, 0.2156862745098039324531669, 0.2117647058823529382376449, 0.2078431372549019717776986, 0.2039215686274509775621766, 0.2000000000000000111022302, 0.1960784313725490168867083, 0.1921568627450980504267619, 0.1882352941176470562112399, 0.1843137254901960897512936, 0.1803921568627450955357716, 0.1764705882352941290758253, 0.1725490196078431348603033, 0.1686274509803921684003569, 0.1647058823529411741848349, 0.1607843137254902077248886, 0.1568627450980392135093666, 0.1529411764705882470494203, 0.1490196078431372528338983, 0.1450980392156862863739519, 0.1411764705882352921584300, 0.1372549019607843256984836, 0.1333333333333333314829616, 0.1294117647058823650230153, 0.1254901960784313708074933, 0.1215686274509803904697591, 0.1176470588235294101320250, 0.1137254901960784297942908, 0.1098039215686274494565566, 0.1058823529411764691188225, 0.1019607843137254887810883, 0.0980392156862745084433541, 0.0941176470588235281056200, 0.0901960784313725477678858, 0.0862745098039215674301516, 0.0823529411764705870924175, 0.0784313725490196067546833, 0.0745098039215686264169491, 0.0705882352941176460792150, 0.0666666666666666657414808, 0.0627450980392156854037466, 0.0588235294117647050660125, 0.0549019607843137247282783, 0.0509803921568627443905442, 0.0470588235294117640528100, 0.0431372549019607837150758, 0.0392156862745098033773417, 0.0352941176470588230396075, 0.0313725490196078427018733, 0.0274509803921568623641392, 0.0235294117647058820264050, 0.0196078431372549016886708, 0.0156862745098039213509367, 0.0117647058823529410132025, 0.0078431372549019606754683, 0.0039215686274509803377342, 0.0000000000000000000000000][i]\n    curve_gamma_down_1_50[i] = [1.0000000000000000000000000, 0.9941234178463542736636782, 0.9882583924117500639994205, 0.9824049465131179381671700, 0.9765631031030695963224275, 0.9707328852712492350818252, 0.9649143162457010092225573, 0.9591074193942580317084889, 0.9533122182259499144407755, 0.9475287363924306260898334, 0.9417569976894262229194510, 0.9359970260582037848706705, 0.9302488455870607797493221, 0.9245124805128366318740518, 0.9187879552224451629172108, 0.9130752942544300143623559, 0.9073745223005426074891488, 0.9016856642073428629302612, 0.8960087449778240120679129, 0.8903437897730606120916264, 0.8846908239138813190294286, 0.8790498728825677510201331, 0.8734209623245755560461134, 0.8678041180502853446654399, 0.8621993660367766043606252, 0.8566067324296307017306162, 0.8510262435447604190130733, 0.8454579258702666910707535, 0.8399018060683254294218614, 0.8343579109771024349129220, 0.8288262676126978423241098, 0.8233069031711207630408467, 0.8177998450302954580592996, 0.8123051207520985972365679, 0.8068227580844278268301650, 0.8013527849633041988397508, 0.7958952295150074629503933, 0.7904501200582461084565011, 0.7850174851063601577649820, 0.7795973533695623736150537, 0.7741897537572135501449111, 0.7687947153801355515412297, 0.7634122675529626533830196, 0.7580424397965301874791066, 0.7526852618403035988237093, 0.7473407636248483587593228, 0.7420089753043384028785567, 0.7366899272491096439807734, 0.7313836500482544522583339, 0.7260901745122607664484349, 0.7208095316756950587944175, 0.7155417527999328175525307, 0.7102868693759332163750742, 0.7050449131270652980418845, 0.6998159160119781230235958, 0.6945999102275257630623173, 0.6893969282117398122977647, 0.6842070026468564103439007, 0.6790301664623953348254304, 0.6738664528382942719986204, 0.6687158952080988205679546, 0.6635785272622103381223724, 0.6584543829511907420126704, 0.6533434964891291496513759, 0.6482459023570681377890423, 0.6431616353064939506367637, 0.6380907303628895466118820, 0.6330332228293553686881978, 0.6279891482902950627931205, 0.6229585426151723615006972, 0.6179414419623363574629593, 0.6129378827829209397393129, 0.6079479018248172828009501, 0.6029715361367224968347500, 0.5980088230722661046812050, 0.5930598002942160107409109, 0.5881245057787657382064594, 0.5832029778199072644895296, 0.5782952550338865682633127, 0.5734013763637502147929581, 0.5685213810839802039964752, 0.5636553088052227433735197, 0.5588031994791108347797604, 0.5539650934031848938943199, 0.5491410312259136228263401, 0.5443310539518173563067194, 0.5395352029466954357772579, 0.5347535199429641616930553, 0.5299860470451036587036242, 0.5252328267352196489170524, 0.5204939018787224647155654, 0.5157693157301255215685387, 0.5110591119389682468465708, 0.5063633345558662401941774, 0.5016820280386897756841336, 0.4970152372588796385599608, 0.4923630075078982426539653, 0.4877253845038240775977556, 0.4831024143980912066709266, 0.4784941437823792553807323, 0.4739006196956572769529714, 0.4693218896313873234049652, 0.4647580015448899981578279, 0.4602090038608797062380518, 0.4556749454811721555813619, 0.4511558757925708817992927, 0.4466518446749369042336752, 0.4421629025094481191260343, 0.4376891001870533148832010, 0.4332304891171275817995934, 0.4287871212363343897955303, 0.4243590490177012730654837, 0.4199463254799162825747771, 0.4155490041968509240533081, 0.4111671393073177971366761, 0.4068007855250697635263180, 0.4024499981490489153301837, 0.3981148330738935037231840, 0.3937953468007093782432548, 0.3894915964481181491763095, 0.3852036397635876796563537, 0.3809315351350566203336712, 0.3766753416028614243060701, 0.3724351188719772776103412, 0.3682109273245821601250327, 0.3640028280329574705831419, 0.3598108827727330427670438, 0.3556351540364931507198776, 0.3514757050477523847575867, 0.3473325997753166083370502, 0.3432059029480415968116347, 0.3390956800700049011965120, 0.3350019974361041485977353, 0.3309249221480987657173500, 0.3268645221311113346907007, 0.3228208661506049015343933, 0.3187940238298541673067632, 0.3147840656679304904841388, 0.3107910630582181310543888, 0.3068150883074839407882450, 0.3028562146555212053478101, 0.2989145162953895096258350, 0.2949900683942754398003672, 0.2910829471149978808774961, 0.2871932296381831117848549, 0.2833209941851387858591238, 0.2794663200414532200355211, 0.2756292875813513565397272, 0.2718099782928378171931172, 0.2680084748036608566224004, 0.2642248609081314647539784, 0.2604592215948348665754963, 0.2567116430752716116359124, 0.2529822128134703862478716, 0.2492710195566140707335023, 0.2455781533667252825026139, 0.2419037056534571183963322, 0.2382477692080413322894827, 0.2346104382384456010779417, 0.2309918084057962783806062, 0.2273919768621255332874398, 0.2238110422895059903325432, 0.2202491049406386236508837, 0.2167062666809642934584446, 0.2131826310323729489759614, 0.2096783032185898787425060, 0.2061933902123220252455837, 0.2027280007842537368212277, 0.1992822455539852710693083, 0.1958562370430156351908124, 0.1924500897298752344344308, 0.1890639201075228204018686, 0.1856978467431263934983576, 0.1823519903403585940004916, 0.1790264738043427228397775, 0.1757214223093973015643599, 0.1724369633697351300583023, 0.1691732269132856236737439, 0.1659303453588191756828962, 0.1627084536965670291674968, 0.1595076895725413002047333, 0.1563281933767785569777686, 0.1531701083357428494480246, 0.1500335806091455392863310, 0.1469187593914552114604533, 0.1438257970183955680720800, 0.1407548490787502437626699, 0.1377060745318192669373047, 0.1346796358309000629649432, 0.1316756990531965099133771, 0.1286944340365924754898685, 0.1257360145237633453074722, 0.1228006183141397422708962, 0.1198884274242822539635611, 0.1169996282572754731088338, 0.1141344117818037517952945, 0.1112929737216325765114533, 0.1084755147562856680831800, 0.1056822407337833363838442, 0.1029133628963900953801058, 0.1001690981204130248549689, 0.0974496691711952967018817, 0.0947553049745662734348883, 0.0920862409061387054975967, 0.0894427190999916021940663, 0.0868249887784407203827897, 0.0842333066047867839998275, 0.0816679370611411437064220, 0.0791291528536694210860247, 0.0766172353478651174674141, 0.0741324750367770013426139, 0.0716751720454687768491198, 0.0692456366753981117367900, 0.0668441899928705202116319, 0.0644711644662656901960673, 0.0621269046573599548199951, 0.0598117679727974069225915, 0.0575261254826099632797565, 0.0552703628136810148907543, 0.0530448811272126591331855, 0.0508500981906337204407897, 0.0486864495560147686470387, 0.0465543898589971597012926, 0.0444543942545616438399847, 0.0423869600087506126495640, 0.0403526082688256126917992, 0.0383518860384354925985306, 0.0363853683893747351096870, 0.0344536609476689195674659, 0.0325574026993543583219370, 0.0306972691708406603128267, 0.0288739760507245347975758, 0.0270882833351205366823056, 0.0253410000980317171026535, 0.0236329900134403525502336, 0.0219651777886746626955450, 0.0203385567120708786459371, 0.0187541975761431924107914, 0.0172132593164774083671631, 0.0157170018154704181634340, 0.0142668014727254689744118, 0.0128641703620487619225132, 0.0115107801132673381871996, 0.0102084921326426429633027, 0.0089593965056835971061400, 0.0077658630821699943524994, 0.0066306101409015823916482, 0.0055567992818202054799981, 0.0045481710486718418887109, 0.0036092470063405668496970, 0.0027456472235843328369431, 0.0019646252269338022704293, 0.0012760615165803303704128, 0.0006945999102275256849998, 0.0002455781533667252838037, 0.0000000000000000000000000][i]\n    curve_gamma_down_2[i] = [1.0000000000000000000000000, 0.9921722414455979022207543, 0.9843752402921953637005004, 0.9766089965397924954615405, 0.9688735101883889644369674, 0.9611687812379853257382933, 0.9534948096885812462986109, 0.9458515955401768371402227, 0.9382391387927719872408261, 0.9306574394463668076227236, 0.9231064975009611872636128, 0.9155863129565552371857962, 0.9080968858131487353446687, 0.9006382160707419037848354, 0.8932103037293348535285986, 0.8858131487889273625313535, 0.8784467512495194307931001, 0.8711111111111111693361408, 0.8638062283737024671381732, 0.8565321030372934352214997, 0.8492887351018837405192130, 0.8420761245674739381428253, 0.8348942714340638060477318, 0.8277431757016532332116299, 0.8206228373702422196345196, 0.8135332564398308763387035, 0.8064744329104190923018791, 0.7994463667820069785463488, 0.7924490580545943130275077, 0.7854825067281814288122632, 0.7785467128027681038560104, 0.7716416762783544491810517, 0.7647673971549404647873871, 0.7579238754325259286304117, 0.7511111111111111737770329, 0.7443291041906959781826458, 0.7375778546712802308249479, 0.7308573625528642647708466, 0.7241676278354478579757370, 0.7175086505190311214619214, 0.7108804306036139442070976, 0.7042829680891964372335678, 0.6977162629757786005413323, 0.6911803152633603231080883, 0.6846751249519414939115336, 0.6782006920415224460185755, 0.6717570165321029573846090, 0.6653440984236831390319367, 0.6589619377162629909605585, 0.6526105344098424021481719, 0.6462898885044213725947770, 0.6400000000000001243449788, 0.6337408688965781022872648, 0.6275124951941560835777523, 0.6213148788927335131049290, 0.6151480199923106129133998, 0.6090119184928873830031648, 0.6029065743944637123519215, 0.5968319876970396009596698, 0.5907881584006152708710147, 0.5847750865051902779967463, 0.5787927720107650664260746, 0.5728412149173394141143945, 0.5669204152249134320840085, 0.5610303729334871203349167, 0.5551710880430603678448165, 0.5493425605536332856360104, 0.5435447904652057626861961, 0.5377777777777776879730709, 0.5320415224913493945635423, 0.5263360246059207714353079, 0.5206612841214917075660651, 0.5150173010380623139781164, 0.5094040753556324796491594, 0.5038216070742023156014966, 0.4982698961937717108128254, 0.4927489427143405542608434, 0.4872587466359092345236093, 0.4817993079584774740453668, 0.4763706266820453283372672, 0.4709727028066128529104617, 0.4656055363321799367426479, 0.4602691272587466908561282, 0.4549634755863130042286002, 0.4496885813148788213489127, 0.4444444444444444197728217, 0.4392310649750095774557224, 0.4340484429065744054199172, 0.4288965782391387926431037, 0.4237754709727028501475843, 0.4186851211072664669110566, 0.4136255286428297539558230, 0.4085966935793924892372786, 0.4035986159169549503111796, 0.3986312956555170816663747, 0.3936947327950788277917127, 0.3887889273356401331760424, 0.3839138792772011088416662, 0.3790695886197616437662816, 0.3742560553633218489721912, 0.3694732795078815024147900, 0.3647212610534409371609854, 0.3599999999999999866773237, 0.3553094963475585954526537, 0.3506497500961168745092777, 0.3460207612456747683360447, 0.3414225297962322769329546, 0.3368550557477893447888562, 0.3323183391003459719037494, 0.3278123798539023248110880, 0.3233371780084582369774182, 0.3188927335640138194250426, 0.3144790465205690166428099, 0.3100961168781238286307200, 0.3057439446366782553887731, 0.3014225297962322969169691, 0.2971318723567857866818542, 0.2928719723183390577503360, 0.2886428296808919435889607, 0.2844444444444444441977282, 0.2802768166089965595766387, 0.2761399461745482897256920, 0.2720338331410996346448883, 0.2679584775086505943342274, 0.2639138792772010022602558, 0.2599000384467511914898807, 0.2559169550173009954896486, 0.2519646289888504142595593, 0.2480430603613994755551886, 0.2441522491349481238653851, 0.2402921953094963314345733, 0.2364628988850442092850557, 0.2326643598615917019056809, 0.2288965782391388092964490, 0.2251595540176854759462088, 0.2214532871972318406328384, 0.2177777777777777923340352, 0.2141330257593233588053749, 0.2105190311418684845357063, 0.2069357939254133083029075, 0.2033833141099577190846759, 0.1998615916955017446365872, 0.1963706266820453572030658, 0.1929104190695886122952629, 0.1894809688581314821576029, 0.1860822760476739945456615, 0.1827143406382160661927117, 0.1793771626297577803654804, 0.1760707420222991093083920, 0.1727950788158400807770221, 0.1695501730103806115046439, 0.1663360246059207847579842, 0.1631526336024606005370430, 0.1600000000000000310862447, 0.1568781237985390208944381, 0.1537870049980776532283500, 0.1507266435986159280879804, 0.1476970396001538177177537, 0.1446981930026912666065186, 0.1417301038062283580210021, 0.1387927720107650919612041, 0.1358861976163014406715490, 0.1330103806228373486408856, 0.1301653210303729268915163, 0.1273510188389081199122899, 0.1245674740484429277032064, 0.1218146866589773086309023, 0.1190926566705113320843168, 0.1164013840830449841856620, 0.1137408688965782510571501, 0.1111111111111111049432054, 0.1085121107266436013549793, 0.1059438677431757125368961, 0.1034063821607074384889557, 0.1008996539792387375777949, 0.0984236831987697069479282, 0.0959784698193002772104165, 0.0935640138408304622430478, 0.0911803152633602342902464, 0.0888273740868896488631634, 0.0865051903114186920840112, 0.0842137639369473361972140, 0.0819530949634755812027720, 0.0797231833910034548562606, 0.0775240292195309571576800, 0.0753556324490580742292423, 0.0732179930795847644375840, 0.0711111111111111110494321, 0.0690349865436370724314230, 0.0669896193771626485835569, 0.0649750096116877978724702, 0.0629911572472126035648898, 0.0610380622837370309663463, 0.0591157247212610523212639, 0.0572241445597847023241123, 0.0553633217993079601582096, 0.0535332564398308397013437, 0.0517339484813533270757269, 0.0499653979238754361591468, 0.0482276047673971530738157, 0.0465205690119184986364154, 0.0448442906574394450913701, 0.0431987697039600201942555, 0.0415840061514801961894960, 0.0400000000000000077715612, 0.0384467512495194133070875, 0.0369242599000384544294384, 0.0354325259515570895052505, 0.0339715494040753601678873, 0.0325413302575932317228791, 0.0311418685121107319258016, 0.0297731641676278330210792, 0.0284352172241445627642875, 0.0271280276816609003387448, 0.0258515955401768596222389, 0.0246059207996924267369820, 0.0233910034602076155607620, 0.0222068435217224122157909, 0.0210534409842368340493035, 0.0199307958477508637140652, 0.0188389081122645185573106, 0.0177777777777777777623580, 0.0167474048442906621458892, 0.0157477893118031508912225, 0.0147789311803152630803160, 0.0138408304498269900395524, 0.0129334871203383317689317, 0.0120569011918492882684539, 0.0112110726643598612728425, 0.0103960015378700490473740, 0.0096116878123798533267719, 0.0088581314878892723763126, 0.0081353325643983079307198, 0.0074432910419069582552698, 0.0067820069204152250846862, 0.0061514801999231066842455, 0.0055517108804306030539477, 0.0049826989619377159285163, 0.0044444444444444444405895, 0.0039369473279507877228056, 0.0034602076124567475098881, 0.0030142252979623220671135, 0.0025990003844675122618435, 0.0022145328719723180940782, 0.0018608227604767395638174, 0.0015378700499807766710614, 0.0012456747404844289821291, 0.0009842368319876969307014, 0.0007535563244905805167784, 0.0005536332179930795235195, 0.0003844675124951941677653, 0.0002460592079969242326754, 0.0001384083044982698808799, 0.0000615148019992310581688, 0.0000153787004998077645422, 0.0000000000000000000000000][i]\n\n    curve_sin_mid_pow[i] = [0.0000000000000000000000000, 0.0001517740110641914745224, 0.0006070039028550276672888, 0.0013654133071059749819642, 0.0024265417964677861960288, 0.0037897451640321205314221, 0.0054541958144270130323661, 0.0074188832662467462525369, 0.0096826147655111240858394, 0.0122440160097816771317403, 0.0151015319824952618660285, 0.0182534278970084389015494, 0.0216977902497795978320472, 0.0254325279820493861671071, 0.0294553737493141974679300, 0.0337638852978221007394843, 0.0383554469472553241637947, 0.0432272711786995458838057, 0.0483764003269355480352232, 0.0537997083760260938478659, 0.0594939028571077402340883, 0.0654555268472358231512942, 0.0716809610680686076777945, 0.0781664260831168161702820, 0.0849079845922246639888797, 0.0919015438218891700383750, 0.0991428580099666528768765, 0.1066275309832583756408653, 0.1143510188264096616439502, 0.1223086326405030954678210, 0.1304955413896704274900884, 0.1389067748339953001224245, 0.1475372265469264143611383, 0.1563816570153686302813156, 0.1654346968205708534593867, 0.1746908498978789747724250, 0.1841444968733745024547233, 0.1937898984753750331044841, 0.2036211990187225540083205, 0.2136324299597473774792178, 0.2238175135197470744241599, 0.2341702663747819435080544, 0.2446844034095465025835381, 0.2553535415330382418730437, 0.2661712035537066034507347, 0.2771308221117307901693039, 0.2882257436660378702164564, 0.2994492325336406413072154, 0.3107944749788448257632467, 0.3222545833498410283723956, 0.3338226002601701880578844, 0.3454915028125262743685653, 0.3572542068623289490680861, 0.3691035713184798172648016, 0.3810324024786905794393022, 0.3930334583967512451785353, 0.4050994532790869739891093, 0.4172230619079350666389416, 0.4293969240884543125957862, 0.4416136491170717937038148, 0.4538658202683489850670639, 0.4661459992976462740621457, 0.4784467309568520843043871, 0.4907605475204350753415383, 0.5030799733190693956430550, 0.5153975292780850203655518, 0.5277057374579849913232010, 0.5399971255942707104580336, 0.5522642316338267631792291, 0.5644996082651015933961958, 0.5766958274393427785753374, 0.5888454848801344398978586, 0.6009412045785050837665153, 0.6129756432708736157977114, 0.6249414948971154792900506, 0.6368314950360414172791934, 0.6486384253156012302810041, 0.6603551177951275663602360, 0.6719744593169640900498507, 0.6834893958248361434115736, 0.6948929366463395540520764, 0.7061781587369517776409111, 0.7173382108829824410634046, 0.7283663178609202093483077, 0.7392557845506431135618186, 0.7499999999999998889776975, 0.7605924414382925213828912, 0.7710266782362246162918495, 0.7812963758099115141320112, 0.7913952994665803819529515, 0.8013173181896282581959667, 0.8110564083607368912609559, 0.8206066574167891758406768, 0.8299622674393610788357023, 0.8391175586746170145246992, 0.8480669729814631629949417, 0.8568050772058759534388628, 0.8653265664793464706505688, 0.8736262674394456029247635, 0.8816991413705513869203401, 0.8895402872628351831352234, 0.8971449447876429506010254, 0.9045084971874736146091323, 0.9116264740787936027288652, 0.9184945541659887968677367, 0.9251085678648069965390732, 0.9314644998336947256944995, 0.9375584914114963863696062, 0.9433868429600309468696651, 0.9489460161101290758267623, 0.9542326359097618171389854, 0.9592434928729615117859453, 0.9639755449282872978855607, 0.9684259192656553549838350, 0.9725919140804097917651916, 0.9764710002135782440646494, 0.9800608226873139816603953, 0.9833592021345937128629089, 0.9863641361223023373838714, 0.9890738003669027333941699, 0.9914865498419507261473882, 0.9936009197767845524396080, 0.9954156265457801966434204, 0.9969295684476368046844641, 0.9981418263742146690375989, 0.9990516643685221076509606, 0.9996585300715115085523621, 0.9999620550574152000322670, 0.9999620550574152000322670, 0.9996585300715115085523621, 0.9990516643685221076509606, 0.9981418263742146690375989, 0.9969295684476368046844641, 0.9954156265457801966434204, 0.9936009197767845524396080, 0.9914865498419509481919931, 0.9890738003669029554387748, 0.9863641361223023373838714, 0.9833592021345937128629089, 0.9800608226873139816603953, 0.9764710002135782440646494, 0.9725919140804097917651916, 0.9684259192656553549838350, 0.9639755449282872978855607, 0.9592434928729615117859453, 0.9542326359097620391835903, 0.9489460161101291868490648, 0.9433868429600311689142700, 0.9375584914114962753473037, 0.9314644998336947256944995, 0.9251085678648069965390732, 0.9184945541659887968677367, 0.9116264740787936027288652, 0.9045084971874738366537372, 0.8971449447876429506010254, 0.8895402872628354051798283, 0.8816991413705513869203401, 0.8736262674394453808801586, 0.8653265664793466926951737, 0.8568050772058761754834677, 0.8480669729814633850395467, 0.8391175586746170145246992, 0.8299622674393615229249122, 0.8206066574167895089075841, 0.8110564083607368912609559, 0.8013173181896282581959667, 0.7913952994665803819529515, 0.7812963758099117361766162, 0.7710266782362248383364545, 0.7605924414382927434274961, 0.7500000000000001110223025, 0.7392557845506435576510285, 0.7283663178609202093483077, 0.7173382108829824410634046, 0.7061781587369517776409111, 0.6948929366463395540520764, 0.6834893958248361434115736, 0.6719744593169640900498507, 0.6603551177951275663602360, 0.6486384253156014523256090, 0.6368314950360416393237983, 0.6249414948971155903123531, 0.6129756432708740598869213, 0.6009412045785054168334227, 0.5888454848801346619424635, 0.5766958274393430006199424, 0.5644996082651019264631032, 0.5522642316338270962461365, 0.5399971255942707104580336, 0.5277057374579849913232010, 0.5153975292780852424101568, 0.5030799733190693956430550, 0.4907605475204352418749920, 0.4784467309568523618601432, 0.4661459992976464405955994, 0.4538658202683493181339713, 0.4416136491170716826815124, 0.4293969240884541460623325, 0.4172230619079349556166392, 0.4050994532790870850114118, 0.3930334583967512451785353, 0.3810324024786905794393022, 0.3691035713184798172648016, 0.3572542068623290600903886, 0.3454915028125264409020190, 0.3338226002601702990801869, 0.3222545833498411949058493, 0.3107944749788451033190029, 0.2994492325336408633518204, 0.2882257436660380922610614, 0.2771308221117311232362113, 0.2661712035537069365176421, 0.2553535415330381308507413, 0.2446844034095465025835381, 0.2341702663747819990192056, 0.2238175135197471299353111, 0.2136324299597474885015203, 0.2036211990187226095194717, 0.1937898984753751163712110, 0.1841444968733746967437526, 0.1746908498978787804833956, 0.1654346968205707701926599, 0.1563816570153685192590132, 0.1475372265469263310944115, 0.1389067748339956054337563, 0.1304955413896707050458446, 0.1223086326405034007791528, 0.1143510188264099947108576, 0.1066275309832584172742287, 0.0991428580099667222658155, 0.0919015438218892394273141, 0.0849079845922247611333944, 0.0781664260831169410703723, 0.0716809610680687325778848, 0.0654555268472359758069601, 0.0594939028571078928897542, 0.0537997083760260383367147, 0.0483764003269355341574354, 0.0432272711786995458838057, 0.0383554469472553241637947, 0.0337638852978221076783782, 0.0294553737493142356318465, 0.0254325279820494208615766, 0.0216977902497796464043045, 0.0182534278970084840043597, 0.0151015319824953173771798, 0.0122440160097817343776150, 0.0096826147655111813317141, 0.0074188832662468034984116, 0.0054541958144270668087938, 0.0037897451640321691036795, 0.0024265417964678282630731, 0.0013654133071059767166877, 0.0006070039028550303777942, 0.0001517740110641936158217, 0.0000000000000000000000000][i]\n\n  }\n}\n\nexport function cacheCalculations (): void {\n  cacheClip()\n  cacheTemp()\n  cacheExposure()\n  cacheShadow()\n  cacheLight()\n  cacheSaturation()\n}\n\nexport function process (\n  default_clip: bool, default_temp: bool, default_light: bool, default_saturation: bool,\n  runPercentileStretch: bool, runColorBalance: bool, runLight: bool, runSaturation: bool,\n  keepBalance: bool, limit: i32, limitValue: i32, \n  balanceR: i32, balanceG: i32, balanceB: i32, \n  midAmount: i32, highlightAmount: i32, shadowAmount: i32,\n  satAmount: i32\n\n  ): void {\n  let source_index: i32 = 0\n  // Run percentile stretch\n  if (runPercentileStretch) {\n    percentileStretch(keepBalance, limit, limitValue, source_index)\n    source_index = 1\n    calculateCounts(1)\n    calculateDisplayCounts(1)\n  } else if (!default_clip) {\n    source_index = 1\n  }\n  // End percentile stretch\n\n  // Run gray world\n  if (runColorBalance) {\n    colorBalance(balanceR, balanceG, balanceB, source_index)\n    source_index = 2\n    calculateCounts(2)\n    calculateDisplayCounts(2)\n  } else if (!default_temp) {\n    source_index = 2\n  }\n  // End gray world\n\n  // // Center Shift\n  if (runLight) {\n    // centerShift(newCenter)\n    lightAdjustment(midAmount, highlightAmount, shadowAmount, source_index)\n    source_index = 3\n    calculateCounts(3)\n    calculateDisplayCounts(3)\n  } else if (!default_light) {\n    source_index = 3\n  }\n  // End center shift\n\n  if (runSaturation) {\n    saturation(satAmount, source_index)\n    source_index = 4\n    calculateCounts(4)\n    calculateDisplayCounts(4)\n  } else if (!default_saturation) {\n    source_index = 4\n  }\n\n}\nexport function colorChange (limit: i32, limitValue: i32):void {\n  \n}\n\nexport function percentileStretch (keepBalance: bool, maxPixels: i32, limitValue: i32, source_index: i32): void {\n  let dst_r: i32 = 0\n  let dst_g: i32 = 0\n  let dst_b: i32 = 0\n  \n  const originOffset = getViewOffset(source_index)\n  const resultOffset = getViewOffset(source_index + 1)\n\n  const b_index: i32 = (keepBalance ? 1 : 0)\n  const valIndex: i32 = limitValue + 1\n\n  const cache_offset_r: i32 = changetype<i32>(clip_cache[b_index][valIndex][0].buffer) + clip_cache[b_index][valIndex][0].byteOffset\n  const cache_offset_g: i32 = changetype<i32>(clip_cache[b_index][valIndex][1].buffer) + clip_cache[b_index][valIndex][1].byteOffset\n  const cache_offset_b: i32 = changetype<i32>(clip_cache[b_index][valIndex][2].buffer) + clip_cache[b_index][valIndex][2].byteOffset\n\n  for (let i = 0; i < viewLength; i += 4) {\n    dst_r = load<u8>(originOffset + i)\n    dst_g = load<u8>(originOffset + i + 1) \n    dst_b = load<u8>(originOffset + i + 2)\n\n    dst_r = load<u8>(cache_offset_r + dst_r)\n    dst_g = load<u8>(cache_offset_g + dst_g)\n    dst_b = load<u8>(cache_offset_b + dst_b)\n    \n    store<u8>(resultOffset + i, <u8> dst_r)\n    store<u8>(resultOffset + i + 1, <u8> dst_g)\n    store<u8>(resultOffset + i + 2, <u8> dst_b)\n  }\n}\n\nexport function colorBalance (balanceR: i32, balanceG: i32, balanceB: i32, source_index: i32): void {\n  const originStartOffset = getViewOffset(source_index)\n  const originEndOffset = originStartOffset + viewLength\n  let targetOffset = getViewOffset(2)\n\n  let dst_r: u8 = 0\n  let dst_g: u8 = 0\n  let dst_b: u8 = 0\n\n  const r_index: i32 = 100 + balanceR\n  const g_index: i32 = 100 + balanceG\n  const b_index: i32 = 100 + balanceB\n\n  const offset_r: i32 = changetype<i32>(temp_cache[r_index].buffer) + temp_cache[r_index].byteOffset\n  const offset_g: i32 = changetype<i32>(temp_cache[g_index].buffer) + temp_cache[g_index].byteOffset\n  const offset_b: i32 = changetype<i32>(temp_cache[b_index].buffer) + temp_cache[b_index].byteOffset\n\n  for (let i = originStartOffset; i < originEndOffset; i += 4, targetOffset += 4) {\n    dst_r = load<u8>(i)\n    dst_g = load<u8>(i + 1)\n    dst_b = load<u8>(i + 2)\n\n    dst_r = load<u8>(offset_r + dst_r)\n    dst_g = load<u8>(offset_g + dst_g)\n    dst_b = load<u8>(offset_b + dst_b)\n    \n    store<u8>(targetOffset, dst_r)\n    store<u8>(targetOffset + 1, dst_g)\n    store<u8>(targetOffset + 2, dst_b)\n  }\n}\n\nexport function lightAdjustment (midAmount: i32, lightAmount: i32, shadowAmount: i32, source_index: i32): void {\n  const originStartOffset = getViewOffset(source_index)\n  const originEndOffset = originStartOffset + viewLength\n  let targetOffset = getViewOffset(3)\n\n  let temp_r: f64 = 0\n  let temp_g: f64 = 0\n  let temp_b: f64 = 0\n  let dst_r: i32 = 0\n  let dst_g: i32 = 0\n  let dst_b: i32 = 0\n  \n  let curve_r: f64 = 0\n  let curve_g: f64 = 0\n  let curve_b: f64 = 0\n\n  let avg: i32 = 0\n  \n  const exp_index: i32 = 100 + midAmount\n  const shadow_index: i32 = 100 + shadowAmount\n  const light_index: i32 = 100 + lightAmount\n\n  const offset_exp: i32 = changetype<i32>(exposure_cache[exp_index].buffer) + exposure_cache[exp_index].byteOffset\n  // const shadow_offset: i32 = changetype<i32>(shadow_cache[shadow_index].buffer) + shadow_cache[shadow_index].byteOffset\n\n  for (let i = originStartOffset; i < originEndOffset; i += 4, targetOffset += 4) {\n    dst_r = load<u8>(i)\n    dst_g = load<u8>(i + 1)\n    dst_b = load<u8>(i + 2)\n\n    // EXposure\n    dst_r = load<u8>(offset_exp + dst_r)\n    dst_g = load<u8>(offset_exp + dst_g)\n    dst_b = load<u8>(offset_exp + dst_b)\n    // dst_r = unchecked(exposure_cache[exp_index][dst_r])\n    // dst_g = unchecked(exposure_cache[exp_index][dst_g])\n    // dst_b = unchecked(exposure_cache[exp_index][dst_b])\n    \n    // Shadows\n    if (shadowAmount > 0) {\n      // avg = getAverage(dst_r, dst_g, dst_b)\n\n      // temp_r = load<i32>(shadow_offset + dst_r * 4)\n      // temp_g = load<i32>(shadow_offset + dst_g * 4)\n      // temp_b = load<i32>(shadow_offset + dst_b * 4)\n\n      // curve_r = unchecked(curve_gamma_down_2[avg])\n      // curve_g = unchecked(curve_gamma_down_2[avg])\n      // curve_b = unchecked(curve_gamma_down_2[avg])\n\n      // dst_r = <i32> lerp_clamped(dst_r, temp_r, curve_r)\n      // dst_g = <i32> lerp_clamped(dst_g, temp_g, curve_g)\n      // dst_b = <i32> lerp_clamped(dst_b, temp_b, curve_b)\n      \n      avg = getAverage(dst_r, dst_g, dst_b)\n      \n      dst_r = unchecked(shadow_cache[shadow_index][avg][dst_r])\n      dst_g = unchecked(shadow_cache[shadow_index][avg][dst_g])\n      dst_b = unchecked(shadow_cache[shadow_index][avg][dst_b])\n    }\n    if (shadowAmount < 0) {\n      avg = getAverage(dst_r, dst_g, dst_b)\n      dst_r = unchecked(shadow_cache[shadow_index][avg][dst_r])\n      dst_g = unchecked(shadow_cache[shadow_index][avg][dst_g])\n      dst_b = unchecked(shadow_cache[shadow_index][avg][dst_b])\n    }\n\n    //  Lights\n    if (lightAmount > 0) {\n      avg = getAverage(dst_r, dst_g, dst_b)\n\n      dst_r = unchecked(light_cache[light_index][avg][dst_r])\n      dst_g = unchecked(light_cache[light_index][avg][dst_g])\n      dst_b = unchecked(light_cache[light_index][avg][dst_b])\n    }\n    if (lightAmount < 0) {\n      avg = getAverage(dst_r, dst_g, dst_b)\n      dst_r = unchecked(light_cache[light_index][avg][dst_r])\n      dst_g = unchecked(light_cache[light_index][avg][dst_g])\n      dst_b = unchecked(light_cache[light_index][avg][dst_b])\n      // curve_r = unchecked(curve_gamma_up_2[avg])\n      // curve_g = unchecked(curve_gamma_up_2[avg])\n      // curve_b = unchecked(curve_gamma_up_2[avg])\n      \n      // temp_r = unchecked(light_cache[light_index][dst_r])\n      // temp_g = unchecked(light_cache[light_index][dst_g])\n      // temp_b = unchecked(light_cache[light_index][dst_b])\n\n      // dst_r = <i32> lerp_clamped(dst_r, temp_r, curve_r)\n      // dst_g = <i32> lerp_clamped(dst_g, temp_g, curve_g)\n      // dst_b = <i32> lerp_clamped(dst_b, temp_b, curve_b)\n    }\n\n  //   // Saturation\n  //   avg = <i32> (<f32> (dstR + dstG + dstB) * divider)\n  //   lowest = lowestRGB(dstR, dstG, dstB)\n  //   highest = highestRGB(dstR, dstG, dstB)\n    \n  //   curve_r = unchecked(curveSinFull[dstB])\n  //   curve_g = unchecked(curveSinFull[dstG])\n  //   curve_b = unchecked(curveSinFull[dstB])\n\n  //   shadowR = <f32> dstR + <f32> (avg - dstR) * <f32> shadowAmount * 0.01\n  //   shadowG = <f32> dstG + <f32> (avg - dstG) * <f32> shadowAmount * 0.01\n  //   shadowB = <f32> dstB + <f32> (avg - dstB) * <f32> shadowAmount * 0.01\n\n  //   dstR = <i32> lerp_clamped(dstR, shadowR, curve_r)\n  //   dstG = <i32> lerp_clamped(dstG, shadowG, curve_g)\n  //   dstB = <i32> lerp_clamped(dstB, shadowB, curve_b)\n\n    store<u8>(targetOffset, <u8> dst_r)\n    store<u8>(targetOffset + 1, <u8> dst_g)\n    store<u8>(targetOffset + 2, <u8> dst_b)\n    // unchecked(result_light[i] = dst_r)\n    // unchecked(result_light[i + 1] = dst_g)\n    // unchecked(result_light[i + 2] = dst_b)\n  }\n}\n\nexport function saturation (satAmount: i32, source_index: i32): void {\n  const originStartOffset = getViewOffset(source_index)\n  const originEndOffset = originStartOffset + viewLength\n  let targetOffset = getViewOffset(4)\n\n  let dst_r: i32 = 0\n  let dst_g: i32 = 0\n  let dst_b: i32 = 0\n  \n  let avg: i32 = 0\n\n  const saturation_index = satAmount + 100\n  \n  for (let i = 0; i < viewLength; i += 4) {\n    dst_r = load<u8>(originStartOffset + i)\n    dst_g = load<u8>(originStartOffset + i + 1)\n    dst_b = load<u8>(originStartOffset + i + 2)\n\n    avg = getAverage(dst_r, dst_g, dst_b)\n\n    dst_r = unchecked(saturation_cache[saturation_index][avg][dst_r])\n    dst_g = unchecked(saturation_cache[saturation_index][avg][dst_g])\n    dst_b = unchecked(saturation_cache[saturation_index][avg][dst_b])\n\n    store<u8>(targetOffset + i, dst_r)\n    store<u8>(targetOffset + i + 1, dst_g)\n    store<u8>(targetOffset + i + 2, dst_b)\n  }\n}\n\nexport function grayWorld (strength: i32): void {\n  let sumR: f32 = 0\n  let sumG: f32 = 0\n  let sumB: f32 = 0\n\n  const originStartOffset = getViewOffset(1)\n  const originEndOffset = originStartOffset + viewLength\n\n  for (let i = originStartOffset; i < originEndOffset; i += 4) {\n    sumR += load<u8>(i)\n    sumG += load<u8>(i + 1)\n    sumB += load<u8>(i + 2)\n  }\n  const meanR: u32 = u32(sumR / f32(channelLength))\n  const meanG: u32 = u32(sumG / f32(channelLength))\n  const meanB: u32 = u32(sumB / f32(channelLength))\n\n  const factorR: f32 = 128.0 / f32(meanR)\n  const factorG: f32 = 128.0 / f32(meanG)\n  const factorB: f32 = 128.0 / f32(meanB)\n\n  let r: i32 = 0\n  let g: i32 = 0\n  let b: i32 = 0\n  let dstR: f32 = 0\n  let dstG: f32 = 0\n  let dstB: f32 = 0\n\n  const f: f32 = f32(strength) * 0.1\n\n  let curveR: f32 = 0\n  let curveG: f32 = 0\n  let curveB: f32 = 0\n\n  const targetOffset = getViewOffset(2)\n  // (a * (1.0 - f)) + (b * f)\n  for (let i = 0; i < viewLength; i += 4) {\n    r = load<u8>(originStartOffset + i)\n    g = load<u8>(originStartOffset + i + 1)\n    b = load<u8>(originStartOffset + i + 2)\n\n    if (factorR > 1) {\n      curveR = unchecked(curveExpDown[r])\n    } else {\n      curveR = unchecked(curveGrayDown[r])\n    }\n    if (factorG > 1) {\n      curveG = unchecked(curveExpDown[g])\n    } else {\n      curveG = unchecked(curveGrayDown[g])\n    }\n    if (factorB > 1) {\n      curveB = unchecked(curveExpDown[b])\n    } else {\n      curveB = unchecked(curveGrayDown[b])\n    }\n    // newR = (<f32>r * (1.0 - (f * curveR))) + (<f32>r * factorR * curveR * f)\n    // newG = (<f32>g * (1.0 - (f * curveG))) + (<f32>g * factorG * curveG * f)\n    // newB = (<f32>b * (1.0 - (f * curveB))) + (<f32>b * factorB * curveB * f)\n    \n    dstR = factorR * <f32> r\n    dstG = factorG * <f32> g\n    dstB = factorB * <f32> b\n\n    if (dstR > 255) {\n      dstR = 255\n    } else if (dstR < 0) {\n      dstR = 0\n    }\n    if (dstG > 255) {\n      dstG = 255\n    } else if (dstG < 0) {\n      dstG = 0\n    }\n    if (dstB > 255) {\n      dstB = 255\n    } else if (dstB < 0) {\n      dstB = 0\n    }\n\n    dstR = lerp(<f32> r, dstR, f * curveR)\n    dstG = lerp(<f32> g, dstG, f * curveG)\n    dstB = lerp(<f32> b, dstB, f * curveB)\n\n    store<u8>(targetOffset + i, u8(dstR))\n    store<u8>(targetOffset + i + 1, u8(dstG))\n    store<u8>(targetOffset + i + 2, u8(dstB))\n  }\n}\n\nfunction lerp (a: f32, b: f32, f: f32): f32 {\n  return  (a * (1.0 - f)) + (b * f)\n}\nfunction lerp_f64 (a: f64, b: f64, f: f64): f64 {\n  return  (a * (1.0 - f)) + b * f\n}\nfunction lerp_clamped (a: f64, b: f64, f: f64): f64 {\n  const result: f64 = a * (1.0 - f) + b * f\n  if (result > 255) return 255\n  if (result < 0) return 0\n  return  result\n}\nfunction clampI32 (value_ptr: usize, min: i32, max: i32): void {\n  if (load<i32>(value_ptr) < min)\n    store<i32>(value_ptr, min)\n  else if (load<i32>(value_ptr) > max)\n    store<i32>(value_ptr, max)\n}\n\nfunction normalize2rgb (oMin: f32, oMax: f32, dMin: f32, dMax: f32, value: f32): f32 {\n  return <f32> ((value - oMin) / (oMax - oMin) * (dMax - dMin) + dMin)\n}\n\nfunction findPercentage (number: f32, a: f32, b: f32): f32 {\n  return (number - a) / (b - a)\n}\n\nfunction getAverage (r: i32, g: i32, b: i32): i32 {\n  return <i32> (r * luma_strength_r + g * luma_strength_g + b * luma_strength_b)\n}\n\nfunction lowestRGB(r: i32, g: i32, b: i32): i32 {\n  if (r < g) \n    if (r < b) \n      return r\n    else \n      return b\n  else if (g < b) \n    return g\n  else \n    return b\n  // if (r < g && r < b) return r\n  // if (g < r && g < b) return g\n  // return b\n}\n\nfunction middleRGB (r: i32, g: i32, b: i32): i32 {\n  if (r < g) \n    if (r > b) \n      return r\n    else \n      return b\n  else if (g < b) \n    return g\n  else \n    return b\n  // if (r < g && r < b) return r\n  // if (g < r && g < b) return g\n  // return b\n}\n\nfunction highestRGB(r: i32, g: i32, b: i32): i32 {\n  if (r > g) \n    if (r > b) \n      return r\n    else \n      return b\n  else if (g > b) \n    return g\n  else \n    return b\n}\n\nfunction cacheClip (): void {\n  for (let b = 0; b < 2; b++) {\n    clip_cache[b] = new StaticArray<StaticArray<Uint8Array>>(101)\n    const keepBalance: bool = (b == 1)\n\n    for (let limitValue = 0; limitValue < 101; limitValue++) {\n      clip_cache[b][limitValue] = new StaticArray<Uint8Array>(3)\n\n      clip_cache[b][limitValue][0] = new Uint8Array(256)\n      clip_cache[b][limitValue][1] = new Uint8Array(256)\n      clip_cache[b][limitValue][2] = new Uint8Array(256)\n      const maxPixels: i32 = <i32> Math.ceil((<f64> width * <f64> height * 0.0001) * <f64> limitValue)\n\n      const clips = new StaticArray<i32>(6)\n      clips[1] = 255\n      clips[3] = 255\n      clips[5] = 255\n      \n      if (limitValue >= 0) {\n        for (let channel = 0; channel < 3; channel++) {\n          const countOffset = getCountOffset(0, channel)\n          const limitL: u32 = maxPixels + load<u32>(countOffset)\n          const limitR: u32 = maxPixels + load<u32>(countOffset + 255 * 4)\n          let sumL: u32 = 0\n          let sumR: u32 = 0\n          let clipL: i32 = 0\n          let clipR: i32 = 255\n          for (let i: i32 = 0; i <= 255; i++) {\n            sumL += load<u32>(countOffset + i * 4)\n            if (sumL <= limitL) {\n              clipL = i\n            } else {\n              break\n            }\n          }\n          for (let i: i32 = 255; i >= 0; i--) {\n            sumR += load<u32>(countOffset + i * 4)\n            if (sumR <= limitR) {\n              clipR = i\n            } else {\n              break\n            }\n          }\n          clips[0 + channel * 2] = clipL\n          clips[1 + channel * 2] = clipR\n        }\n      }\n\n      if (keepBalance) {\n        let minL = clips[0]\n        minL = clips[2] < minL ? clips[2] : minL\n        minL = clips[4] < minL ? clips[4] : minL\n\n        clips[0] = minL\n        clips[2] = minL\n        clips[4] = minL\n\n        let maxR = clips[1]\n        maxR = clips[3] > maxR ? clips[3] : maxR\n        maxR = clips[5] > maxR ? clips[5] : maxR\n\n        clips[1] = maxR\n        clips[3] = maxR\n        clips[5] = maxR\n      }\n      // \n\n      const rfactor: f64 = 1.0 / (unchecked(clips[1]) - unchecked(clips[0])) * 255\n      const gfactor: f64 = 1.0 / (unchecked(clips[3]) - unchecked(clips[2])) * 255\n      const bfactor: f64 = 1.0 / (unchecked(clips[5]) - unchecked(clips[4])) * 255\n\n      let curve_r: f64 = 1\n      let curve_g: f64 = 1\n      let curve_b: f64 = 1\n      const rclipL = unchecked(clips[0])\n      const gclipL = unchecked(clips[2])\n      const bclipL = unchecked(clips[4])\n      let temp_r: f64 = 0\n      let temp_g: f64 = 0\n      let temp_b: f64 = 0\n      for (let dst_p = 0; dst_p < 256; dst_p++) {\n        // if (rfactor >= 0) curve_r = unchecked(curve_gamma_down_0_50[dst_p])\n        //  else curve_r = unchecked(curve_gamma_up_0_50[dst_p])\n        \n        //  if (gfactor >= 0) curve_g = unchecked(curve_gamma_down_0_50[dst_p])\n        //  else curve_g = unchecked(curve_gamma_up_0_50[dst_p])\n         \n        //  if (bfactor >= 0) curve_b = unchecked(curve_gamma_down_0_50[dst_p])\n        //  else curve_b = unchecked(curve_gamma_up_0_50[dst_p])\n\n        curve_r = unchecked(curveSinFull_5[dst_p])\n        curve_g = unchecked(curveSinFull_5[dst_p])\n        curve_b = unchecked(curveSinFull_5[dst_p])\n\n        temp_r = <f64> (dst_p - rclipL) * rfactor\n        temp_g = <f64> (dst_p - gclipL) * gfactor\n        temp_b = <f64> (dst_p - bclipL) * bfactor\n\n        if (temp_r < 0) temp_r = 0\n        if (temp_g < 0) temp_g = 0\n        if (temp_b < 0) temp_b = 0\n        \n        temp_r = lerp_f64(dst_p, temp_r, curve_r)\n        temp_g = lerp_f64(dst_p, temp_g, curve_g)\n        temp_b = lerp_f64(dst_p, temp_b, curve_b)\n\n        // if (temp_r > 255) temp_r = 255\n        // if (temp_g > 255) temp_g = 255\n        // if (temp_b > 255) temp_b = 255\n\n        // if (temp_r > 255) temp_r = 255 - 0\n        // if (temp_r < 0) temp_r = 0 + (dst_p) * 0.5\n        // if (temp_g > 255) temp_g = 255 - 0\n        // if (temp_g < 0) temp_g = 0 + (dst_p) * 0.5\n        // if (temp_b > 255) temp_b = 255 - 0\n        // if (temp_b < 0) temp_b = 0 + (dst_p) * 0.5\n\n        temp_r = lerp_clamped(dst_p, temp_r, <f64> limitValue / 101)\n        temp_g = lerp_clamped(dst_p, temp_g, <f64> limitValue / 101)\n        temp_b = lerp_clamped(dst_p, temp_b, <f64> limitValue / 101)\n        \n        clip_cache[b][limitValue][0][dst_p] = <u8> temp_r\n        clip_cache[b][limitValue][1][dst_p] = <u8> temp_g\n        clip_cache[b][limitValue][2][dst_p] = <u8> temp_b\n      }\n    }\n  }\n}\n\nfunction cacheTemp (): void {\n  for (let i = 0; i < 201; i++) {\n    temp_cache[i] = new Uint8Array(256)\n    const temp_amount: i32 = -100 + i\n    \n    for (let dst_p = 0; dst_p < 256; dst_p++) {\n      let curve_p: f64 = 1\n      let temp_p: f64 = 0\n\n      if (temp_amount > 0) {\n        // curve_p = unchecked(curve_gamma_down_0_25[dst_p])\n        const inv_p = 255 - dst_p\n        curve_p = unchecked(curve_gamma_down_0_50[inv_p])\n        temp_p = 255 - inv_p * Math.pow(2, -temp_amount * 0.01)\n      } else {\n        // curve_p = unchecked(curve_gamma_up_0_25[dst_p])\n        curve_p = unchecked(curve_gamma_down_0_50[dst_p])\n        temp_p = dst_p * Math.pow(2, temp_amount * 0.01)\n      }\n\n      // temp_p: f64 = dst_p + <f64> temp_amount * unchecked(curveSinFull_1[dst_p])\n      // if (temp_p > 255) temp_p = 255\n      // if (temp_p < 0) temp_p = 0\n      temp_p = lerp_clamped(dst_p, temp_p, curve_p)\n\n      temp_cache[i][dst_p] = <u8> temp_p\n    }\n  }\n}\n\nfunction cacheExposure(): void {\n  for (let i = 0; i < 201; i++) {\n    exposure_cache[i] = new Uint8Array(256)\n    const exp_amount: i32 = -100 + i\n    // i = 0    exp = -100\n    // i = 99   exp = -1\n    // I = 100  exp = 1\n    // I = 199  exp = 100\n    const exp_plus: f64 = Math.pow(2, Math.abs(exp_amount) * 0.05)\n    const exp_minus: f64 = Math.pow(2, -Math.abs(exp_amount) * 0.05)\n\n    const down_full: f64 = Math.pow(2, -3)\n\n    const exp_stretch_strength_down_full: f64 = (1 / (255 + (Math.abs(exp_amount) * 5)) * 255)\n    const exp_stretch_curve_down: f64 = 1 - unchecked(curve_gamma_down_0_25[<i32> (Math.abs(exp_amount) * 2.55)])\n    const exp_stretch_strength_down: f64 = lerp_f64(1, down_full, exp_stretch_curve_down)\n\n    for (let dst_p = 0; dst_p < 256; dst_p++) {\n      let curve_p: f64 = 0\n      let temp_p: f64 = dst_p\n      // Exposure\n      if (exp_amount > 0) {\n        // curve_p = (1 - unchecked(curveLogUp0[dst_p]))\n        // temp_p = lerp_f64(<f64> dst_p, <f64> dst_p * exp_plus, curve_p)\n        // if (temp_p > 255) temp_p = 255\n        const inv_p = 255 - dst_p\n        curve_p = unchecked(curve_gamma_down_0_50[inv_p])\n        temp_p = 255 - inv_p * exp_minus\n        temp_p = lerp_clamped(dst_p, temp_p, curve_p)\n      } else if (exp_amount < 0) {\n        // curve_p = unchecked(curve_gamma_down_0_25[<i32> (0.99 * dst_p)])\n        // temp_p = <f64> dst_p * lerp_f64(1, exp_minus, curve_p) \n        // temp_p = lerp_f64(dst_p, temp_p, curve_p)\n        // // temp_p = temp_p * exp_stretch_strength_down\n        curve_p = unchecked(curve_gamma_down_0_50[<i32> (1 * dst_p)])\n        temp_p = dst_p * exp_minus\n        temp_p = lerp_clamped(dst_p, temp_p, curve_p)\n      }\n  \n      // Stretch\n\n      exposure_cache[i][dst_p] = <u8> temp_p\n    }\n  }\n}\n\nfunction cacheShadow (): void {\n  for (let i = 0; i < 201; i++) {\n    shadow_cache[i] = new StaticArray<Uint8Array>(256)\n    const shadow_amount: i32 = -100 + i\n    const exp_minus: f64 = Math.pow(2, -Math.abs(shadow_amount) * 0.05)\n    const shadow_abs: i32 = <i32> Math.abs(shadow_amount)\n    for (let avg = 0; avg < 256; avg++) {\n      shadow_cache[i][avg] = new Uint8Array(256)\n      for (let dst_p = 0; dst_p < 256; dst_p++) {\n        let temp_p: f64 = dst_p\n        let curve_p: f64 = 0\n\n        if (shadow_amount > 0) {\n          const curve_dst_1: f64 = unchecked(curve_gamma_up_0_50[dst_p]) * 0.5\n          const curve_dst_2: f64 = unchecked(curve_gamma_up_2[dst_p]) * 0.5\n          \n          const dst_power: f64 = unchecked(curve_gamma_up_2[dst_p])\n          const avg_power: f64 = 1 - dst_power\n          \n          const curve_mix_1: f64 = ( unchecked(curve_gamma_down_2[<i32> (\n            (dst_power * dst_p) + \n            (avg_power * avg))])) * 0.5\n          const curve_mix_2: f64 = ( unchecked(curve_gamma_down_2[<i32> (\n            (dst_power * dst_p) + \n            (avg_power * avg))])) * 0.5\n\n          temp_p = <f64> dst_p + (<f64> shadow_amount * 2 * (curve_dst_1 + curve_dst_2))\n          temp_p = lerp_clamped(dst_p, temp_p, curve_mix_1 + curve_mix_2)\n\n        } else if (shadow_amount < 0) {\n          // ----- Normal Shadow\n          const curve_dst: f64 = unchecked(curve_gamma_down_2[dst_p])\n          const curve_avg: f64 = unchecked(curve_gamma_up_0_50[avg])\n          const curve_mix: f64 = unchecked(curve_gamma_up_1[<i32> (\n            (1 * dst_p) + \n            (0 * avg))])\n          temp_p = <f64> dst_p + (<f64> shadow_amount * 4 * curve_dst * curve_avg)\n          temp_p = lerp_clamped(dst_p, temp_p, curve_mix)\n        }\n\n        shadow_cache[i][avg][dst_p] = <u8> temp_p\n      }\n    }\n  }\n}\n\nfunction cacheLight (): void {\n  for (let i = 0; i < 201; i++) {\n    light_cache[i] = new StaticArray<Uint8Array>(256)\n    const light_amount: i32 = -100 + i\n    const exp_minus: f64 = Math.pow(2, -Math.abs(light_amount) * 0.05)\n\n    for (let avg = 0; avg < 256; avg++) {\n      light_cache[i][avg] = new Uint8Array(256)\n\n      for (let dst_p = 0; dst_p < 256; dst_p++) {\n        let temp_p: f64 = dst_p\n        let curve_p: f64 = 0\n  \n        if (light_amount > 0) {\n          // // ----- Test 0\n          // const curve_dst: f64 = unchecked(curve_gamma_down_0_50[avg])\n          // // const curve_avg: f64 = unchecked(curve_gamma_up_0_50[avg]) * 0 + 1\n          // const curve_mix: f64 = 1 - unchecked(curve_gamma_down_0_50[<i32> (\n          //   (1 * dst_p) + \n          //   (0 * avg))])\n          // temp_p = <f64> dst_p + (<f64> light_amount * 2 * curve_dst * 1)\n          // temp_p = lerp_clamped(dst_p, temp_p, curve_mix)\n\n          // // ----- Test 1\n          const curve_dst: f64 = unchecked(curve_gamma_up_2[dst_p])\n          const curve_avg: f64 = unchecked(curve_gamma_down_0_50[avg])\n          const curve_mix: f64 = unchecked(curve_gamma_down_1[<i32> (\n            (1 * dst_p) + \n            (0 * avg))])\n          temp_p = <f64> dst_p + (<f64> light_amount * 4 * curve_dst * curve_avg)\n          temp_p = lerp_clamped(dst_p, temp_p, curve_mix)\n\n          // ----- Test 2\n          // temp_p = <f64> dst_p + <f64> light_amount * 2 * curve_p\n          // if (temp_p > 255)  temp_p = 255 + (temp_p - 255) * ((255 - avg) / 256)\n          \n          // curve_p = unchecked(curve_gamma_up_2[dst_p])\n          \n          // temp_p = lerp_clamped(dst_p, temp_p, curve_p)\n        } else if (light_amount < 0) {\n          const curve_dst_1: f64 = unchecked(curve_gamma_down_0_50[dst_p]) * 0.5\n          const curve_dst_2: f64 = unchecked(curve_gamma_down_2[dst_p]) * 0.5\n          \n          const dst_power: f64 = unchecked(curve_gamma_down_2[dst_p])\n          const avg_power: f64 = 1 - dst_power\n\n          const curve_mix_1: f64 = ( unchecked(curve_gamma_up_2[<i32> (\n            (dst_power * dst_p) + \n            (avg_power * avg))])) * 0.5\n          const curve_mix_2: f64 = ( unchecked(curve_gamma_up_2[<i32> (\n            (dst_power * dst_p) + \n            (avg_power * avg))])) * 0.5\n\n          temp_p = <f64> dst_p + (<f64> light_amount * 2 * (curve_dst_1 + curve_dst_2))\n          temp_p = lerp_clamped(dst_p, temp_p, curve_mix_1 + curve_mix_2)\n\n        }\n  \n        light_cache[i][avg][dst_p] = <u8> temp_p\n      }\n      \n    }\n    \n  }\n}\n\nfunction cacheSaturation (): void {\n  for (let index = 0; index < 201; index++) {\n    const satAmount: i32 = -100 + index\n    saturation_cache[index] = new StaticArray<Uint8Array>(256)\n\n    let temp_p: f64 = 0\n    let curve_p: f64 = 1\n    let factor: f64 = (255 + satAmount) / (255 - satAmount)\n\n    for (let avg = 0; avg < 256; avg++) {\n      saturation_cache[index][avg] = new Uint8Array(256)\n      for (let dst_p = 0; dst_p < 256; dst_p++) {\n          \n        temp_p = <f32> avg + <f32> (dst_p - avg) * factor\n\n        temp_p = lerp_clamped(dst_p, temp_p, curve_p)\n\n        saturation_cache[index][avg][dst_p] = <i32> temp_p\n      }\n    }\n  }\n}\n\nexport function calculateCounts (index: u32): void {\n  clearCounts(index)\n  const _viewOffset = getViewOffset(index)\n  const _countOffsetR = getCountOffset(index, 0)\n  const _countOffsetG = getCountOffset(index, 1)\n  const _countOffsetB = getCountOffset(index, 2)\n  const viewEnd = _viewOffset  + viewLength\n  let countIndexR: u32 = 0\n  let countIndexG: u32 = 0\n  let countIndexB: u32 = 0\n  for (let i = _viewOffset; i < viewEnd; i += 4) {\n    countIndexR = _countOffsetR + 4 * load<u8>(i)\n    countIndexG = _countOffsetG + 4 * load<u8>(i + 1)\n    countIndexB = _countOffsetB + 4 * load<u8>(i + 2)\n\n    store<u32>(countIndexR, load<u32>(countIndexR) + 1)\n    store<u32>(countIndexG, load<u32>(countIndexG) + 1)\n    store<u32>(countIndexB, load<u32>(countIndexB) + 1)\n  }\n}\n\nexport function calculateDisplayCounts (index: u32): void {\n  clearDisplayCounts(index)\n  for (let chan = 0; chan < 3; chan++) {\n    const countOffset = getCountOffset(index, chan)\n    \n    const displayCountOffset = getDisplayCountOffset(index, chan)\n  \n    let max_count: i32 = 0\n    for (let i = 0; i < 256; i++) {\n      const count = load<i32>(countOffset + i * 4)\n      if (count > max_count) max_count = count\n    }\n    const factor_count: f32 = 100.0 / <f32> max_count\n\n    for (let i = 0; i < 256; i++) {\n      let count: f64 = load<u32>(countOffset + i * 4)\n      count = count * factor_count\n      if (count > 0 && count < 1) {\n        count = 1\n      }\n      store<u8>(displayCountOffset + i, <u8> count)\n    }\n  }\n  \n  // for (let i = _countOffset, d = _displayCountOffset; i < endCount; i += 4, d++) {\n  //   const r: f32 = <f32>load<i32>(i)\n  //   const g: f32 = <f32>load<i32>(i + 256 * 4)\n  //   const b: f32 = <f32>load<i32>(i + 512 * 4)\n\n  //   let newR: i32 = 0\n  //   let newG: i32 = 0\n  //   let newB: i32 = 0\n\n  //   if (g > 0) {\n  //     newR = <i32>(factorR * r)\n  //     if (newR < 1) {\n  //       newR = 1\n  //     } else if (newR > 100) {\n  //       newR = 100\n  //     }\n  //   }\n  //   if (g > 0) {\n  //     newG = <i32>(factorG * g)\n  //     if (newG < 1) {\n  //       newG = 1\n  //     } else if (newG > 100) {\n  //       newG = 100\n  //     }\n  //   }\n  //   if (b > 0) {\n  //     newB = <i32>(factorB * b)\n  //     if (newB < 1) {\n  //       newB = 1\n  //     } else if (newB > 100) {\n  //       newB = 100\n  //     }\n  //   }\n\n  //   store<u8>(d, <u8>newR)\n  //   store<u8>(d + 256, <u8>(newG))\n  //   store<u8>(d + 512, <u8>(newB))\n  // }\n}\n\nfunction clearCounts (index: u32): void {\n  for (let channel = 0; channel < 3; channel++) {\n    const countOffset = getCountOffset(index, channel)\n    const endCountCache: u32 = countOffset + (256 * 4)\n    for (let i: u32 = countOffset; i < endCountCache; i += 4) {\n      store<u32>(i, 0)\n    } \n  }\n}\n\nfunction clearDisplayCounts (index: u32): void {\n  for (let channel = 0; channel < 3; channel++) {\n    const displayCountOffset = getDisplayCountOffset(index, channel)\n    const endCountCache: u32 = displayCountOffset + (256)\n    for (let i: u32 = displayCountOffset; i < endCountCache; i++) {\n      store<u32>(i, 0)\n    } \n  }\n}\n\nfunction copyData(from: u32, to: u32): void {\n  const viewOrigin = getViewOffset(from)\n  const countOrigin = getCountOffset(from, 0)\n  const displayCountOrigin = getDisplayCountOffset(from, 0)\n  \n  const viewDest = getViewOffset(to)\n  const countDest = getCountOffset(to, 0)\n  const displayCountDest = getDisplayCountOffset(to, 0)\n  \n  for (let i: i32 = 0; i < viewLength; i++) {\n    store<u8>(viewDest + i, load<u8>(viewOrigin + i))\n  }\n}\n\nexport function getViewOffset (index: i32): i32 {\n  return changetype<i32>(views[index].buffer) + views[index].byteOffset\n}\nexport function getCountOffset (viewIndex: i32, channelIndex: i32): i32 {\n  return changetype<i32>(counts[viewIndex][channelIndex].buffer) + counts[viewIndex][channelIndex].byteOffset\n}\nexport function getDisplayCountOffset (viewIndex: i32, channelIndex: i32): i32 {\n  return changetype<i32>(displayCounts[viewIndex][channelIndex].buffer) + displayCounts[viewIndex][channelIndex].byteOffset\n}\n// [view8]  [view8original] [view8cache]  [counts]      [countsOriginal]\n// [Full]   [Full]          [full]        [256 * 4 * 3] [256 * 4 * 3]\n","/// <reference path=\"./rt/index.d.ts\" />\n\nimport { OBJECT, BLOCK_MAXSIZE, TOTAL_OVERHEAD } from \"./rt/common\";\nimport { idof } from \"./builtins\";\nimport { E_INVALIDLENGTH } from \"./util/error\";\n\nexport abstract class ArrayBufferView {\n\n  readonly buffer: ArrayBuffer;\n  @unsafe readonly dataStart: usize;\n  readonly byteLength: i32;\n\n  get byteOffset(): i32 {\n    return <i32>(this.dataStart - changetype<usize>(this.buffer));\n  }\n\n  protected constructor(length: i32, alignLog2: i32) {\n    if (<u32>length > <u32>BLOCK_MAXSIZE >>> alignLog2) throw new RangeError(E_INVALIDLENGTH);\n    var buffer = changetype<ArrayBuffer>(__new(length = length << alignLog2, idof<ArrayBuffer>()));\n    memory.fill(changetype<usize>(buffer), 0, <usize>length);\n    this.buffer = buffer; // links\n    this.dataStart = changetype<usize>(buffer);\n    this.byteLength = length;\n  }\n}\n\n@final export class ArrayBuffer {\n\n  static isView<T>(value: T): bool {\n    if (isNullable<T>()) {\n      if (value === null) return false;\n    }\n    if (value instanceof Int8Array) return true;\n    if (value instanceof Uint8Array) return true;\n    if (value instanceof Uint8ClampedArray) return true;\n    if (value instanceof Int16Array) return true;\n    if (value instanceof Uint16Array) return true;\n    if (value instanceof Int32Array) return true;\n    if (value instanceof Uint32Array) return true;\n    if (value instanceof Int64Array) return true;\n    if (value instanceof Uint64Array) return true;\n    if (value instanceof Float32Array) return true;\n    if (value instanceof Float64Array) return true;\n    if (value instanceof DataView) return true;\n    return false;\n  }\n\n  constructor(length: i32) {\n    if (<u32>length > <u32>BLOCK_MAXSIZE) throw new RangeError(E_INVALIDLENGTH);\n    var buffer = changetype<ArrayBuffer>(__new(<usize>length, idof<ArrayBuffer>()));\n    memory.fill(changetype<usize>(buffer), 0, <usize>length);\n    return buffer;\n  }\n\n  get byteLength(): i32 {\n    return changetype<OBJECT>(changetype<usize>(this) - TOTAL_OVERHEAD).rtSize;\n  }\n\n  slice(begin: i32 = 0, end: i32 = BLOCK_MAXSIZE): ArrayBuffer {\n    var length = this.byteLength;\n    begin = begin < 0 ? max(length + begin, 0) : min(begin, length);\n    end   = end   < 0 ? max(length + end  , 0) : min(end  , length);\n    var outSize = <usize>max(end - begin, 0);\n    var out = changetype<ArrayBuffer>(__new(outSize, idof<ArrayBuffer>()));\n    memory.copy(changetype<usize>(out), changetype<usize>(this) + <usize>begin, outSize);\n    return out;\n  }\n\n  toString(): string {\n    return \"[object ArrayBuffer]\";\n  }\n}\n","import { COMPARATOR, SORT } from \"./util/sort\";\nimport { E_INDEXOUTOFRANGE, E_INVALIDLENGTH, E_NOTIMPLEMENTED } from \"./util/error\";\nimport { joinIntegerArray, joinFloatArray } from \"./util/string\";\nimport { REVERSE } from \"./util/bytes\";\nimport { idof } from \"./builtins\";\nimport { ArrayBufferView } from \"./arraybuffer\";\n\nexport class Int8Array extends ArrayBufferView {\n  [key: number]: i8;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly BYTES_PER_ELEMENT: i32 = sizeof<i8>();\n\n  constructor(length: i32) {\n    super(length, alignof<i8>());\n  }\n\n  get length(): i32 {\n    return this.byteLength;\n  }\n\n  @operator(\"[]\")\n  private __get(index: i32): i8 {\n    if (<u32>index >= <u32>this.byteLength) throw new RangeError(E_INDEXOUTOFRANGE);\n    return load<i8>(this.dataStart + <usize>index);\n  }\n\n  @unsafe @operator(\"{}\")\n  private __uget(index: i32): i8 {\n    return load<i8>(this.dataStart + <usize>index);\n  }\n\n  @operator(\"[]=\")\n  private __set(index: i32, value: native<i8>): void {\n    if (<u32>index >= <u32>this.byteLength) throw new RangeError(E_INDEXOUTOFRANGE);\n    store<i8>(this.dataStart + <usize>index, value);\n  }\n\n  @unsafe @operator(\"{}=\")\n  private __uset(index: i32, value: native<i8>): void {\n    store<i8>(this.dataStart + <usize>index, value);\n  }\n\n  at(index: i32): i8 {\n    var len = this.byteLength;\n    index += select(0, len, index >= 0);\n    if (<u32>index >= <u32>len) throw new RangeError(E_INDEXOUTOFRANGE);\n    return load<i8>(this.dataStart + <usize>index);\n  }\n\n  includes(searchElement: i8, fromIndex: i32 = 0): bool {\n    return INCLUDES<Int8Array, i8>(this, searchElement, fromIndex);\n  }\n\n  indexOf(searchElement: i8, fromIndex: i32 = 0): i32 {\n    return INDEX_OF<Int8Array, i8>(this, searchElement, fromIndex);\n  }\n\n  lastIndexOf(searchElement: i8, fromIndex: i32 = this.length): i32 {\n    return LAST_INDEX_OF<Int8Array, i8>(this, searchElement, fromIndex);\n  }\n\n  fill(value: i32, start: i32 = 0, end: i32 = i32.MAX_VALUE): Int8Array {\n    return FILL<Int8Array, i8>(this, value, start, end);\n  }\n\n  sort(comparator: (a: i8, b: i8) => i32 = COMPARATOR<i8>()): Int8Array {\n    SORT<i8>(this.dataStart, this.length, comparator);\n    return this;\n  }\n\n  slice(begin: i32 = 0, end: i32 = i32.MAX_VALUE): Int8Array {\n    return SLICE<Int8Array, i8>(this, begin, end);\n  }\n\n  subarray(begin: i32 = 0, end: i32 = i32.MAX_VALUE): Int8Array {\n    return SUBARRAY<Int8Array, i8>(this, begin, end);\n  }\n\n  copyWithin(target: i32, start: i32, end: i32 = i32.MAX_VALUE): Int8Array {\n    return COPY_WITHIN<Int8Array, i8>(this, target, start, end);\n  }\n\n  reduce<T>(\n    fn: (accumulator: T, value: i8, index: i32, array: Int8Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE<Int8Array, i8, T>(this, fn, initialValue);\n  }\n\n  reduceRight<T>(\n    fn: (accumulator: T, value: i8, index: i32, array: Int8Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE_RIGHT<Int8Array, i8, T>(this, fn, initialValue);\n  }\n\n  map(fn: (value: i8, index: i32, self: Int8Array) => i8): Int8Array {\n    return MAP<Int8Array, i8>(this, fn);\n  }\n\n  filter(fn: (value: i8, index: i32, self: Int8Array) => bool): Int8Array {\n    return FILTER<Int8Array, i8>(this, fn);\n  }\n\n  findIndex(fn: (value: i8, index: i32, self: Int8Array) => bool): i32 {\n    return FIND_INDEX<Int8Array, i8>(this, fn);\n  }\n\n  findLastIndex(fn: (value: i8, index: i32, self: Int8Array) => bool): i32 {\n    return FIND_LAST_INDEX<Int8Array, i8>(this, fn);\n  }\n\n  some(fn: (value: i8, index: i32, self: Int8Array) => bool): bool {\n    return SOME<Int8Array, i8>(this, fn);\n  }\n\n  every(fn: (value: i8, index: i32, self: Int8Array) => bool): bool {\n    return EVERY<Int8Array, i8>(this, fn);\n  }\n\n  forEach(fn: (value: i8, index: i32, self: Int8Array) => void): void {\n    FOREACH<Int8Array, i8>(this, fn);\n  }\n\n  reverse(): this {\n    REVERSE<u8>(this.dataStart, this.length);\n    return this;\n  }\n\n  join(separator: string = \",\"): string {\n    return joinIntegerArray<i8>(this.dataStart, this.length, separator);\n  }\n\n  toString(): string {\n    return this.join();\n  }\n\n  set<U extends ArrayBufferView>(source: U, offset: i32 = 0): void {\n    SET<Int8Array, i8, U, valueof<U>>(this, source, offset);\n  }\n\n  static wrap(buffer: ArrayBuffer, byteOffset: i32 = 0, length: i32 = -1): Int8Array {\n    return WRAP<Int8Array, i8>(buffer, byteOffset, length);\n  }\n}\n\nexport class Uint8Array extends ArrayBufferView {\n  [key: number]: u8;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly BYTES_PER_ELEMENT: i32 = sizeof<u8>();\n\n  constructor(length: i32) {\n    super(length, alignof<u8>());\n  }\n\n  get length(): i32 {\n    return this.byteLength;\n  }\n\n  @operator(\"[]\")\n  private __get(index: i32): u8 {\n    if (<u32>index >= <u32>this.byteLength) throw new RangeError(E_INDEXOUTOFRANGE);\n    return load<u8>(this.dataStart + <usize>index);\n  }\n\n  @unsafe @operator(\"{}\")\n  private __uget(index: i32): u8 {\n    return load<u8>(this.dataStart + <usize>index);\n  }\n\n  @operator(\"[]=\")\n  private __set(index: i32, value: native<u8>): void {\n    if (<u32>index >= <u32>this.byteLength) throw new RangeError(E_INDEXOUTOFRANGE);\n    store<u8>(this.dataStart + <usize>index, value);\n  }\n\n  @unsafe @operator(\"{}=\")\n  private __uset(index: i32, value: native<u8>): void {\n    store<u8>(this.dataStart + <usize>index, value);\n  }\n\n  at(index: i32): u8 {\n    var len = this.byteLength;\n    index += select(0, len, index >= 0);\n    if (<u32>index >= <u32>len) throw new RangeError(E_INDEXOUTOFRANGE);\n    return load<u8>(this.dataStart + <usize>index);\n  }\n\n  includes(searchElement: u8, fromIndex: i32 = 0): bool {\n    return INCLUDES<Uint8Array, u8>(this, searchElement, fromIndex);\n  }\n\n  indexOf(searchElement: u8, fromIndex: i32 = 0): i32 {\n    return INDEX_OF<Uint8Array, u8>(this, searchElement, fromIndex);\n  }\n\n  lastIndexOf(searchElement: u8, fromIndex: i32 = this.length): i32 {\n    return LAST_INDEX_OF<Uint8Array, u8>(this, searchElement, fromIndex);\n  }\n\n  fill(value: u32, start: i32 = 0, end: i32 = i32.MAX_VALUE): Uint8Array {\n    return FILL<Uint8Array, u8>(this, value, start, end);\n  }\n\n  sort(comparator: (a: u8, b: u8) => i32 = COMPARATOR<u8>()): Uint8Array {\n    SORT<u8>(this.dataStart, this.length, comparator);\n    return this;\n  }\n\n  slice(begin: i32 = 0, end: i32 = i32.MAX_VALUE): Uint8Array {\n    return SLICE<Uint8Array, u8>(this, begin, end);\n  }\n\n  subarray(begin: i32 = 0, end: i32 = i32.MAX_VALUE): Uint8Array {\n    return SUBARRAY<Uint8Array, u8>(this, begin, end);\n  }\n\n  copyWithin(target: i32, start: i32, end: i32 = i32.MAX_VALUE): Uint8Array {\n    return COPY_WITHIN<Uint8Array, u8>(this, target, start, end);\n  }\n\n  reduce<T>(\n    fn: (accumulator: T, value: u8, index: i32, array: Uint8Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE<Uint8Array, u8, T>(this, fn, initialValue);\n  }\n\n  reduceRight<T>(\n    fn: (accumulator: T, value: u8, index: i32, array: Uint8Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE_RIGHT<Uint8Array, u8, T>(this, fn, initialValue);\n  }\n\n  map(fn: (value: u8, index: i32, self: Uint8Array) => u8): Uint8Array {\n    return MAP<Uint8Array, u8>(this, fn);\n  }\n\n  filter(fn: (value: u8, index: i32, self: Uint8Array) => bool): Uint8Array {\n    return FILTER<Uint8Array, u8>(this, fn);\n  }\n\n  findIndex(fn: (value: u8, index: i32, self: Uint8Array) => bool): i32 {\n    return FIND_INDEX<Uint8Array, u8>(this, fn);\n  }\n\n  findLastIndex(fn: (value: u8, index: i32, self: Uint8Array) => bool): i32 {\n    return FIND_LAST_INDEX<Uint8Array, u8>(this, fn);\n  }\n\n  some(fn: (value: u8, index: i32, self: Uint8Array) => bool): bool {\n    return SOME<Uint8Array, u8>(this, fn);\n  }\n\n  every(fn: (value: u8, index: i32, self: Uint8Array) => bool): bool {\n    return EVERY<Uint8Array, u8>(this, fn);\n  }\n\n  forEach(fn: (value: u8, index: i32, self: Uint8Array) => void): void {\n    FOREACH<Uint8Array, u8>(this, fn);\n  }\n\n  reverse(): this {\n    REVERSE<u8>(this.dataStart, this.length);\n    return this;\n  }\n\n  join(separator: string = \",\"): string {\n    return joinIntegerArray<u8>(this.dataStart, this.length, separator);\n  }\n\n  set<U extends ArrayBufferView>(source: U, offset: i32 = 0): void {\n    SET<Uint8Array, u8, U, valueof<U>>(this, source, offset);\n  }\n\n  toString(): string {\n    return this.join();\n  }\n\n  static wrap(buffer: ArrayBuffer, byteOffset: i32 = 0, length: i32 = -1): Uint8Array {\n    return WRAP<Uint8Array, u8>(buffer, byteOffset, length);\n  }\n}\n\nexport class Uint8ClampedArray extends ArrayBufferView {\n  [key: number]: u8;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly BYTES_PER_ELEMENT: i32 = sizeof<u8>();\n\n  constructor(length: i32) {\n    super(length, alignof<u8>());\n  }\n\n  get length(): i32 {\n    return this.byteLength;\n  }\n\n  @operator(\"[]\")\n  private __get(index: i32): u8 {\n    if (<u32>index >= <u32>this.byteLength) throw new RangeError(E_INDEXOUTOFRANGE);\n    return load<u8>(this.dataStart + <usize>index);\n  }\n\n  @unsafe @operator(\"{}\")\n  private __uget(index: i32): u8 {\n    return load<u8>(this.dataStart + <usize>index);\n  }\n\n  @operator(\"[]=\")\n  private __set(index: i32, value: native<u8>): void {\n    if (<u32>index >= <u32>this.byteLength) throw new RangeError(E_INDEXOUTOFRANGE);\n    store<u8>(this.dataStart + <usize>index, ~(<i32>value >> 31) & (((255 - value) >> 31) | value));\n  }\n\n  @unsafe @operator(\"{}=\")\n  private __uset(index: i32, value: native<u8>): void {\n    store<u8>(this.dataStart + <usize>index, ~(<i32>value >> 31) & (((255 - value) >> 31) | value));\n  }\n\n  at(index: i32): u8 {\n    var len = this.byteLength;\n    index += select(0, len, index >= 0);\n    if (<u32>index >= <u32>len) throw new RangeError(E_INDEXOUTOFRANGE);\n    return load<u8>(this.dataStart + <usize>index);\n  }\n\n  includes(searchElement: u8, fromIndex: i32 = 0): bool {\n    return INCLUDES<Uint8ClampedArray, u8>(this, searchElement, fromIndex);\n  }\n\n  indexOf(searchElement: u8, fromIndex: i32 = 0): i32 {\n    return INDEX_OF<Uint8ClampedArray, u8>(this, searchElement, fromIndex);\n  }\n\n  lastIndexOf(searchElement: u8, fromIndex: i32 = this.length): i32 {\n    return LAST_INDEX_OF<Uint8ClampedArray, u8>(this, searchElement, fromIndex);\n  }\n\n  fill(value: u32, start: i32 = 0, end: i32 = i32.MAX_VALUE): Uint8ClampedArray {\n    return FILL<Uint8ClampedArray, u8>(this, value, start, end);\n  }\n\n  sort(comparator: (a: u8, b: u8) => i32 = COMPARATOR<u8>()): Uint8ClampedArray {\n    SORT<u8>(this.dataStart, this.length, comparator);\n    return this;\n  }\n\n  slice(begin: i32 = 0, end: i32 = i32.MAX_VALUE): Uint8ClampedArray {\n    return SLICE<Uint8ClampedArray, u8>(this, begin, end);\n  }\n\n  subarray(start: i32 = 0, end: i32 = i32.MAX_VALUE): Uint8ClampedArray {\n    return SUBARRAY<Uint8ClampedArray, u8>(this, start, end);\n  }\n\n  copyWithin(target: i32, start: i32, end: i32 = i32.MAX_VALUE): Uint8ClampedArray {\n    return COPY_WITHIN<Uint8ClampedArray, u8>(this, target, start, end);\n  }\n\n  reduce<T>(\n    fn: (accumulator: T, value: u8, index: i32, array: Uint8ClampedArray) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE<Uint8ClampedArray, u8, T>(this, fn, initialValue);\n  }\n\n  reduceRight<T>(\n    fn: (accumulator: T, value: u8, index: i32, array: Uint8ClampedArray) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE_RIGHT<Uint8ClampedArray, u8, T>(this, fn, initialValue);\n  }\n\n  map(fn: (value: u8, index: i32, self: Uint8ClampedArray) => u8): Uint8ClampedArray {\n    return MAP<Uint8ClampedArray, u8>(this, fn);\n  }\n\n  filter(fn: (value: u8, index: i32, self: Uint8ClampedArray) => bool): Uint8ClampedArray {\n    return FILTER<Uint8ClampedArray, u8>(this, fn);\n  }\n\n  findIndex(fn: (value: u8, index: i32, self: Uint8ClampedArray) => bool): i32 {\n    return FIND_INDEX<Uint8ClampedArray, u8>(this, fn);\n  }\n\n  findLastIndex(fn: (value: u8, index: i32, self: Uint8ClampedArray) => bool): i32 {\n    return FIND_LAST_INDEX<Uint8ClampedArray, u8>(this, fn);\n  }\n\n  some(fn: (value: u8, index: i32, self: Uint8ClampedArray) => bool): bool {\n    return SOME<Uint8ClampedArray, u8>(this, fn);\n  }\n\n  every(fn: (value: u8, index: i32, self: Uint8ClampedArray) => bool): bool {\n    return EVERY<Uint8ClampedArray, u8>(this, fn);\n  }\n\n  forEach(fn: (value: u8, index: i32, self: Uint8ClampedArray) => void): void {\n    FOREACH<Uint8ClampedArray, u8>(this, fn);\n  }\n\n  reverse(): this {\n    REVERSE<u8>(this.dataStart, this.length);\n    return this;\n  }\n\n  join(separator: string = \",\"): string {\n    return joinIntegerArray<u8>(this.dataStart, this.length, separator);\n  }\n\n  set<U extends ArrayBufferView>(source: U, offset: i32 = 0): void {\n    SET<Uint8ClampedArray, u8, U, valueof<U>>(this, source, offset);\n  }\n\n  toString(): string {\n    return this.join();\n  }\n\n  static wrap(buffer: ArrayBuffer, byteOffset: i32 = 0, length: i32 = -1): Uint8ClampedArray {\n    return WRAP<Uint8ClampedArray, u8>(buffer, byteOffset, length);\n  }\n}\n\nexport class Int16Array extends ArrayBufferView {\n  [key: number]: i16;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly BYTES_PER_ELEMENT: i32 = sizeof<i16>();\n\n  constructor(length: i32) {\n    super(length, alignof<i16>());\n  }\n\n  get length(): i32 {\n    return this.byteLength >>> alignof<i16>();\n  }\n\n  @operator(\"[]\")\n  private __get(index: i32): i16 {\n    if (<u32>index >= <u32>this.byteLength >>> alignof<i16>()) throw new RangeError(E_INDEXOUTOFRANGE);\n    return load<i16>(this.dataStart + (<usize>index << alignof<i16>()));\n  }\n\n  @unsafe @operator(\"{}\")\n  private __uget(index: i32): i16 {\n    return load<i16>(this.dataStart + (<usize>index << alignof<i16>()));\n  }\n\n  @operator(\"[]=\")\n  private __set(index: i32, value: native<i16>): void {\n    if (<u32>index >= <u32>this.byteLength >>> alignof<i16>()) throw new RangeError(E_INDEXOUTOFRANGE);\n    store<i16>(this.dataStart + (<usize>index << alignof<i16>()), value);\n  }\n\n  @unsafe @operator(\"{}=\")\n  private __uset(index: i32, value: native<i16>): void {\n    store<i16>(this.dataStart + (<usize>index << alignof<i16>()), value);\n  }\n\n  at(index: i32): i16 {\n    var len = this.byteLength >>> alignof<i16>();\n    index += select(0, len, index >= 0);\n    if (<u32>index >= <u32>len) throw new RangeError(E_INDEXOUTOFRANGE);\n    return load<i16>(this.dataStart + (<usize>index << alignof<i16>()));\n  }\n\n  includes(searchElement: i16, fromIndex: i32 = 0): bool {\n    return INCLUDES<Int16Array, i16>(this, searchElement, fromIndex);\n  }\n\n  indexOf(searchElement: i16, fromIndex: i32 = 0): i32 {\n    return INDEX_OF<Int16Array, i16>(this, searchElement, fromIndex);\n  }\n\n  lastIndexOf(searchElement: i16, fromIndex: i32 = this.length): i32 {\n    return LAST_INDEX_OF<Int16Array, i16>(this, searchElement, fromIndex);\n  }\n\n  fill(value: i32, start: i32 = 0, end: i32 = i32.MAX_VALUE): Int16Array {\n    return FILL<Int16Array, i16>(this, value, start, end);\n  }\n\n  sort(comparator: (a: i16, b: i16) => i32 = COMPARATOR<i16>()): Int16Array {\n    SORT<i16>(this.dataStart, this.length, comparator);\n    return this;\n  }\n\n  slice(begin: i32 = 0, end: i32 = i32.MAX_VALUE): Int16Array {\n    return SLICE<Int16Array, i16>(this, begin, end);\n  }\n\n  subarray(begin: i32 = 0, end: i32 = i32.MAX_VALUE): Int16Array {\n    return SUBARRAY<Int16Array, i16>(this, begin, end);\n  }\n\n  copyWithin(target: i32, start: i32, end: i32 = i32.MAX_VALUE): Int16Array {\n    return COPY_WITHIN<Int16Array, i16>(this, target, start, end);\n  }\n\n  reduce<T>(\n    fn: (accumulator: T, value: i16, index: i32, array: Int16Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE<Int16Array, i16, T>(this, fn, initialValue);\n  }\n\n  reduceRight<T>(\n    fn: (accumulator: T, value: i16, index: i32, array: Int16Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE_RIGHT<Int16Array, i16, T>(this, fn, initialValue);\n  }\n\n  map(fn: (value: i16, index: i32, self: Int16Array) => i16): Int16Array {\n    return MAP<Int16Array, i16>(this, fn);\n  }\n\n  filter(fn: (value: i16, index: i32, self: Int16Array) => bool): Int16Array {\n    return FILTER<Int16Array, i16>(this, fn);\n  }\n\n  findIndex(fn: (value: i16, index: i32, self: Int16Array) => bool): i32 {\n    return FIND_INDEX<Int16Array, i16>(this, fn);\n  }\n\n  findLastIndex(fn: (value: i16, index: i32, self: Int16Array) => bool): i32 {\n    return FIND_LAST_INDEX<Int16Array, i16>(this, fn);\n  }\n\n  some(fn: (value: i16, index: i32, self: Int16Array) => bool): bool {\n    return SOME<Int16Array, i16>(this, fn);\n  }\n\n  every(fn: (value: i16, index: i32, self: Int16Array) => bool): bool {\n    return EVERY<Int16Array, i16>(this, fn);\n  }\n\n  forEach(fn: (value: i16, index: i32, self: Int16Array) => void): void {\n    FOREACH<Int16Array, i16>(this, fn);\n  }\n\n  reverse(): this {\n    REVERSE<u16>(this.dataStart, this.length);\n    return this;\n  }\n\n  join(separator: string = \",\"): string {\n    return joinIntegerArray<i16>(this.dataStart, this.length, separator);\n  }\n\n  set<U extends ArrayBufferView>(source: U, offset: i32 = 0): void {\n    SET<Int16Array, i16, U, valueof<U>>(this, source, offset);\n  }\n\n  toString(): string {\n    return this.join();\n  }\n\n  static wrap(buffer: ArrayBuffer, byteOffset: i32 = 0, length: i32 = -1): Int16Array {\n    return WRAP<Int16Array, i16>(buffer, byteOffset, length);\n  }\n}\n\nexport class Uint16Array extends ArrayBufferView {\n  [key: number]: u16;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly BYTES_PER_ELEMENT: i32 = sizeof<u16>();\n\n  constructor(length: i32) {\n    super(length, alignof<u16>());\n  }\n\n  get length(): i32 {\n    return this.byteLength >>> alignof<u16>();\n  }\n\n  @operator(\"[]\")\n  private __get(index: i32): u16 {\n    if (<u32>index >= <u32>this.byteLength >>> alignof<u16>()) throw new RangeError(E_INDEXOUTOFRANGE);\n    return load<u16>(this.dataStart + (<usize>index << alignof<u16>()));\n  }\n\n  @unsafe @operator(\"{}\")\n  private __uget(index: i32): u16 {\n    return load<u16>(this.dataStart + (<usize>index << alignof<u16>()));\n  }\n\n  @operator(\"[]=\")\n  private __set(index: i32, value: native<u16>): void {\n    if (<u32>index >= <u32>this.byteLength >>> alignof<u16>()) throw new RangeError(E_INDEXOUTOFRANGE);\n    store<u16>(this.dataStart + (<usize>index << alignof<u16>()), value);\n  }\n\n  @unsafe @operator(\"{}=\")\n  private __uset(index: i32, value: native<u16>): void {\n    store<u16>(this.dataStart + (<usize>index << alignof<u16>()), value);\n  }\n\n  at(index: i32): u16 {\n    var len = this.byteLength >>> alignof<u16>();\n    index += select(0, len, index >= 0);\n    if (<u32>index >= <u32>len) throw new RangeError(E_INDEXOUTOFRANGE);\n    return load<u16>(this.dataStart + (<usize>index << alignof<u16>()));\n  }\n\n  includes(searchElement: u16, fromIndex: i32 = 0): bool {\n    return INCLUDES<Uint16Array, u16>(this, searchElement, fromIndex);\n  }\n\n  indexOf(searchElement: u16, fromIndex: i32 = 0): i32 {\n    return INDEX_OF<Uint16Array, u16>(this, searchElement, fromIndex);\n  }\n\n  lastIndexOf(searchElement: u16, fromIndex: i32 = this.length): i32 {\n    return LAST_INDEX_OF<Uint16Array, u16>(this, searchElement, fromIndex);\n  }\n\n  fill(value: u32, start: i32 = 0, end: i32 = i32.MAX_VALUE): Uint16Array {\n    return FILL<Uint16Array, u16>(this, value, start, end);\n  }\n\n  sort(comparator: (a: u16, b: u16) => i32 = COMPARATOR<u16>()): Uint16Array {\n    SORT<u16>(this.dataStart, this.length, comparator);\n    return this;\n  }\n\n  slice(begin: i32 = 0, end: i32 = i32.MAX_VALUE): Uint16Array {\n    return SLICE<Uint16Array, u16>(this, begin, end);\n  }\n\n  subarray(begin: i32 = 0, end: i32 = i32.MAX_VALUE): Uint16Array {\n    return SUBARRAY<Uint16Array, u16>(this, begin, end);\n  }\n\n  copyWithin(target: i32, start: i32, end: i32 = i32.MAX_VALUE): Uint16Array {\n    return COPY_WITHIN<Uint16Array, u16>(this, target, start, end);\n  }\n\n  reduce<T>(\n    fn: (accumulator: T, value: u16, index: i32, array: Uint16Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE<Uint16Array, u16, T>(this, fn, initialValue);\n  }\n\n  reduceRight<T>(\n    fn: (accumulator: T, value: u16, index: i32, array: Uint16Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE_RIGHT<Uint16Array, u16, T>(this, fn, initialValue);\n  }\n\n  map(fn: (value: u16, index: i32, self: Uint16Array) => u16): Uint16Array {\n    return MAP<Uint16Array, u16>(this, fn);\n  }\n\n  filter(fn: (value: u16, index: i32, self: Uint16Array) => bool): Uint16Array {\n    return FILTER<Uint16Array, u16>(this, fn);\n  }\n\n  findIndex(fn: (value: u16, index: i32, self: Uint16Array) => bool): i32 {\n    return FIND_INDEX<Uint16Array, u16>(this, fn);\n  }\n\n  findLastIndex(fn: (value: u16, index: i32, self: Uint16Array) => bool): i32 {\n    return FIND_LAST_INDEX<Uint16Array, u16>(this, fn);\n  }\n\n  some(fn: (value: u16, index: i32, self: Uint16Array) => bool): bool {\n    return SOME<Uint16Array, u16>(this, fn);\n  }\n\n  every(fn: (value: u16, index: i32, self: Uint16Array) => bool): bool {\n    return EVERY<Uint16Array, u16>(this, fn);\n  }\n\n  forEach(fn: (value: u16, index: i32, self: Uint16Array) => void): void {\n    FOREACH<Uint16Array, u16>(this, fn);\n  }\n\n  reverse(): this {\n    REVERSE<u16>(this.dataStart, this.length);\n    return this;\n  }\n\n  join(separator: string = \",\"): string {\n    return joinIntegerArray<u16>(this.dataStart, this.length, separator);\n  }\n\n  set<U extends ArrayBufferView>(source: U, offset: i32 = 0): void {\n    SET<Uint16Array, u16, U, valueof<U>>(this, source, offset);\n  }\n\n  toString(): string {\n    return this.join();\n  }\n\n  static wrap(buffer: ArrayBuffer, byteOffset: i32 = 0, length: i32 = -1): Uint16Array {\n    return WRAP<Uint16Array, u16>(buffer, byteOffset, length);\n  }\n}\n\nexport class Int32Array extends ArrayBufferView {\n  [key: number]: i32;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly BYTES_PER_ELEMENT: i32 = sizeof<i32>();\n\n  constructor(length: i32) {\n    super(length, alignof<i32>());\n  }\n\n  get length(): i32 {\n    return this.byteLength >>> alignof<i32>();\n  }\n\n  @operator(\"[]\")\n  private __get(index: i32): i32 {\n    if (<u32>index >= <u32>this.byteLength >>> alignof<i32>()) throw new RangeError(E_INDEXOUTOFRANGE);\n    return load<i32>(this.dataStart + (<usize>index << alignof<i32>()));\n  }\n\n  @unsafe @operator(\"{}\")\n  private __uget(index: i32): i32 {\n    return load<i32>(this.dataStart + (<usize>index << alignof<i32>()));\n  }\n\n  @operator(\"[]=\")\n  private __set(index: i32, value: i32): void {\n    if (<u32>index >= <u32>this.byteLength >>> alignof<i32>()) throw new RangeError(E_INDEXOUTOFRANGE);\n    store<i32>(this.dataStart + (<usize>index << alignof<i32>()), value);\n  }\n\n  @unsafe @operator(\"{}=\")\n  private __uset(index: i32, value: i32): void {\n    store<i32>(this.dataStart + (<usize>index << alignof<i32>()), value);\n  }\n\n  at(index: i32): i32 {\n    var len = this.byteLength >>> alignof<i32>();\n    index += select(0, len, index >= 0);\n    if (<u32>index >= <u32>len) throw new RangeError(E_INDEXOUTOFRANGE);\n    return load<i32>(this.dataStart + (<usize>index << alignof<i32>()));\n  }\n\n  includes(searchElement: i32, fromIndex: i32 = 0): bool {\n    return INCLUDES<Int32Array, i32>(this, searchElement, fromIndex);\n  }\n\n  indexOf(searchElement: i32, fromIndex: i32 = 0): i32 {\n    return INDEX_OF<Int32Array, i32>(this, searchElement, fromIndex);\n  }\n\n  lastIndexOf(searchElement: i32, fromIndex: i32 = this.length): i32 {\n    return LAST_INDEX_OF<Int32Array, i32>(this, searchElement, fromIndex);\n  }\n\n  fill(value: i32, start: i32 = 0, end: i32 = i32.MAX_VALUE): Int32Array {\n    return FILL<Int32Array, i32>(this, value, start, end);\n  }\n\n  sort(comparator: (a: i32, b: i32) => i32 = COMPARATOR<i32>()): Int32Array {\n    SORT<i32>(this.dataStart, this.length, comparator);\n    return this;\n  }\n\n  slice(begin: i32 = 0, end: i32 = i32.MAX_VALUE): Int32Array {\n    return SLICE<Int32Array, i32>(this, begin, end);\n  }\n\n  subarray(begin: i32 = 0, end: i32 = i32.MAX_VALUE): Int32Array {\n    return SUBARRAY<Int32Array, i32>(this, begin, end);\n  }\n\n  copyWithin(target: i32, start: i32, end: i32 = i32.MAX_VALUE): Int32Array {\n    return COPY_WITHIN<Int32Array, i32>(this, target, start, end);\n  }\n\n  reduce<T>(\n    fn: (accumulator: T, value: i32, index: i32, array: Int32Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE<Int32Array, i32, T>(this, fn, initialValue);\n  }\n\n  reduceRight<T>(\n    fn: (accumulator: T, value: i32, index: i32, array: Int32Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE_RIGHT<Int32Array, i32, T>(this, fn, initialValue);\n  }\n\n  map(fn: (value: i32, index: i32, self: Int32Array) => i32): Int32Array {\n    return MAP<Int32Array, i32>(this, fn);\n  }\n\n  filter(fn: (value: i32, index: i32, self: Int32Array) => bool): Int32Array {\n    return FILTER<Int32Array, i32>(this, fn);\n  }\n\n  findIndex(fn: (value: i32, index: i32, self: Int32Array) => bool): i32 {\n    return FIND_INDEX<Int32Array, i32>(this, fn);\n  }\n\n  findLastIndex(fn: (value: i32, index: i32, self: Int32Array) => bool): i32 {\n    return FIND_LAST_INDEX<Int32Array, i32>(this, fn);\n  }\n\n  some(fn: (value: i32, index: i32, self: Int32Array) => bool): bool {\n    return SOME<Int32Array, i32>(this, fn);\n  }\n\n  every(fn: (value: i32, index: i32, self: Int32Array) => bool): bool {\n    return EVERY<Int32Array, i32>(this, fn);\n  }\n\n  forEach(fn: (value: i32, index: i32, self: Int32Array) => void): void {\n    FOREACH<Int32Array, i32>(this, fn);\n  }\n\n  reverse(): this {\n    REVERSE<u32>(this.dataStart, this.length);\n    return this;\n  }\n\n  join(separator: string = \",\"): string {\n    return joinIntegerArray<i32>(this.dataStart, this.length, separator);\n  }\n\n  set<U extends ArrayBufferView>(source: U, offset: i32 = 0): void {\n    SET<Int32Array, i32, U, valueof<U>>(this, source, offset);\n  }\n\n  toString(): string {\n    return this.join();\n  }\n\n  static wrap(buffer: ArrayBuffer, byteOffset: i32 = 0, length: i32 = -1): Int32Array {\n    return WRAP<Int32Array, i32>(buffer, byteOffset, length);\n  }\n}\n\nexport class Uint32Array extends ArrayBufferView {\n  [key: number]: u32;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly BYTES_PER_ELEMENT: i32 = sizeof<u32>();\n\n  constructor(length: i32) {\n    super(length, alignof<u32>());\n  }\n\n  get length(): i32 {\n    return this.byteLength >>> alignof<u32>();\n  }\n\n  @operator(\"[]\")\n  private __get(index: i32): u32 {\n    if (<u32>index >= <u32>this.byteLength >>> alignof<u32>()) throw new RangeError(E_INDEXOUTOFRANGE);\n    return load<u32>(this.dataStart + (<usize>index << alignof<u32>()));\n  }\n\n  @unsafe @operator(\"{}\")\n  private __uget(index: i32): u32 {\n    return load<u32>(this.dataStart + (<usize>index << alignof<u32>()));\n  }\n\n  @operator(\"[]=\")\n  private __set(index: i32, value: u32): void {\n    if (<u32>index >= <u32>this.byteLength >>> alignof<u32>()) throw new RangeError(E_INDEXOUTOFRANGE);\n    store<u32>(this.dataStart + (<usize>index << alignof<u32>()), value);\n  }\n\n  @unsafe @operator(\"{}=\")\n  private __uset(index: i32, value: u32): void {\n    store<u32>(this.dataStart + (<usize>index << alignof<u32>()), value);\n  }\n\n  at(index: i32): u32 {\n    var len = this.byteLength >>> alignof<u32>();\n    index += select(0, len, index >= 0);\n    if (<u32>index >= <u32>len) throw new RangeError(E_INDEXOUTOFRANGE);\n    return load<u32>(this.dataStart + (<usize>index << alignof<u32>()));\n  }\n\n  includes(searchElement: u32, fromIndex: i32 = 0): bool {\n    return INCLUDES<Uint32Array, u32>(this, searchElement, fromIndex);\n  }\n\n  indexOf(searchElement: u32, fromIndex: i32 = 0): i32 {\n    return INDEX_OF<Uint32Array, u32>(this, searchElement, fromIndex);\n  }\n\n  lastIndexOf(searchElement: u32, fromIndex: i32 = this.length): i32 {\n    return LAST_INDEX_OF<Uint32Array, u32>(this, searchElement, fromIndex);\n  }\n\n  fill(value: u32, start: i32 = 0, end: i32 = i32.MAX_VALUE): Uint32Array {\n    return FILL<Uint32Array, u32>(this, value, start, end);\n  }\n\n  sort(comparator: (a: u32, b: u32) => i32 = COMPARATOR<u32>()): Uint32Array {\n    SORT<u32>(this.dataStart, this.length, comparator);\n    return this;\n  }\n\n  slice(begin: i32 = 0, end: i32 = i32.MAX_VALUE): Uint32Array {\n    return SLICE<Uint32Array, u32>(this, begin, end);\n  }\n\n  subarray(begin: i32 = 0, end: i32 = i32.MAX_VALUE): Uint32Array {\n    return SUBARRAY<Uint32Array, u32>(this, begin, end);\n  }\n\n  copyWithin(target: i32, start: i32, end: i32 = i32.MAX_VALUE): Uint32Array {\n    return COPY_WITHIN<Uint32Array, u32>(this, target, start, end);\n  }\n\n  reduce<T>(\n    fn: (accumulator: T, value: u32, index: i32, array: Uint32Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE<Uint32Array, u32, T>(this, fn, initialValue);\n  }\n\n  reduceRight<T>(\n    fn: (accumulator: T, value: u32, index: i32, array: Uint32Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE_RIGHT<Uint32Array, u32, T>(this, fn, initialValue);\n  }\n\n  map(fn: (value: u32, index: i32, self: Uint32Array) => u32): Uint32Array {\n    return MAP<Uint32Array, u32>(this, fn);\n  }\n\n  filter(fn: (value: u32, index: i32, self: Uint32Array) => bool): Uint32Array {\n    return FILTER<Uint32Array, u32>(this, fn);\n  }\n\n  findIndex(fn: (value: u32, index: i32, self: Uint32Array) => bool): i32 {\n    return FIND_INDEX<Uint32Array, u32>(this, fn);\n  }\n\n  findLastIndex(fn: (value: u32, index: i32, self: Uint32Array) => bool): i32 {\n    return FIND_LAST_INDEX<Uint32Array, u32>(this, fn);\n  }\n\n  some(fn: (value: u32, index: i32, self: Uint32Array) => bool): bool {\n    return SOME<Uint32Array, u32>(this, fn);\n  }\n\n  every(fn: (value: u32, index: i32, self: Uint32Array) => bool): bool {\n    return EVERY<Uint32Array, u32>(this, fn);\n  }\n\n  forEach(fn: (value: u32, index: i32, self: Uint32Array) => void): void {\n    FOREACH<Uint32Array, u32>(this, fn);\n  }\n\n  reverse(): this {\n    REVERSE<u32>(this.dataStart, this.length);\n    return this;\n  }\n\n  join(separator: string = \",\"): string {\n    return joinIntegerArray<u32>(this.dataStart, this.length, separator);\n  }\n\n  set<U extends ArrayBufferView>(source: U, offset: i32 = 0): void {\n    SET<Uint32Array, u32, U, valueof<U>>(this, source, offset);\n  }\n\n  toString(): string {\n    return this.join();\n  }\n\n  static wrap(buffer: ArrayBuffer, byteOffset: i32 = 0, length: i32 = -1): Uint32Array {\n    return WRAP<Uint32Array, u32>(buffer, byteOffset, length);\n  }\n}\n\nexport class Int64Array extends ArrayBufferView {\n  [key: number]: i64;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly BYTES_PER_ELEMENT: i32 = sizeof<i64>();\n\n  constructor(length: i32) {\n    super(length, alignof<i64>());\n  }\n\n  get length(): i32 {\n    return this.byteLength >>> alignof<i64>();\n  }\n\n  @operator(\"[]\")\n  private __get(index: i32): i64 {\n    if (<u32>index >= <u32>this.byteLength >>> alignof<i64>()) throw new RangeError(E_INDEXOUTOFRANGE);\n    return load<i64>(this.dataStart + (<usize>index << alignof<i64>()));\n  }\n\n  @unsafe @operator(\"{}\")\n  private __uget(index: i32): i64 {\n    return load<i64>(this.dataStart + (<usize>index << alignof<i64>()));\n  }\n\n  @operator(\"[]=\")\n  private __set(index: i32, value: i64): void {\n    if (<u32>index >= <u32>this.byteLength >>> alignof<i64>()) throw new RangeError(E_INDEXOUTOFRANGE);\n    store<i64>(this.dataStart + (<usize>index << alignof<i64>()), value);\n  }\n\n  @unsafe @operator(\"{}=\")\n  private __uset(index: i32, value: i64): void {\n    store<i64>(this.dataStart + (<usize>index << alignof<i64>()), value);\n  }\n\n  at(index: i32): i64 {\n    var len = this.byteLength >>> alignof<i64>();\n    index += select(0, len, index >= 0);\n    if (<u32>index >= <u32>len) throw new RangeError(E_INDEXOUTOFRANGE);\n    return load<i64>(this.dataStart + (<usize>index << alignof<i64>()));\n  }\n\n  includes(searchElement: i64, fromIndex: i32 = 0): bool {\n    return INCLUDES<Int64Array, i64>(this, searchElement, fromIndex);\n  }\n\n  indexOf(searchElement: i64, fromIndex: i32 = 0): i32 {\n    return INDEX_OF<Int64Array, i64>(this, searchElement, fromIndex);\n  }\n\n  lastIndexOf(searchElement: i64, fromIndex: i32 = this.length): i32 {\n    return LAST_INDEX_OF<Int64Array, i64>(this, searchElement, fromIndex);\n  }\n\n  fill(value: i64, start: i32 = 0, end: i32 = i32.MAX_VALUE): Int64Array {\n    return FILL<Int64Array, i64>(this, value, start, end);\n  }\n\n  sort(comparator: (a: i64, b: i64) => i32 = COMPARATOR<i64>()): Int64Array {\n    SORT<i64>(this.dataStart, this.length, comparator);\n    return this;\n  }\n\n  slice(begin: i32 = 0, end: i32 = i32.MAX_VALUE): Int64Array {\n    return SLICE<Int64Array, i64>(this, begin, end);\n  }\n\n  subarray(begin: i32 = 0, end: i32 = i32.MAX_VALUE): Int64Array {\n    return SUBARRAY<Int64Array, i64>(this, begin, end);\n  }\n\n  copyWithin(target: i32, start: i32, end: i32 = i32.MAX_VALUE): Int64Array {\n    return COPY_WITHIN<Int64Array, i64>(this, target, start, end);\n  }\n\n  reduce<T>(\n    fn: (accumulator: T, value: i64, index: i32, array: Int64Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE<Int64Array, i64, T>(this, fn, initialValue);\n  }\n\n  reduceRight<T>(\n    fn: (accumulator: T, value: i64, index: i32, array: Int64Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE_RIGHT<Int64Array, i64, T>(this, fn, initialValue);\n  }\n\n  map(fn: (value: i64, index: i32, self: Int64Array) => i64): Int64Array {\n    return MAP<Int64Array, i64>(this, fn);\n  }\n\n  filter(fn: (value: i64, index: i32, self: Int64Array) => bool): Int64Array {\n    return FILTER<Int64Array, i64>(this, fn);\n  }\n\n  findIndex(fn: (value: i64, index: i32, self: Int64Array) => bool): i32 {\n    return FIND_INDEX<Int64Array, i64>(this, fn);\n  }\n\n  findLastIndex(fn: (value: i64, index: i32, self: Int64Array) => bool): i32 {\n    return FIND_LAST_INDEX<Int64Array, i64>(this, fn);\n  }\n\n  some(fn: (value: i64, index: i32, self: Int64Array) => bool): bool {\n    return SOME<Int64Array, i64>(this, fn);\n  }\n\n  every(fn: (value: i64, index: i32, self: Int64Array) => bool): bool {\n    return EVERY<Int64Array, i64>(this, fn);\n  }\n\n  forEach(fn: (value: i64, index: i32, self: Int64Array) => void): void {\n    FOREACH<Int64Array, i64>(this, fn);\n  }\n\n  reverse(): this {\n    REVERSE<u64>(this.dataStart, this.length);\n    return this;\n  }\n\n  join(separator: string = \",\"): string {\n    return joinIntegerArray<i64>(this.dataStart, this.length, separator);\n  }\n\n  set<U extends ArrayBufferView>(source: U, offset: i32 = 0): void {\n    SET<Int64Array, i64, U, valueof<U>>(this, source, offset);\n  }\n\n  toString(): string {\n    return this.join();\n  }\n\n  static wrap(buffer: ArrayBuffer, byteOffset: i32 = 0, length: i32 = -1): Int64Array {\n    return WRAP<Int64Array, i64>(buffer, byteOffset, length);\n  }\n}\n\nexport class Uint64Array extends ArrayBufferView {\n  [key: number]: u64;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly BYTES_PER_ELEMENT: i32 = sizeof<u64>();\n\n  constructor(length: i32) {\n    super(length, alignof<u64>());\n  }\n\n  get length(): i32 {\n    return this.byteLength >>> alignof<u64>();\n  }\n\n  @operator(\"[]\")\n  private __get(index: i32): u64 {\n    if (<u32>index >= <u32>this.byteLength >>> alignof<u64>()) throw new RangeError(E_INDEXOUTOFRANGE);\n    return load<u64>(this.dataStart + (<usize>index << alignof<u64>()));\n  }\n\n  @unsafe @operator(\"{}\")\n  private __uget(index: i32): u64 {\n    return load<u64>(this.dataStart + (<usize>index << alignof<u64>()));\n  }\n\n  @operator(\"[]=\")\n  private __set(index: i32, value: u64): void {\n    if (<u32>index >= <u32>this.byteLength >>> alignof<u64>()) throw new RangeError(E_INDEXOUTOFRANGE);\n    store<u64>(this.dataStart + (<usize>index << alignof<u64>()), value);\n  }\n\n  @unsafe @operator(\"{}=\")\n  private __uset(index: i32, value: u64): void {\n    store<u64>(this.dataStart + (<usize>index << alignof<u64>()), value);\n  }\n\n  at(index: i32): u64 {\n    var len = this.byteLength >>> alignof<u64>();\n    index += select(0, len, index >= 0);\n    if (<u32>index >= <u32>len) throw new RangeError(E_INDEXOUTOFRANGE);\n    return load<u64>(this.dataStart + (<usize>index << alignof<u64>()));\n  }\n\n  includes(searchElement: u64, fromIndex: i32 = 0): bool {\n    return INCLUDES<Uint64Array, u64>(this, searchElement, fromIndex);\n  }\n\n  indexOf(searchElement: u64, fromIndex: i32 = 0): i32 {\n    return INDEX_OF<Uint64Array, u64>(this, searchElement, fromIndex);\n  }\n\n  lastIndexOf(searchElement: u64, fromIndex: i32 = this.length): i32 {\n    return LAST_INDEX_OF<Uint64Array, u64>(this, searchElement, fromIndex);\n  }\n\n  fill(value: u64, start: i32 = 0, end: i32 = i32.MAX_VALUE): Uint64Array {\n    return FILL<Uint64Array, u64>(this, value, start, end);\n  }\n\n  sort(comparator: (a: u64, b: u64) => i32 = COMPARATOR<u64>()): Uint64Array {\n    SORT<u64>(this.dataStart, this.length, comparator);\n    return this;\n  }\n\n  slice(begin: i32 = 0, end: i32 = i32.MAX_VALUE): Uint64Array {\n    return SLICE<Uint64Array, u64>(this, begin, end);\n  }\n\n  subarray(begin: i32 = 0, end: i32 = i32.MAX_VALUE): Uint64Array {\n    return SUBARRAY<Uint64Array, u64>(this, begin, end);\n  }\n\n  copyWithin(target: i32, start: i32, end: i32 = i32.MAX_VALUE): Uint64Array {\n    return COPY_WITHIN<Uint64Array, u64>(this, target, start, end);\n  }\n\n  reduce<T>(\n    fn: (accumulator: T, value: u64, index: i32, array: Uint64Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE<Uint64Array, u64, T>(this, fn, initialValue);\n  }\n\n  reduceRight<T>(\n    fn: (accumulator: T, value: u64, index: i32, array: Uint64Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE_RIGHT<Uint64Array, u64, T>(this, fn, initialValue);\n  }\n\n  map(fn: (value: u64, index: i32, self: Uint64Array) => u64): Uint64Array {\n    return MAP<Uint64Array, u64>(this, fn);\n  }\n\n  filter(fn: (value: u64, index: i32, self: Uint64Array) => bool): Uint64Array {\n    return FILTER<Uint64Array, u64>(this, fn);\n  }\n\n  findIndex(fn: (value: u64, index: i32, self: Uint64Array) => bool): i32 {\n    return FIND_INDEX<Uint64Array, u64>(this, fn);\n  }\n\n  findLastIndex(fn: (value: u64, index: i32, self: Uint64Array) => bool): i32 {\n    return FIND_LAST_INDEX<Uint64Array, u64>(this, fn);\n  }\n\n  some(fn: (value: u64, index: i32, self: Uint64Array) => bool): bool {\n    return SOME<Uint64Array, u64>(this, fn);\n  }\n\n  every(fn: (value: u64, index: i32, self: Uint64Array) => bool): bool {\n    return EVERY<Uint64Array, u64>(this, fn);\n  }\n\n  forEach(fn: (value: u64, index: i32, self: Uint64Array) => void): void {\n    FOREACH<Uint64Array, u64>(this, fn);\n  }\n\n  reverse(): this {\n    REVERSE<u64>(this.dataStart, this.length);\n    return this;\n  }\n\n  join(separator: string = \",\"): string {\n    return joinIntegerArray<u64>(this.dataStart, this.length, separator);\n  }\n\n  set<U extends ArrayBufferView>(source: U, offset: i32 = 0): void {\n    SET<Uint64Array, u64, U, valueof<U>>(this, source, offset);\n  }\n\n  toString(): string {\n    return this.join();\n  }\n\n  static wrap(buffer: ArrayBuffer, byteOffset: i32 = 0, length: i32 = -1): Uint64Array {\n    return WRAP<Uint64Array, u64>(buffer, byteOffset, length);\n  }\n}\n\nexport class Float32Array extends ArrayBufferView {\n  [key: number]: f32;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly BYTES_PER_ELEMENT: i32 = sizeof<f32>();\n\n  constructor(length: i32) {\n    super(length, alignof<f32>());\n  }\n\n  get length(): i32 {\n    return this.byteLength >>> alignof<f32>();\n  }\n\n  @operator(\"[]\")\n  private __get(index: i32): f32 {\n    if (<u32>index >= <u32>this.byteLength >>> alignof<f32>()) throw new RangeError(E_INDEXOUTOFRANGE);\n    return load<f32>(this.dataStart + (<usize>index << alignof<f32>()));\n  }\n\n  @unsafe @operator(\"{}\")\n  private __uget(index: i32): f32 {\n    return load<f32>(this.dataStart + (<usize>index << alignof<f32>()));\n  }\n\n  @operator(\"[]=\")\n  private __set(index: i32, value: f32): void {\n    if (<u32>index >= <u32>this.byteLength >>> alignof<f32>()) throw new RangeError(E_INDEXOUTOFRANGE);\n    store<f32>(this.dataStart + (<usize>index << alignof<f32>()), value);\n  }\n\n  @unsafe @operator(\"{}=\")\n  private __uset(index: i32, value: f32): void {\n    store<f32>(this.dataStart + (<usize>index << alignof<f32>()), value);\n  }\n\n  at(index: i32): f32 {\n    var len = this.byteLength >>> alignof<f32>();\n    index += select(0, len, index >= 0);\n    if (<u32>index >= <u32>len) throw new RangeError(E_INDEXOUTOFRANGE);\n    return load<f32>(this.dataStart + (<usize>index << alignof<f32>()));\n  }\n\n  includes(searchElement: f32, fromIndex: i32 = 0): bool {\n    return INCLUDES<Float32Array, f32>(this, searchElement, fromIndex);\n  }\n\n  indexOf(searchElement: f32, fromIndex: i32 = 0): i32 {\n    return INDEX_OF<Float32Array, f32>(this, searchElement, fromIndex);\n  }\n\n  lastIndexOf(searchElement: f32, fromIndex: i32 = this.length): i32 {\n    return LAST_INDEX_OF<Float32Array, f32>(this, searchElement, fromIndex);\n  }\n\n  fill(value: f32, start: i32 = 0, end: i32 = i32.MAX_VALUE): Float32Array {\n    return FILL<Float32Array, f32>(this, value, start, end);\n  }\n\n  sort(comparator: (a: f32, b: f32) => i32 = COMPARATOR<f32>()): Float32Array {\n    SORT<f32>(this.dataStart, this.length, comparator);\n    return this;\n  }\n\n  slice(begin: i32 = 0, end: i32 = i32.MAX_VALUE): Float32Array {\n    return SLICE<Float32Array, f32>(this, begin, end);\n  }\n\n  subarray(begin: i32 = 0, end: i32 = i32.MAX_VALUE): Float32Array {\n    return SUBARRAY<Float32Array, f32>(this, begin, end);\n  }\n\n  copyWithin(target: i32, start: i32, end: i32 = i32.MAX_VALUE): Float32Array {\n    return COPY_WITHIN<Float32Array, f32>(this, target, start, end);\n  }\n\n  reduce<T>(\n    fn: (accumulator: T, value: f32, index: i32, array: Float32Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE<Float32Array, f32, T>(this, fn, initialValue);\n  }\n\n  reduceRight<T>(\n    fn: (accumulator: T, value: f32, index: i32, array: Float32Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE_RIGHT<Float32Array, f32, T>(this, fn, initialValue);\n  }\n\n  map(fn: (value: f32, index: i32, self: Float32Array) => f32): Float32Array {\n    return MAP<Float32Array, f32>(this, fn);\n  }\n\n  filter(fn: (value: f32, index: i32, self: Float32Array) => bool): Float32Array {\n    return FILTER<Float32Array, f32>(this, fn);\n  }\n\n  findIndex(fn: (value: f32, index: i32, self: Float32Array) => bool): i32 {\n    return FIND_INDEX<Float32Array, f32>(this, fn);\n  }\n\n  findLastIndex(fn: (value: f32, index: i32, self: Float32Array) => bool): i32 {\n    return FIND_LAST_INDEX<Float32Array, f32>(this, fn);\n  }\n\n  some(fn: (value: f32, index: i32, self: Float32Array) => bool): bool {\n    return SOME<Float32Array, f32>(this, fn);\n  }\n\n  every(fn: (value: f32, index: i32, self: Float32Array) => bool): bool {\n    return EVERY<Float32Array, f32>(this, fn);\n  }\n\n  forEach(fn: (value: f32, index: i32, self: Float32Array) => void): void {\n    FOREACH<Float32Array, f32>(this, fn);\n  }\n\n  reverse(): this {\n    REVERSE<f32>(this.dataStart, this.length);\n    return this;\n  }\n\n  join(separator: string = \",\"): string {\n    return joinFloatArray<f32>(this.dataStart, this.length, separator);\n  }\n\n  set<U extends ArrayBufferView>(source: U, offset: i32 = 0): void {\n    SET<Float32Array, f32, U, valueof<U>>(this, source, offset);\n  }\n\n  toString(): string {\n    return this.join();\n  }\n\n  static wrap(buffer: ArrayBuffer, byteOffset: i32 = 0, length: i32 = -1): Float32Array {\n    return WRAP<Float32Array, f32>(buffer, byteOffset, length);\n  }\n}\n\nexport class Float64Array extends ArrayBufferView {\n  [key: number]: f64;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly BYTES_PER_ELEMENT: i32 = sizeof<f64>();\n\n  constructor(length: i32) {\n    super(length, alignof<f64>());\n  }\n\n  get length(): i32 {\n    return this.byteLength >>> alignof<f64>();\n  }\n\n  @operator(\"[]\")\n  private __get(index: i32): f64 {\n    if (<u32>index >= <u32>this.byteLength >>> alignof<f64>()) throw new RangeError(E_INDEXOUTOFRANGE);\n    return load<f64>(this.dataStart + (<usize>index << alignof<f64>()));\n  }\n\n  @unsafe @operator(\"{}\")\n  private __uget(index: i32): f64 {\n    return load<f64>(this.dataStart + (<usize>index << alignof<f64>()));\n  }\n\n  @operator(\"[]=\")\n  private __set(index: i32, value: f64): void {\n    if (<u32>index >= <u32>this.byteLength >>> alignof<f64>()) throw new RangeError(E_INDEXOUTOFRANGE);\n    store<f64>(this.dataStart + (<usize>index << alignof<f64>()), value);\n  }\n\n  @unsafe @operator(\"{}=\")\n  private __uset(index: i32, value: f64): void {\n    store<f64>(this.dataStart + (<usize>index << alignof<f64>()), value);\n  }\n\n  at(index: i32): f64 {\n    var len = this.byteLength >>> alignof<f64>();\n    index += select(0, len, index >= 0);\n    if (<u32>index >= <u32>len) throw new RangeError(E_INDEXOUTOFRANGE);\n    return load<f64>(this.dataStart + (<usize>index << alignof<f64>()));\n  }\n\n  includes(searchElement: f64, fromIndex: i32 = 0): bool {\n    return INCLUDES<Float64Array, f64>(this, searchElement, fromIndex);\n  }\n\n  indexOf(searchElement: f64, fromIndex: i32 = 0): i32 {\n    return INDEX_OF<Float64Array, f64>(this, searchElement, fromIndex);\n  }\n\n  lastIndexOf(searchElement: f64, fromIndex: i32 = this.length): i32 {\n    return LAST_INDEX_OF<Float64Array, f64>(this, searchElement, fromIndex);\n  }\n\n  fill(value: f64, start: i32 = 0, end: i32 = i32.MAX_VALUE): Float64Array {\n    return FILL<Float64Array, f64>(this, value, start, end);\n  }\n\n  sort(comparator: (a: f64, b: f64) => i32 = COMPARATOR<f64>()): Float64Array {\n    SORT<f64>(this.dataStart, this.length, comparator);\n    return this;\n  }\n\n  slice(begin: i32 = 0, end: i32 = i32.MAX_VALUE): Float64Array {\n    return SLICE<Float64Array, f64>(this, begin, end);\n  }\n\n  subarray(begin: i32 = 0, end: i32 = i32.MAX_VALUE): Float64Array {\n    return SUBARRAY<Float64Array, f64>(this, begin, end);\n  }\n\n  copyWithin(target: i32, start: i32, end: i32 = i32.MAX_VALUE): Float64Array {\n    return COPY_WITHIN<Float64Array, f64>(this, target, start, end);\n  }\n\n  reduce<T>(\n    fn: (accumulator: T, value: f64, index: i32, array: Float64Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE<Float64Array, f64, T>(this, fn, initialValue);\n  }\n\n  reduceRight<T>(\n    fn: (accumulator: T, value: f64, index: i32, array: Float64Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE_RIGHT<Float64Array, f64, T>(this, fn, initialValue);\n  }\n\n  map(fn: (value: f64, index: i32, self: Float64Array) => f64): Float64Array {\n    return MAP<Float64Array, f64>(this, fn);\n  }\n\n  filter(fn: (value: f64, index: i32, self: Float64Array) => bool): Float64Array {\n    return FILTER<Float64Array, f64>(this, fn);\n  }\n\n  findIndex(fn: (value: f64, index: i32, self: Float64Array) => bool): i32 {\n    return FIND_INDEX<Float64Array, f64>(this, fn);\n  }\n\n  findLastIndex(fn: (value: f64, index: i32, self: Float64Array) => bool): i32 {\n    return FIND_LAST_INDEX<Float64Array, f64>(this, fn);\n  }\n\n  some(fn: (value: f64, index: i32, self: Float64Array) => bool): bool {\n    return SOME<Float64Array, f64>(this, fn);\n  }\n\n  every(fn: (value: f64, index: i32, self: Float64Array) => bool): bool {\n    return EVERY<Float64Array, f64>(this, fn);\n  }\n\n  forEach(fn: (value: f64, index: i32, self: Float64Array) => void): void {\n    FOREACH<Float64Array, f64>(this, fn);\n  }\n\n  reverse(): this {\n    REVERSE<f64>(this.dataStart, this.length);\n    return this;\n  }\n\n  join(separator: string = \",\"): string {\n    return joinFloatArray<f64>(this.dataStart, this.length, separator);\n  }\n\n  set<U extends ArrayBufferView>(source: U, offset: i32 = 0): void {\n    SET<Float64Array, f64, U, valueof<U>>(this, source, offset);\n  }\n\n  toString(): string {\n    return this.join();\n  }\n\n  static wrap(buffer: ArrayBuffer, byteOffset: i32 = 0, length: i32 = -1): Float64Array {\n    return WRAP<Float64Array, f64>(buffer, byteOffset, length);\n  }\n}\n\n// @ts-ignore: decorator\n@inline\nfunction FILL<TArray extends ArrayBufferView, T extends number>(\n  array: TArray,\n  value: native<T>,\n  start: i32,\n  end: i32\n): TArray {\n  var ptr = array.dataStart;\n  var len = array.length;\n  start = start < 0 ? max(len + start, 0) : min(start, len);\n  end   = end   < 0 ? max(len + end,   0) : min(end,   len);\n  if (sizeof<T>() == 1) {\n    if (start < end) memory.fill(ptr + <usize>start, <u8>value, <usize>(end - start));\n  } else {\n    for (; start < end; ++start) {\n      store<T>(ptr + (<usize>start << alignof<T>()), value);\n    }\n  }\n  return array;\n}\n\n// @ts-ignore: decorator\n@inline\nfunction SLICE<TArray extends ArrayBufferView, T>(\n  array: TArray,\n  start: i32,\n  end: i32\n): TArray {\n  var len = array.length;\n  start  = start < 0 ? max(start + len, 0) : min(start, len);\n  end    = end   < 0 ? max(end   + len, 0) : min(end  , len);\n  len = max(end - start, 0);\n  var slice = instantiate<TArray>(len);\n  memory.copy(\n    slice.dataStart,\n    array.dataStart + (<usize>start << alignof<T>()),\n    <usize>len << alignof<T>()\n  );\n  return slice;\n}\n\n// @ts-ignore: decorator\n@inline\nfunction SUBARRAY<TArray extends ArrayBufferView, T>(\n  array: TArray,\n  begin: i32,\n  end: i32\n): TArray {\n  var len = array.length;\n  begin = begin < 0 ? max(len + begin, 0) : min(begin, len);\n  end   = end   < 0 ? max(len + end,   0) : min(end,   len);\n  end   = max(end, begin);\n\n  var out = changetype<TArray>(__new(offsetof<TArray>(), idof<TArray>()));\n  var buf = changetype<usize>(array.buffer);\n  store<usize>(changetype<usize>(out), buf, offsetof<TArray>(\"buffer\"));\n  __link(changetype<usize>(out), buf, false);\n  store<usize>(changetype<usize>(out), array.dataStart + (<usize>begin << alignof<T>()), offsetof<TArray>(\"dataStart\"));\n  store<u32>(changetype<usize>(out), (end - begin) << alignof<T>(), offsetof<TArray>(\"byteLength\"));\n  return out;\n}\n\n// @ts-ignore: decorator\n@inline\nfunction COPY_WITHIN<TArray extends ArrayBufferView, T>(\n  array: TArray,\n  target: i32,\n  start: i32,\n  end: i32\n): TArray {\n  var len = array.length;\n  var ptr = array.dataStart;\n\n  end   = min<i32>(end, len);\n  var to    = target < 0 ? max(len + target, 0) : min(target, len);\n  var from  = start < 0 ? max(len + start, 0) : min(start, len);\n  var last  = end < 0 ? max(len + end, 0) : min(end, len);\n  var count = min(last - from, len - to);\n\n  memory.copy(\n    ptr + (<usize>to << alignof<T>()),\n    ptr + (<usize>from << alignof<T>()),\n    <usize>count << alignof<T>()\n  );\n  return array;\n}\n\n// @ts-ignore: decorator\n@inline\nfunction REDUCE<TArray extends ArrayBufferView, T, TRet>(\n  array: TArray,\n  fn: (accumulator: TRet, value: T, index: i32, array: TArray) => TRet,\n  initialValue: TRet\n): TRet {\n  var ptr = array.dataStart;\n  for (let i = 0, k = array.length; i < k; i++) {\n    initialValue = fn(initialValue, load<T>(ptr + (<usize>i << alignof<T>())), i, array);\n  }\n  return initialValue;\n}\n\n// @ts-ignore: decorator\n@inline\nfunction REDUCE_RIGHT<TArray extends ArrayBufferView, T, TRet>(\n  array: TArray,\n  fn: (accumulator: TRet, value: T, index: i32, array: TArray) => TRet,\n  initialValue: TRet\n): TRet {\n  var ptr = array.dataStart;\n  for (let i = array.length - 1; i >= 0; i--) {\n    initialValue = fn(initialValue, load<T>(ptr + (<usize>i << alignof<T>())), i, array);\n  }\n  return initialValue;\n}\n\n// @ts-ignore: decorator\n@inline\nfunction MAP<TArray extends ArrayBufferView, T>(\n  array: TArray,\n  fn: (value: T, index: i32, self: TArray) => T,\n): TArray {\n  var len = array.length;\n  var ptr = array.dataStart;\n\n  var byteLength = len << alignof<T>();\n  var out = changetype<TArray>(__new(offsetof<TArray>(), idof<TArray>()));\n  var buf = changetype<ArrayBuffer>(__new(byteLength, idof<ArrayBuffer>()));\n  for (let i = 0; i < len; i++) {\n    store<T>(\n      changetype<usize>(buf) + (<usize>i << alignof<T>()),\n      fn(load<T>(ptr + (<usize>i << alignof<T>())), i, array)\n    );\n  }\n  store<usize>(changetype<usize>(out), changetype<usize>(buf), offsetof<TArray>(\"buffer\"));\n  __link(changetype<usize>(out), changetype<usize>(buf), false);\n  store<usize>(changetype<usize>(out), changetype<usize>(buf), offsetof<TArray>(\"dataStart\"));\n  store<u32>(changetype<usize>(out), byteLength, offsetof<TArray>(\"byteLength\"));\n  return out;\n}\n\n// @ts-ignore: decorator\n@inline\nfunction FILTER<TArray extends ArrayBufferView, T>(\n  array: TArray,\n  fn: (value: T, index: i32, self: TArray) => bool,\n): TArray {\n  var len = array.length;\n  var out = changetype<TArray>(__new(offsetof<TArray>(), idof<TArray>()));\n  var buf = changetype<ArrayBuffer>(__new(len << alignof<T>(), idof<ArrayBuffer>()));\n  var dataStart  = array.dataStart;\n  var j: usize = 0;\n  for (let i = 0; i < len; i++) {\n    let value = load<T>(dataStart + (<usize>i << alignof<T>()));\n    if (fn(value, i, array)) {\n      store<T>(\n        changetype<usize>(buf) + (j++ << alignof<T>()),\n        value\n      );\n    }\n  }\n  // shrink output buffer\n  var byteLength = j << alignof<T>();\n  var data = __renew(changetype<usize>(buf), byteLength);\n  store<usize>(changetype<usize>(out), data, offsetof<TArray>(\"buffer\"));\n  __link(changetype<usize>(out), data, false);\n  store<u32>(changetype<usize>(out), byteLength, offsetof<TArray>(\"byteLength\"));\n  store<usize>(changetype<usize>(out), data, offsetof<TArray>(\"dataStart\"));\n  return out;\n}\n\n// @ts-ignore: decorator\n@inline\nfunction FIND_INDEX<TArray extends ArrayBufferView, T>(\n  array: TArray,\n  fn: (value: T, index: i32, array: TArray) => bool,\n): i32 {\n  var ptr = array.dataStart;\n  for (let i = 0, k = array.length; i < k; i++) {\n    if (fn(load<T>(ptr + (<usize>i << alignof<T>())), i, array)) return i;\n  }\n  return -1;\n}\n\n// @ts-ignore: decorator\n@inline\nfunction FIND_LAST_INDEX<TArray extends ArrayBufferView, T>(\n  array: TArray,\n  fn: (value: T, index: i32, array: TArray) => bool,\n): i32 {\n  var ptr = array.dataStart;\n  for (let i = array.length - 1; i >= 0; --i) {\n    if (fn(load<T>(ptr + (<usize>i << alignof<T>())), i, array)) return i;\n  }\n  return -1;\n}\n\n// @ts-ignore: decorator\n@inline\nfunction INCLUDES<TArray extends ArrayBufferView, T>(\n  array: TArray,\n  searchElement: T,\n  fromIndex: i32,\n): bool {\n  if (isFloat<T>()) {\n    let index: isize = fromIndex;\n    let len: isize = array.length;\n    if (len == 0 || index >= len) return false;\n    if (index < 0) index = max(len + index, 0);\n    let dataStart = array.dataStart;\n    while (index < len) {\n      let elem = load<T>(dataStart + (index << alignof<T>()));\n      // @ts-ignore\n      if (elem == searchElement || isNaN(elem) & isNaN(searchElement)) return true;\n      ++index;\n    }\n    return false;\n  } else {\n    return INDEX_OF<TArray, T>(array, searchElement, fromIndex) >= 0;\n  }\n}\n\n// @ts-ignore: decorator\n@inline\nfunction INDEX_OF<TArray extends ArrayBufferView, T>(\n  array: TArray,\n  searchElement: T,\n  fromIndex: i32,\n): i32 {\n  var index: isize = fromIndex;\n  var len: isize = array.length;\n  if (len == 0 || index >= len) return -1;\n  if (index < 0) index = max(len + index, 0);\n  var dataStart = array.dataStart;\n  while (index < len) {\n    if (load<T>(dataStart + (index << alignof<T>())) == searchElement) return <i32>index;\n    ++index;\n  }\n  return -1;\n}\n\n// @ts-ignore: decorator\n@inline\nfunction LAST_INDEX_OF<TArray extends ArrayBufferView, T>(\n  array: TArray,\n  searchElement: T,\n  fromIndex: i32,\n): i32 {\n  var index: isize = fromIndex;\n  var len: isize = array.length;\n  if (len == 0) return -1;\n  if (index < 0) index = len + index; // no need to clamp\n  else if (index >= len) index = len - 1;\n  var dataStart = array.dataStart;\n  while (index >= 0) {\n    if (load<T>(dataStart + (index << alignof<T>())) == searchElement) return <i32>index;\n    --index;\n  }\n  return -1;\n}\n\n// @ts-ignore: decorator\n@inline\nfunction SOME<TArray extends ArrayBufferView, T>(\n  array: TArray,\n  fn: (value: T, index: i32, array: TArray) => bool,\n): bool {\n  var ptr = array.dataStart;\n  for (let i = 0, k = array.length; i < k; i++) {\n    if (fn(load<T>(ptr + (<usize>i << alignof<T>())), i, array)) return true;\n  }\n  return false;\n}\n\n// @ts-ignore: decorator\n@inline\nfunction EVERY<TArray extends ArrayBufferView, T>(\n  array: TArray,\n  fn: (value: T, index: i32, array: TArray) => bool,\n): bool {\n  var ptr = array.dataStart;\n  for (let i = 0, k = array.length; i < k; i++) {\n    if (fn(load<T>(ptr + (<usize>i << alignof<T>())), i, array)) continue;\n    return false;\n  }\n  return true;\n}\n\n// @ts-ignore: decorator\n@inline\nfunction FOREACH<TArray extends ArrayBufferView, T>(\n  array: TArray,\n  fn: (value: T, index: i32, array: TArray) => void,\n): void {\n  var ptr = array.dataStart;\n  for (let i = 0, k = array.length; i < k; i++) {\n    fn(load<T>(ptr + (<usize>i << alignof<T>())), i, array);\n  }\n}\n\n// @ts-ignore: decorator\n@inline\nfunction WRAP<TArray extends ArrayBufferView, T>(\n  buffer: ArrayBuffer,\n  byteOffset: i32 = 0,\n  len: i32 = -1\n): TArray {\n  var byteLength: i32;\n  var bufferByteLength = buffer.byteLength;\n  const mask: u32 = sizeof<T>() - 1;\n  if (i32(<u32>byteOffset > <u32>bufferByteLength) | (byteOffset & mask)) {\n    throw new RangeError(E_INDEXOUTOFRANGE);\n  }\n  if (len < 0) {\n    if (len == -1) {\n      if (bufferByteLength & mask) {\n        throw new RangeError(E_INVALIDLENGTH);\n      }\n      byteLength = bufferByteLength - byteOffset;\n    } else {\n      throw new RangeError(E_INVALIDLENGTH);\n    }\n  } else {\n    byteLength = len << alignof<T>();\n    if (byteOffset + byteLength > bufferByteLength) {\n      throw new RangeError(E_INVALIDLENGTH);\n    }\n  }\n  var out = changetype<TArray>(__new(offsetof<TArray>(), idof<TArray>()));\n  store<usize>(changetype<usize>(out), changetype<usize>(buffer), offsetof<TArray>(\"buffer\"));\n  __link(changetype<usize>(out), changetype<usize>(buffer), false);\n  store<u32>(changetype<usize>(out), byteLength, offsetof<TArray>(\"byteLength\"));\n  store<usize>(changetype<usize>(out), changetype<usize>(buffer) + <usize>byteOffset, offsetof<TArray>(\"dataStart\"));\n  return out;\n}\n\n// @ts-ignore: decorator\n@inline\nfunction SET<TArray extends ArrayBufferView, T, UArray extends ArrayBufferView, U>(\n  target: TArray,\n  source: UArray,\n  offset: i32 = 0\n): void {\n  // need to assert at compile time that U is not a reference or a function\n  if (isReference<U>()) {\n    ERROR(E_NOTIMPLEMENTED);\n  }\n\n  // Uncaught RangeError: offset is out of bounds\n  if (offset < 0) throw new RangeError(E_INDEXOUTOFRANGE);\n  if (source.length + offset > target.length) throw new RangeError(E_INDEXOUTOFRANGE);\n\n  // if the types align and match, use memory.copy() instead of manual loop\n  if (isInteger<T>() == isInteger<U>() && alignof<T>() == alignof<U>() &&\n    !(target instanceof Uint8ClampedArray && isSigned<U>())) {\n    memory.copy(\n      target.dataStart + (<usize>offset << alignof<T>()),\n      source.dataStart,\n      source.byteLength\n    );\n  } else {\n    let targetDataStart = target.dataStart + (<usize>offset << alignof<T>());\n    let sourceDataStart = source.dataStart;\n    let count = source.length;\n    for (let i = 0; i < count; i++) {\n      // if TArray is Uint8ClampedArray, then values must be clamped\n      if (target instanceof Uint8ClampedArray) {\n        if (isFloat<U>()) {\n          let value = load<U>(sourceDataStart + (<usize>i << alignof<U>()));\n          store<T>(\n            targetDataStart + (<usize>i << alignof<T>()),\n            isFinite<U>(value) ? <T>max<U>(0, min<U>(255, value)) : <T>0\n          );\n        } else {\n          let value = load<U>(sourceDataStart + (<usize>i << alignof<U>()));\n          if (!isSigned<U>()) {\n            store<T>(\n              targetDataStart + (<usize>i << alignof<T>()),\n              // @ts-ignore: cast to T is valid for numeric types here\n              min<U>(255, value)\n            );\n          } else if (sizeof<T>() <= 4) {\n            store<T>(\n              targetDataStart + (<usize>i << alignof<T>()),\n              // @ts-ignore: cast to T is valid for numeric types here\n              ~(<i32>value >> 31) & (((255 - <i32>value) >> 31) | value)\n            );\n          } else {\n            store<T>(\n              targetDataStart + (<usize>i << alignof<T>()),\n              // @ts-ignore: cast to T is valid for numeric types here\n              ~(<i64>value >> 63) & (((255 - <i64>value) >> 63) | value)\n            );\n          }\n        }\n        // if U is a float, then casting float to int must include a finite check\n      } else if (isFloat<U>() && !isFloat<T>()) {\n        let value = load<U>(sourceDataStart + (<usize>i << alignof<U>()));\n        // @ts-ignore: cast to T is valid for numeric types here\n        store<T>(targetDataStart + (<usize>i << alignof<T>()), isFinite<U>(value) ? <T>value : 0);\n      } else if (isFloat<T>() && !isFloat<U>()) {\n        // @ts-ignore: In this case the <T> conversion is required\n        store<T>(targetDataStart + (<usize>i << alignof<T>()), <T>load<U>(sourceDataStart + (<usize>i << alignof<U>())));\n      } else {\n        store<T>(targetDataStart + (<usize>i << alignof<T>()), load<U>(sourceDataStart + (<usize>i << alignof<U>())));\n      }\n    }\n  }\n}\n","import * as JSMath from \"./bindings/Math\";\nexport { JSMath };\n\nimport {\n  pow_lut, exp_lut, exp2_lut, log_lut, log2_lut,\n  powf_lut, expf_lut, exp2f_lut, logf_lut, log2f_lut\n} from \"./util/math\";\n\nimport {\n  abs as builtin_abs,\n  ceil as builtin_ceil,\n  clz as builtin_clz,\n  copysign as builtin_copysign,\n  floor as builtin_floor,\n  max as builtin_max,\n  min as builtin_min,\n  sqrt as builtin_sqrt,\n  trunc as builtin_trunc\n} from \"./builtins\";\n\n// SUN COPYRIGHT NOTICE\n//\n// Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n// Developed at SunPro, a Sun Microsystems, Inc. business.\n// Permission to use, copy, modify, and distribute this software\n// is freely granted, provided that this notice is preserved.\n//\n// Applies to all functions marked with a comment referring here.\n\n/** @internal */\n// @ts-ignore: decorator\n@lazy var rempio2_y0: f64, rempio2_y1: f64, res128_hi: u64;\n\n/** @internal */\n// @ts-ignore: decorator\n@lazy @inline const PIO2_TABLE = memory.data<u64>([\n  0x00000000A2F9836E, 0x4E441529FC2757D1, 0xF534DDC0DB629599, 0x3C439041FE5163AB,\n  0xDEBBC561B7246E3A, 0x424DD2E006492EEA, 0x09D1921CFE1DEB1C, 0xB129A73EE88235F5,\n  0x2EBB4484E99C7026, 0xB45F7E413991D639, 0x835339F49C845F8B, 0xBDF9283B1FF897FF,\n  0xDE05980FEF2F118B, 0x5A0A6D1F6D367ECF, 0x27CB09B74F463F66, 0x9E5FEA2D7527BAC7,\n  0xEBE5F17B3D0739F7, 0x8A5292EA6BFB5FB1, 0x1F8D5D0856033046, 0xFC7B6BABF0CFBC20,\n  0x9AF4361DA9E39161, 0x5EE61B086599855F, 0x14A068408DFFD880, 0x4D73273106061557\n]);\n\n/** @internal */\nfunction R(z: f64): f64 { // Rational approximation of (asin(x)-x)/x^3\n  const                   // see: musl/src/math/asin.c and SUN COPYRIGHT NOTICE above\n    pS0 = reinterpret<f64>(0x3FC5555555555555), //  1.66666666666666657415e-01\n    pS1 = reinterpret<f64>(0xBFD4D61203EB6F7D), // -3.25565818622400915405e-01\n    pS2 = reinterpret<f64>(0x3FC9C1550E884455), //  2.01212532134862925881e-01\n    pS3 = reinterpret<f64>(0xBFA48228B5688F3B), // -4.00555345006794114027e-02\n    pS4 = reinterpret<f64>(0x3F49EFE07501B288), //  7.91534994289814532176e-04\n    pS5 = reinterpret<f64>(0x3F023DE10DFDF709), //  3.47933107596021167570e-05\n    qS1 = reinterpret<f64>(0xC0033A271C8A2D4B), // -2.40339491173441421878e+00\n    qS2 = reinterpret<f64>(0x40002AE59C598AC8), //  2.02094576023350569471e+00\n    qS3 = reinterpret<f64>(0xBFE6066C1B8D0159), // -6.88283971605453293030e-01\n    qS4 = reinterpret<f64>(0x3FB3B8C5B12E9282); //  7.70381505559019352791e-02\n\n  var p = z * (pS0 + z * (pS1 + z * (pS2 + z * (pS3 + z * (pS4 + z * pS5)))));\n  var q = 1.0 + z * (qS1 + z * (qS2 + z * (qS3 + z * qS4)));\n  return p / q;\n}\n\n/** @internal */\n// @ts-ignore: decorator\n@inline\nfunction expo2(x: f64, sign: f64): f64 { // exp(x)/2 for x >= log(DBL_MAX)\n  const                       // see: musl/src/math/__expo2.c\n    k    = <u32>2043,\n    kln2 = reinterpret<f64>(0x40962066151ADD8B); // 0x1.62066151add8bp+10\n  var scale = reinterpret<f64>(<u64>((<u32>0x3FF + k / 2) << 20) << 32);\n  // in directed rounding correct sign before rounding or overflow is important\n  return NativeMath.exp(x - kln2) * (sign * scale) * scale;\n}\n\n/** @internal */\n/* Helper function to eventually get bits of π/2 * |x|\n *\n * y = π/4 * (frac << clz(frac) >> 11)\n * return clz(frac)\n *\n * Right shift 11 bits to make upper half fit in `double`\n */\n// @ts-ignore: decorator\n@inline\nfunction pio2_right(q0: u64, q1: u64): u64 { // see: jdh8/metallic/blob/master/src/math/double/rem_pio2.c\n  // Bits of π/4\n  const p0: u64 = 0xC4C6628B80DC1CD1;\n  const p1: u64 = 0xC90FDAA22168C234;\n\n  const Ox1p_64 = reinterpret<f64>(0x3BF0000000000000); // 0x1p-64\n  const Ox1p_75 = reinterpret<f64>(0x3B40000000000000); // 0x1p-75\n\n  var shift = clz(q1);\n\n  q1 = q1 << shift | q0 >> (64 - shift);\n  q0 <<= shift;\n\n  var lo = umuldi(p1, q1);\n  var hi = res128_hi;\n\n  var ahi = hi >> 11;\n  var alo = lo >> 11 | hi << 53;\n  var blo = <u64>(Ox1p_75 * <f64>p0 * <f64>q1 + Ox1p_75 * <f64>p1 * <f64>q0);\n\n  rempio2_y0 = <f64>(ahi + u64(lo < blo));\n  rempio2_y1 = Ox1p_64 * <f64>(alo + blo);\n\n  return shift;\n}\n\n/** @internal */\n// @ts-ignore: decorator\n@inline\nfunction umuldi(u: u64, v: u64): u64 {\n  var u1: u64 , v1: u64, w0: u64, w1: u64, t: u64;\n\n  u1 = u & 0xFFFFFFFF;\n  v1 = v & 0xFFFFFFFF;\n\n  u >>= 32;\n  v >>= 32;\n\n  t  = u1 * v1;\n  w0 = t & 0xFFFFFFFF;\n  t  = u * v1 + (t >> 32);\n  w1 = t >> 32;\n  t  = u1 * v + (t & 0xFFFFFFFF);\n\n  res128_hi = u * v + w1 + (t >> 32);\n  return (t << 32) + w0;\n}\n\n/** @internal */\nfunction pio2_large_quot(x: f64, u: i64): i32 { // see: jdh8/metallic/blob/master/src/math/double/rem_pio2.c\n  var magnitude = u & 0x7FFFFFFFFFFFFFFF;\n  var offset = (magnitude >> 52) - 1045;\n  var shift  = offset & 63;\n  var tblPtr = PIO2_TABLE + (<i32>(offset >> 6) << 3);\n  var s0: u64, s1: u64, s2: u64;\n\n  var b0 = load<u64>(tblPtr, 0 << 3);\n  var b1 = load<u64>(tblPtr, 1 << 3);\n  var b2 = load<u64>(tblPtr, 2 << 3);\n\n  // Get 192 bits of 0x1p-31 / π with `offset` bits skipped\n  if (shift) {\n    let rshift = 64 - shift;\n    let b3 = load<u64>(tblPtr, 3 << 3);\n    s0 = b1 >> rshift | b0 << shift;\n    s1 = b2 >> rshift | b1 << shift;\n    s2 = b3 >> rshift | b2 << shift;\n  } else {\n    s0 = b0;\n    s1 = b1;\n    s2 = b2;\n  }\n\n  var significand = (u & 0x000FFFFFFFFFFFFF) | 0x0010000000000000;\n\n  // First 128 bits of fractional part of x/(2π)\n  var blo = umuldi(s1, significand);\n  var bhi = res128_hi;\n\n  var ahi = s0 * significand;\n  var clo = (s2 >> 32) * (significand >> 32);\n  var plo = blo + clo;\n  var phi = ahi + bhi + u64(plo < clo);\n\n  // r: u128 = p << 2\n  var rlo = plo << 2;\n  var rhi = phi << 2 | plo >> 62;\n\n  // s: i128 = r >> 127\n  var slo = <i64>rhi >> 63;\n  var shi = slo >> 1;\n  var q   = (<i64>phi >> 62) - slo;\n\n  var shifter = 0x3CB0000000000000 - (pio2_right(rlo ^ slo, rhi ^ shi) << 52);\n  var signbit = (u ^ rhi) & 0x8000000000000000;\n  var coeff   = reinterpret<f64>(shifter | signbit);\n\n  rempio2_y0 *= coeff;\n  rempio2_y1 *= coeff;\n\n  return <i32>q;\n}\n\n/** @internal */\n// @ts-ignore: decorator\n@inline\nfunction rempio2(x: f64, u: u64, sign: i32): i32 {\n  const\n    pio2_1  = reinterpret<f64>(0x3FF921FB54400000), // 1.57079632673412561417e+00\n    pio2_1t = reinterpret<f64>(0x3DD0B4611A626331), // 6.07710050650619224932e-11\n    pio2_2  = reinterpret<f64>(0x3DD0B4611A600000), // 6.07710050630396597660e-11\n    pio2_2t = reinterpret<f64>(0x3BA3198A2E037073), // 2.02226624879595063154e-21\n    pio2_3  = reinterpret<f64>(0x3BA3198A2E000000), // 2.02226624871116645580e-21\n    pio2_3t = reinterpret<f64>(0x397B839A252049C1), // 8.47842766036889956997e-32\n    invpio2 = reinterpret<f64>(0x3FE45F306DC9C883); // 0.63661977236758134308\n\n  var ix = <u32>(u >> 32) & 0x7FFFFFFF;\n\n  if (ASC_SHRINK_LEVEL < 1) {\n    if (ix < 0x4002D97C) { // |x| < 3pi/4, special case with n=+-1\n      let q = 1, z: f64, y0: f64, y1: f64;\n      if (!sign) {\n        z = x - pio2_1;\n        if (ix != 0x3FF921FB) { // 33+53 bit pi is good enough\n          y0 = z - pio2_1t;\n          y1 = (z - y0) - pio2_1t;\n        } else { // near pi/2, use 33+33+53 bit pi\n          z -= pio2_2;\n          y0 = z - pio2_2t;\n          y1 = (z - y0) - pio2_2t;\n        }\n      } else { // negative x\n        z = x + pio2_1;\n        if (ix != 0x3FF921FB) { // 33+53 bit pi is good enough\n          y0 = z + pio2_1t;\n          y1 = (z - y0) + pio2_1t;\n        } else { // near pi/2, use 33+33+53 bit pi\n          z += pio2_2;\n          y0 = z + pio2_2t;\n          y1 = (z - y0) + pio2_2t;\n        }\n        q = -1;\n      }\n      rempio2_y0 = y0;\n      rempio2_y1 = y1;\n      return q;\n    }\n  }\n\n  if (ix < 0x413921FB) { // |x| ~< 2^20*pi/2 (1647099)\n    // Use precise Cody Waite scheme\n    let q  = nearest(x * invpio2);\n    let r  = x - q * pio2_1;\n    let w  = q * pio2_1t; // 1st round good to 85 bit\n    let j  = ix >> 20;\n    let y0 = r - w;\n    let hi = <u32>(reinterpret<u64>(y0) >> 32);\n    let i  = j - ((hi >> 20) & 0x7FF);\n\n    if (i > 16) { // 2nd iteration needed, good to 118\n      let t = r;\n      w  = q * pio2_2;\n      r  = t - w;\n      w  = q * pio2_2t - ((t - r) - w);\n      y0 = r - w;\n      hi = <u32>(reinterpret<u64>(y0) >> 32);\n      i = j - ((hi >> 20) & 0x7FF);\n      if (i > 49) { // 3rd iteration need, 151 bits acc\n        let t = r;\n        w  = q * pio2_3;\n        r  = t - w;\n        w  = q * pio2_3t - ((t - r) - w);\n        y0 = r - w;\n      }\n    }\n    let y1 = (r - y0) - w;\n    rempio2_y0 = y0;\n    rempio2_y1 = y1;\n    return <i32>q;\n  }\n  var q = pio2_large_quot(x, u);\n  return select(-q, q, sign);\n}\n\n/** @internal */\n// @ts-ignore: decorator\n@inline\nfunction sin_kern(x: f64, y: f64, iy: i32): f64 { // see: musl/tree/src/math/__sin.c\n  const\n    S1 = reinterpret<f64>(0xBFC5555555555549), // -1.66666666666666324348e-01\n    S2 = reinterpret<f64>(0x3F8111111110F8A6), //  8.33333333332248946124e-03\n    S3 = reinterpret<f64>(0xBF2A01A019C161D5), // -1.98412698298579493134e-04\n    S4 = reinterpret<f64>(0x3EC71DE357B1FE7D), //  2.75573137070700676789e-06\n    S5 = reinterpret<f64>(0xBE5AE5E68A2B9CEB), // -2.50507602534068634195e-08\n    S6 = reinterpret<f64>(0x3DE5D93A5ACFD57C); //  1.58969099521155010221e-10\n\n  var z = x * x;\n  var w = z * z;\n  var r = S2 + z * (S3 + z * S4) + z * w * (S5 + z * S6);\n  var v = z * x;\n  if (!iy) {\n    return x + v * (S1 + z * r);\n  } else {\n    return x - ((z * (0.5 * y - v * r) - y) - v * S1);\n  }\n}\n\n/** @internal */\n// @ts-ignore: decorator\n@inline\nfunction cos_kern(x: f64, y: f64): f64 { // see: musl/tree/src/math/__cos.c\n  const\n    C1 = reinterpret<f64>(0x3FA555555555554C), //  4.16666666666666019037e-02\n    C2 = reinterpret<f64>(0xBF56C16C16C15177), // -1.38888888888741095749e-03\n    C3 = reinterpret<f64>(0x3EFA01A019CB1590), //  2.48015872894767294178e-05\n    C4 = reinterpret<f64>(0xBE927E4F809C52AD), // -2.75573143513906633035e-07\n    C5 = reinterpret<f64>(0x3E21EE9EBDB4B1C4), //  2.08757232129817482790e-09\n    C6 = reinterpret<f64>(0xBDA8FAE9BE8838D4); // -1.13596475577881948265e-11\n\n  var z = x * x;\n  var w = z * z;\n  var r = z * (C1 + z * (C2 + z * C3)) + w * w * (C4 + z * (C5 + z * C6));\n  var hz = 0.5 * z;\n  w = 1.0 - hz;\n  return w + (((1.0 - w) - hz) + (z * r - x * y));\n}\n\n/** @internal */\nfunction tan_kern(x: f64, y: f64, iy: i32): f64 { // see: src/lib/msun/src/k_tan.c\n  const\n    T0  = reinterpret<f64>(0x3FD5555555555563), //  3.33333333333334091986e-01\n    T1  = reinterpret<f64>(0x3FC111111110FE7A), //  1.33333333333201242699e-01\n    T2  = reinterpret<f64>(0x3FABA1BA1BB341FE), //  5.39682539762260521377e-02\n    T3  = reinterpret<f64>(0x3F9664F48406D637), //  2.18694882948595424599e-02\n    T4  = reinterpret<f64>(0x3F8226E3E96E8493), //  8.86323982359930005737e-03\n    T5  = reinterpret<f64>(0x3F6D6D22C9560328), //  3.59207910759131235356e-03\n    T6  = reinterpret<f64>(0x3F57DBC8FEE08315), //  1.45620945432529025516e-03\n    T7  = reinterpret<f64>(0x3F4344D8F2F26501), //  5.88041240820264096874e-04\n    T8  = reinterpret<f64>(0x3F3026F71A8D1068), //  2.46463134818469906812e-04\n    T9  = reinterpret<f64>(0x3F147E88A03792A6), //  7.81794442939557092300e-05\n    T10 = reinterpret<f64>(0x3F12B80F32F0A7E9), //  7.14072491382608190305e-05\n    T11 = reinterpret<f64>(0xBEF375CBDB605373), // -1.85586374855275456654e-05\n    T12 = reinterpret<f64>(0x3EFB2A7074BF7AD4); //  2.59073051863633712884e-05\n\n  const\n    one    = reinterpret<f64>(0x3FF0000000000000), // 1.00000000000000000000e+00\n    pio4   = reinterpret<f64>(0x3FE921FB54442D18), // 7.85398163397448278999e-01\n    pio4lo = reinterpret<f64>(0x3C81A62633145C07); // 3.06161699786838301793e-17\n\n  var z: f64, r: f64, v: f64, w: f64, s: f64;\n  var hx = <i32>(reinterpret<u64>(x) >> 32); // high word of x\n  var ix = hx & 0x7FFFFFFF; // high word of |x|\n  var big = ix >= 0x3FE59428;\n  if (big) { // |x| >= 0.6744\n    if (hx < 0) { x = -x, y = -y; }\n    z = pio4 - x;\n    w = pio4lo - y;\n    x = z + w;\n    y = 0.0;\n  }\n  z = x * x;\n  w = z * z;\n  r = T1 + w * (T3 + w * (T5 + w * (T7 + w * (T9 + w * T11))));\n  v = z * (T2 + w * (T4 + w * (T6 + w * (T8 + w * (T10 + w * T12)))));\n  s = z * x;\n  r = y + z * (s * (r + v) + y);\n  r += T0 * s;\n  w = x + r;\n  if (big) {\n    v = iy;\n    return (1 - ((hx >> 30) & 2)) * (v - 2.0 * (x - (w * w / (w + v) - r)));\n  }\n  if (iy == 1) return w;\n  var a: f64, t: f64;\n  z = w;\n  z = reinterpret<f64>(reinterpret<u64>(z) & 0xFFFFFFFF00000000);\n  v = r - (z - x);  // z + v = r + x\n  t = a = -one / w; // a = -1.0 / w\n  t = reinterpret<f64>(reinterpret<u64>(t) & 0xFFFFFFFF00000000);\n  s = one + t * z;\n  return t + a * (s + t * v);\n}\n\n/** @internal */\nfunction dtoi32(x: f64): i32 {\n  if (ASC_SHRINK_LEVEL > 0) {\n    const inv32 = 1.0 / 4294967296;\n    return <i32><i64>(x - 4294967296 * floor(x * inv32));\n  } else {\n    let result = 0;\n    let u = reinterpret<u64>(x);\n    let e = (u >> 52) & 0x7FF;\n    if (e <= 1023 + 30) {\n      result = <i32>x;\n    } else if (e <= 1023 + 30 + 53) {\n      let v = (u & ((<u64>1 << 52) - 1)) | (<u64>1 << 52);\n      v = v << e - 1023 - 52 + 32;\n      result = <i32>(v >> 32);\n      result = select<i32>(-result, result, u >> 63);\n    }\n    return result;\n  }\n}\n\n// @ts-ignore: decorator\n@lazy var random_seeded = false;\n\n// @ts-ignore: decorator\n@lazy var random_state0_64: u64, random_state1_64: u64;\n\n// @ts-ignore: decorator\n@lazy var random_state0_32: u32, random_state1_32: u32;\n\nfunction murmurHash3(h: u64): u64 { // Force all bits of a hash block to avalanche\n  h ^= h >> 33;                     // see: https://github.com/aappleby/smhasher\n  h *= 0xFF51AFD7ED558CCD;\n  h ^= h >> 33;\n  h *= 0xC4CEB9FE1A85EC53;\n  h ^= h >> 33;\n  return h;\n}\n\nfunction splitMix32(h: u32): u32 {\n  h += 0x6D2B79F5;\n  h  = (h ^ (h >> 15)) * (h | 1);\n  h ^= h + (h ^ (h >> 7)) * (h | 61);\n  return h ^ (h >> 14);\n}\n\nexport namespace NativeMath {\n\n  // @ts-ignore: decorator\n  @lazy\n  export const E       = reinterpret<f64>(0x4005BF0A8B145769); // 2.7182818284590452354\n\n  // @ts-ignore: decorator\n  @lazy\n  export const LN2     = reinterpret<f64>(0x3FE62E42FEFA39EF); // 0.69314718055994530942\n\n  // @ts-ignore: decorator\n  @lazy\n  export const LN10    = reinterpret<f64>(0x40026BB1BBB55516); // 2.30258509299404568402\n\n  // @ts-ignore: decorator\n  @lazy\n  export const LOG2E   = reinterpret<f64>(0x3FF71547652B82FE); // 1.4426950408889634074\n\n  // @ts-ignore: decorator\n  @lazy\n  export const LOG10E  = reinterpret<f64>(0x3FDBCB7B1526E50E); // 0.43429448190325182765\n\n  // @ts-ignore: decorator\n  @lazy\n  export const PI      = reinterpret<f64>(0x400921FB54442D18); // 3.14159265358979323846\n\n  // @ts-ignore: decorator\n  @lazy\n  export const SQRT1_2 = reinterpret<f64>(0x3FE6A09E667F3BCD); // 0.70710678118654752440\n\n  // @ts-ignore: decorator\n  @lazy\n  export const SQRT2   = reinterpret<f64>(0x3FF6A09E667F3BCD); // 1.41421356237309504880\n\n  // @ts-ignore: decorator\n  @lazy\n  export var sincos_sin: f64 = 0;\n\n  // @ts-ignore: decorator\n  @lazy\n  export var sincos_cos: f64 = 0;\n\n  // @ts-ignore: decorator\n  @inline export function abs(x: f64): f64 {\n    return builtin_abs<f64>(x);\n  }\n\n  export function acos(x: f64): f64 { // see: musl/src/math/acos.c and SUN COPYRIGHT NOTICE above\n    const\n      pio2_hi   = reinterpret<f64>(0x3FF921FB54442D18), // 1.57079632679489655800e+00\n      pio2_lo   = reinterpret<f64>(0x3C91A62633145C07), // 6.12323399573676603587e-17\n      Ox1p_120f = reinterpret<f32>(0x03800000);\n\n    var hx = <u32>(reinterpret<u64>(x) >> 32);\n    var ix = hx & 0x7FFFFFFF;\n    if (ix >= 0x3FF00000) {\n      let lx = <u32>reinterpret<u64>(x);\n      if ((ix - 0x3FF00000 | lx) == 0) {\n        if (hx >> 31) return 2 * pio2_hi + Ox1p_120f;\n        return 0;\n      }\n      return 0 / (x - x);\n    }\n    if (ix < 0x3FE00000) {\n      if (ix <= 0x3C600000) return pio2_hi + Ox1p_120f;\n      return pio2_hi - (x - (pio2_lo - x * R(x * x)));\n    }\n    var s: f64, w: f64, z: f64;\n    if (hx >> 31) {\n      // z = (1.0 + x) * 0.5;\n      z = 0.5 + x * 0.5;\n      s = builtin_sqrt<f64>(z);\n      w = R(z) * s - pio2_lo;\n      return 2 * (pio2_hi - (s + w));\n    }\n    // z = (1.0 - x) * 0.5;\n    z = 0.5 - x * 0.5;\n    s = builtin_sqrt<f64>(z);\n    var df = reinterpret<f64>(reinterpret<u64>(s) & 0xFFFFFFFF00000000);\n    var c = (z - df * df) / (s + df);\n    w = R(z) * s + c;\n    return 2 * (df + w);\n  }\n\n  export function acosh(x: f64): f64 { // see: musl/src/math/acosh.c\n    const s = reinterpret<f64>(0x3FE62E42FEFA39EF);\n    var u = reinterpret<u64>(x);\n    // Prevent propagation for all input values less than 1.0.\n    // Note musl lib didn't fix this yet.\n    if (<i64>u < 0x3FF0000000000000) return (x - x) / 0.0;\n    var e = u >> 52 & 0x7FF;\n    if (e < 0x3FF + 1) return log1p(x - 1 + builtin_sqrt<f64>((x - 1) * (x - 1) + 2 * (x - 1)));\n    if (e < 0x3FF + 26) return log(2 * x - 1 / (x + builtin_sqrt<f64>(x * x - 1)));\n    return log(x) + s;\n  }\n\n  export function asin(x: f64): f64 { // see: musl/src/math/asin.c and SUN COPYRIGHT NOTICE above\n    const\n      pio2_hi   = reinterpret<f64>(0x3FF921FB54442D18), // 1.57079632679489655800e+00\n      pio2_lo   = reinterpret<f64>(0x3C91A62633145C07), // 6.12323399573676603587e-17\n      Ox1p_120f = reinterpret<f32>(0x03800000);\n\n    var hx = <u32>(reinterpret<u64>(x) >> 32);\n    var ix = hx & 0x7FFFFFFF;\n    if (ix >= 0x3FF00000) {\n      let lx = <u32>reinterpret<u64>(x);\n      if ((ix - 0x3FF00000 | lx) == 0) return x * pio2_hi + Ox1p_120f;\n      return 0 / (x - x);\n    }\n    if (ix < 0x3FE00000) {\n      if (ix < 0x3E500000 && ix >= 0x00100000) return x;\n      return x + x * R(x * x);\n    }\n    // var z = (1.0 - builtin_abs<f64>(x)) * 0.5;\n    var z = 0.5 - builtin_abs<f64>(x) * 0.5;\n    var s = builtin_sqrt<f64>(z);\n    var r = R(z);\n    if (ix >= 0x3FEF3333) x = pio2_hi - (2 * (s + s * r) - pio2_lo);\n    else {\n      let f = reinterpret<f64>(reinterpret<u64>(s) & 0xFFFFFFFF00000000);\n      let c = (z - f * f) / (s + f);\n      x = 0.5 * pio2_hi - (2 * s * r - (pio2_lo - 2 * c) - (0.5 * pio2_hi - 2 * f));\n    }\n    if (hx >> 31) return -x;\n    return x;\n  }\n\n  export function asinh(x: f64): f64 { // see: musl/src/math/asinh.c\n    const c = reinterpret<f64>(0x3FE62E42FEFA39EF); // 0.693147180559945309417232121458176568\n    var u = reinterpret<u64>(x);\n    var e = u >> 52 & 0x7FF;\n    var y = reinterpret<f64>(u & 0x7FFFFFFFFFFFFFFF);\n    if (e >= 0x3FF + 26) y = log(y) + c;\n    else if (e >= 0x3FF + 1)  y =   log(2 * y + 1 / (builtin_sqrt<f64>(y * y + 1) + y));\n    else if (e >= 0x3FF - 26) y = log1p(y + y * y / (builtin_sqrt<f64>(y * y + 1) + 1));\n    return builtin_copysign(y, x);\n  }\n\n  export function atan(x: f64): f64 { // see musl/src/math/atan.c and SUN COPYRIGHT NOTICE above\n    const\n      atanhi0   = reinterpret<f64>(0x3FDDAC670561BB4F), //  4.63647609000806093515e-01\n      atanhi1   = reinterpret<f64>(0x3FE921FB54442D18), //  7.85398163397448278999e-01\n      atanhi2   = reinterpret<f64>(0x3FEF730BD281F69B), //  9.82793723247329054082e-01\n      atanhi3   = reinterpret<f64>(0x3FF921FB54442D18), //  1.57079632679489655800e+00\n      atanlo0   = reinterpret<f64>(0x3C7A2B7F222F65E2), //  2.26987774529616870924e-17\n      atanlo1   = reinterpret<f64>(0x3C81A62633145C07), //  3.06161699786838301793e-17\n      atanlo2   = reinterpret<f64>(0x3C7007887AF0CBBD), //  1.39033110312309984516e-17\n      atanlo3   = reinterpret<f64>(0x3C91A62633145C07), //  6.12323399573676603587e-17\n      aT0       = reinterpret<f64>(0x3FD555555555550D), //  3.33333333333329318027e-01\n      aT1       = reinterpret<f64>(0xBFC999999998EBC4), // -1.99999999998764832476e-01\n      aT2       = reinterpret<f64>(0x3FC24924920083FF), //  1.42857142725034663711e-01\n      aT3       = reinterpret<f64>(0xBFBC71C6FE231671), // -1.11111104054623557880e-01,\n      aT4       = reinterpret<f64>(0x3FB745CDC54C206E), //  9.09088713343650656196e-02\n      aT5       = reinterpret<f64>(0xBFB3B0F2AF749A6D), // -7.69187620504482999495e-02\n      aT6       = reinterpret<f64>(0x3FB10D66A0D03D51), //  6.66107313738753120669e-02\n      aT7       = reinterpret<f64>(0xBFADDE2D52DEFD9A), // -5.83357013379057348645e-02\n      aT8       = reinterpret<f64>(0x3FA97B4B24760DEB), //  4.97687799461593236017e-02\n      aT9       = reinterpret<f64>(0xBFA2B4442C6A6C2F), // -3.65315727442169155270e-02\n      aT10      = reinterpret<f64>(0x3F90AD3AE322DA11), //  1.62858201153657823623e-02\n      Ox1p_120f = reinterpret<f32>(0x03800000);\n\n    var ix = <u32>(reinterpret<u64>(x) >> 32);\n    var sx = x;\n    ix &= 0x7FFFFFFF;\n    var z: f64;\n    if (ix >= 0x44100000) {\n      if (isNaN(x)) return x;\n      z = atanhi3 + Ox1p_120f;\n      return builtin_copysign<f64>(z, sx);\n    }\n    var id: i32;\n    if (ix < 0x3FDC0000) {\n      if (ix < 0x3E400000) return x;\n      id = -1;\n    } else {\n      x = builtin_abs<f64>(x);\n      if (ix < 0x3FF30000) {\n        if (ix < 0x3FE60000) {\n          id = 0;\n          x = (2.0 * x - 1.0) / (2.0 + x);\n        } else {\n          id = 1;\n          x = (x - 1.0) / (x + 1.0);\n        }\n      } else {\n        if (ix < 0x40038000) {\n          id = 2;\n          x = (x - 1.5) / (1.0 + 1.5 * x);\n        } else {\n          id = 3;\n          x = -1.0 / x;\n        }\n      }\n    }\n    z = x * x;\n    var w = z * z;\n    var s1 = z * (aT0 + w * (aT2 + w * (aT4 + w * (aT6 + w * (aT8 + w * aT10)))));\n    var s2 = w * (aT1 + w * (aT3 + w * (aT5 + w * (aT7 + w * aT9))));\n    var s3 = x * (s1 + s2);\n    if (id < 0) return x - s3;\n    switch (id) {\n      case 0: { z = atanhi0 - ((s3 - atanlo0) - x); break; }\n      case 1: { z = atanhi1 - ((s3 - atanlo1) - x); break; }\n      case 2: { z = atanhi2 - ((s3 - atanlo2) - x); break; }\n      case 3: { z = atanhi3 - ((s3 - atanlo3) - x); break; }\n      default: unreachable();\n    }\n    return builtin_copysign<f64>(z, sx);\n  }\n\n  export function atanh(x: f64): f64 { // see: musl/src/math/atanh.c\n    var u = reinterpret<u64>(x);\n    var e = u >> 52 & 0x7FF;\n    var y = builtin_abs(x);\n    if (e < 0x3FF - 1) {\n      if (e >= 0x3FF - 32) y = 0.5 * log1p(2 * y + 2 * y * y / (1 - y));\n    } else {\n      y = 0.5 * log1p(2 * (y / (1 - y)));\n    }\n    return builtin_copysign<f64>(y, x);\n  }\n\n  export function atan2(y: f64, x: f64): f64 { // see: musl/src/math/atan2.c and SUN COPYRIGHT NOTICE above\n    const pi_lo = reinterpret<f64>(0x3CA1A62633145C07); // 1.2246467991473531772E-16\n    if (isNaN(x) || isNaN(y)) return x + y;\n    var u = reinterpret<u64>(x);\n    var ix = <u32>(u >> 32);\n    var lx = <u32>u;\n    u = reinterpret<u64>(y);\n    var iy = <u32>(u >> 32);\n    var ly = <u32>u;\n    if ((ix - 0x3FF00000 | lx) == 0) return atan(y);\n    var m = ((iy >> 31) & 1) | ((ix >> 30) & 2);\n    ix = ix & 0x7FFFFFFF;\n    iy = iy & 0x7FFFFFFF;\n    if ((iy | ly) == 0) {\n      switch (m) {\n        case 0:\n        case 1: return  y;\n        case 2: return  PI;\n        case 3: return -PI;\n      }\n    }\n    if ((ix | lx) == 0) return m & 1 ? -PI / 2 : PI / 2;\n    if (ix == 0x7FF00000) {\n      if (iy == 0x7FF00000) {\n        let t = m & 2 ? 3 * PI / 4 : PI / 4;\n        return m & 1 ? -t : t;\n      } else {\n        let t = m & 2 ? PI : 0;\n        return m & 1 ? -t : t;\n      }\n    }\n    var z: f64;\n    if (ix + (64 << 20) < iy || iy == 0x7FF00000) return m & 1 ? -PI / 2 : PI / 2;\n    if ((m & 2) && iy + (64 << 20) < ix) z = 0;\n    else z = atan(builtin_abs<f64>(y / x));\n    switch (m) {\n      case 0: return  z;\n      case 1: return -z;\n      case 2: return PI - (z - pi_lo);\n      case 3: return (z - pi_lo) - PI;\n    }\n    unreachable();\n    return 0;\n  }\n\n  export function cbrt(x: f64): f64 { // see: musl/src/math/cbrt.c and SUN COPYRIGHT NOTICE above\n    const\n      B1     = <u32>715094163,\n      B2     = <u32>696219795,\n      P0     = reinterpret<f64>(0x3FFE03E60F61E692), //  1.87595182427177009643\n      P1     = reinterpret<f64>(0xBFFE28E092F02420), // -1.88497979543377169875\n      P2     = reinterpret<f64>(0x3FF9F1604A49D6C2), //  1.621429720105354466140\n      P3     = reinterpret<f64>(0xBFE844CBBEE751D9), // -0.758397934778766047437\n      P4     = reinterpret<f64>(0x3FC2B000D4E4EDD7), //  0.145996192886612446982\n      Ox1p54 = reinterpret<f64>(0x4350000000000000); //  0x1p54\n\n    var u = reinterpret<u64>(x);\n    var hx = <u32>(u >> 32) & 0x7FFFFFFF;\n    if (hx >= 0x7FF00000) return x + x;\n    if (hx < 0x00100000) {\n      u = reinterpret<u64>(x * Ox1p54);\n      hx = <u32>(u >> 32) & 0x7FFFFFFF;\n      if (hx == 0) return x;\n      hx = hx / 3 + B2;\n    } else {\n      hx = hx / 3 + B1;\n    }\n    u &= 1 << 63;\n    u |= <u64>hx << 32;\n    var t = reinterpret<f64>(u);\n    var r = (t * t) * (t / x);\n    t = t * ((P0 + r * (P1 + r * P2)) + ((r * r) * r) * (P3 + r * P4));\n    t = reinterpret<f64>((reinterpret<u64>(t) + 0x80000000) & 0xFFFFFFFFC0000000);\n    var s = t * t;\n    r = x / s;\n    r = (r - t) / (2 * t + r);\n    t = t + t * r;\n    return t;\n  }\n\n  // @ts-ignore: decorator\n  @inline\n  export function ceil(x: f64): f64 {\n    return builtin_ceil<f64>(x);\n  }\n\n  export function clz32(x: f64): f64 {\n    if (!isFinite(x)) return 32;\n    /*\n     * Wasm (MVP) and JS have different approaches for double->int conversions.\n     *\n     * For emulate JS conversion behavior and avoid trapping from wasm we should modulate by MAX_INT\n     * our float-point arguments before actual convertion to integers.\n     */\n    return builtin_clz(dtoi32(x));\n  }\n\n  export function cos(x: f64): f64 { // see: musl/src/math/cos.c\n    var u  = reinterpret<u64>(x);\n    var ix = <u32>(u >> 32);\n    var sign = ix >> 31;\n\n    ix &= 0x7FFFFFFF;\n\n    // |x| ~< pi/4\n    if (ix <= 0x3FE921FB) {\n      if (ix < 0x3E46A09E) {  // |x| < 2**-27 * sqrt(2)\n        return 1.0;\n      }\n      return cos_kern(x, 0);\n    }\n\n    // sin(Inf or NaN) is NaN\n    if (ix >= 0x7FF00000) return x - x;\n\n    // argument reduction needed\n    var n  = rempio2(x, u, sign);\n    var y0 = rempio2_y0;\n    var y1 = rempio2_y1;\n\n    x = n & 1 ? sin_kern(y0, y1, 1) : cos_kern(y0, y1);\n    return (n + 1) & 2 ? -x : x;\n  }\n\n  export function cosh(x: f64): f64 { // see: musl/src/math/cosh.c\n    var u = reinterpret<u64>(x);\n    u &= 0x7FFFFFFFFFFFFFFF;\n    x = reinterpret<f64>(u);\n    var w = <u32>(u >> 32);\n    var t: f64;\n    if (w < 0x3FE62E42) {\n      if (w < 0x3FF00000 - (26 << 20)) return 1;\n      t = expm1(x);\n      // return 1 + t * t / (2 * (1 + t));\n      return 1 + t * t / (2 + 2 * t);\n    }\n    if (w < 0x40862E42) {\n      t = exp(x);\n      return 0.5 * (t + 1 / t);\n    }\n    t = expo2(x, 1);\n    return t;\n  }\n\n  export function exp(x: f64): f64 { // see: musl/src/math/exp.c and SUN COPYRIGHT NOTICE above\n    if (ASC_SHRINK_LEVEL < 1) {\n      return exp_lut(x);\n    } else {\n      const\n        ln2hi     = reinterpret<f64>(0x3FE62E42FEE00000), //  6.93147180369123816490e-01\n        ln2lo     = reinterpret<f64>(0x3DEA39EF35793C76), //  1.90821492927058770002e-10\n        invln2    = reinterpret<f64>(0x3FF71547652B82FE), //  1.44269504088896338700e+00\n        P1        = reinterpret<f64>(0x3FC555555555553E), //  1.66666666666666019037e-01\n        P2        = reinterpret<f64>(0xBF66C16C16BEBD93), // -2.77777777770155933842e-03\n        P3        = reinterpret<f64>(0x3F11566AAF25DE2C), //  6.61375632143793436117e-05\n        P4        = reinterpret<f64>(0xBEBBBD41C5D26BF1), // -1.65339022054652515390e-06\n        P5        = reinterpret<f64>(0x3E66376972BEA4D0), //  4.13813679705723846039e-08\n        overflow  = reinterpret<f64>(0x40862E42FEFA39EF), //  709.782712893383973096\n        underflow = reinterpret<f64>(0xC0874910D52D3051), // -745.13321910194110842\n        Ox1p1023  = reinterpret<f64>(0x7FE0000000000000); //  0x1p1023\n\n      let hx = <u32>(reinterpret<u64>(x) >> 32);\n      let sign_ = <i32>(hx >> 31);\n      hx &= 0x7FFFFFFF;\n      if (hx >= 0x4086232B) {\n        if (isNaN(x)) return x;\n        if (x > overflow)  return x * Ox1p1023;\n        if (x < underflow) return 0;\n      }\n      let hi: f64, lo: f64 = 0;\n      let k = 0;\n      if (hx > 0x3FD62E42) {\n        if (hx >= 0x3FF0A2B2) {\n          k = <i32>(invln2 * x + builtin_copysign<f64>(0.5, x));\n        } else {\n          k = 1 - (sign_ << 1);\n        }\n        hi = x - k * ln2hi;\n        lo = k * ln2lo;\n        x = hi - lo;\n      } else if (hx > 0x3E300000) {\n        hi = x;\n      } else return 1.0 + x;\n      let xs = x * x;\n      // var c = x - xp2 * (P1 + xp2 * (P2 + xp2 * (P3 + xp2 * (P4 + xp2 * P5))));\n      let xq = xs * xs;\n      let c = x - (xs * P1 + xq * ((P2 + xs * P3) + xq * (P4 + xs * P5)));\n      let y = 1.0 + (x * c / (2 - c) - lo + hi);\n      return k == 0 ? y : scalbn(y, k);\n    }\n  }\n\n  export function exp2(x: f64): f64 {\n    return exp2_lut(x);\n  }\n\n  export function expm1(x: f64): f64 { // see: musl/src/math/expm1.c and SUN COPYRIGHT NOTICE above\n    const\n      o_threshold = reinterpret<f64>(0x40862E42FEFA39EF), //  7.09782712893383973096e+02\n      ln2_hi      = reinterpret<f64>(0x3FE62E42FEE00000), //  6.93147180369123816490e-01\n      ln2_lo      = reinterpret<f64>(0x3DEA39EF35793C76), //  1.90821492927058770002e-10\n      invln2      = reinterpret<f64>(0x3FF71547652B82FE), //  1.44269504088896338700e+00\n      Q1          = reinterpret<f64>(0xBFA11111111110F4), // -3.33333333333331316428e-02\n      Q2          = reinterpret<f64>(0x3F5A01A019FE5585), //  1.58730158725481460165e-03\n      Q3          = reinterpret<f64>(0xBF14CE199EAADBB7), // -7.93650757867487942473e-05\n      Q4          = reinterpret<f64>(0x3ED0CFCA86E65239), //  4.00821782732936239552e-06\n      Q5          = reinterpret<f64>(0xBE8AFDB76E09C32D), // -2.01099218183624371326e-07\n      Ox1p1023    = reinterpret<f64>(0x7FE0000000000000); //  0x1p1023\n\n    var u = reinterpret<u64>(x);\n    var hx = <u32>(u >> 32 & 0x7FFFFFFF);\n    var k = 0, sign_ = <i32>(u >> 63);\n    if (hx >= 0x4043687A) {\n      if (isNaN(x)) return x;\n      if (sign_) return -1;\n      if (x > o_threshold) return x * Ox1p1023;\n    }\n    var c = 0.0, t: f64;\n    if (hx > 0x3FD62E42) {\n      k = select<i32>(\n        1 - (sign_ << 1),\n        <i32>(invln2 * x + builtin_copysign<f64>(0.5, x)),\n        hx < 0x3FF0A2B2\n      );\n      t = <f64>k;\n      let hi = x - t * ln2_hi;\n      let lo = t * ln2_lo;\n      x = hi - lo;\n      c = (hi - x) - lo;\n    } else if (hx < 0x3C900000) return x;\n    var hfx = 0.5 * x;\n    var hxs = x * hfx;\n    // var r1 = 1.0 + hxs * (Q1 + hxs * (Q2 + hxs * (Q3 + hxs * (Q4 + hxs * Q5))));\n    var hxq = hxs * hxs;\n    var r1 = (1.0 + hxs * Q1) + hxq * ((Q2 + hxs * Q3) + hxq * (Q4 + hxs * Q5));\n    t = 3.0 - r1 * hfx;\n    var e = hxs * ((r1 - t) / (6.0 - x * t));\n    if (k == 0) return x - (x * e - hxs);\n    e = x * (e - c) - c;\n    e -= hxs;\n    if (k == -1) return 0.5 * (x - e) - 0.5;\n    if (k == 1) {\n      if (x < -0.25) return -2.0 * (e - (x + 0.5));\n      return 1.0 + 2.0 * (x - e);\n    }\n    u = (0x3FF + k) << 52;\n    var twopk = reinterpret<f64>(u);\n    var y: f64;\n    if (k < 0 || k > 56) {\n      y = x - e + 1.0;\n      if (k == 1024) y = y * 2.0 * Ox1p1023;\n      else y = y * twopk;\n      return y - 1.0;\n    }\n    u = (0x3FF - k) << 52;\n    y = reinterpret<f64>(u);\n    if (k < 20) y = (1 - y) - e;\n    else y = 1 - (e + y);\n    return (x + y) * twopk;\n  }\n\n  // @ts-ignore: decorator\n  @inline\n  export function floor(x: f64): f64 {\n    return builtin_floor<f64>(x);\n  }\n\n  // @ts-ignore: decorator\n  @inline\n  export function fround(x: f64): f64 {\n    return <f32>x;\n  }\n\n  export function hypot(x: f64, y: f64): f64 { // see: musl/src/math/hypot.c\n    const\n      SPLIT    = reinterpret<f64>(0x41A0000000000000) + 1, // 0x1p27 + 1\n      Ox1p700  = reinterpret<f64>(0x6BB0000000000000),\n      Ox1p_700 = reinterpret<f64>(0x1430000000000000);\n\n    var ux = reinterpret<u64>(x);\n    var uy = reinterpret<u64>(y);\n    ux &= 0x7FFFFFFFFFFFFFFF;\n    uy &= 0x7FFFFFFFFFFFFFFF;\n    if (ux < uy) {\n      let ut = ux;\n      ux = uy;\n      uy = ut;\n    }\n    var ex = <i32>(ux >> 52);\n    var ey = <i32>(uy >> 52);\n    y = reinterpret<f64>(uy);\n    if (ey == 0x7FF) return y;\n    x = reinterpret<f64>(ux);\n    if (ex == 0x7FF || uy == 0) return x;\n    if (ex - ey > 64) return x + y;\n    var z = 1.0;\n    if (ex > 0x3FF + 510) {\n      z  = Ox1p700;\n      x *= Ox1p_700;\n      y *= Ox1p_700;\n    } else if (ey < 0x3FF - 450) {\n      z  = Ox1p_700;\n      x *= Ox1p700;\n      y *= Ox1p700;\n    }\n    var c = x * SPLIT;\n    var h = x - c + c;\n    var l = x - h;\n    var hx = x * x;\n    var lx = h * h - hx + (2 * h + l) * l;\n    c = y * SPLIT;\n    h = y - c + c;\n    l = y - h;\n    var hy = y * y;\n    var ly = h * h - hy + (2 * h + l) * l;\n    return z * builtin_sqrt(ly + lx + hy + hx);\n  }\n\n  export function imul(x: f64, y: f64): f64 {\n    /*\n     * Wasm (MVP) and JS have different approaches for double->int conversions.\n     *\n     * For emulate JS conversion behavior and avoid trapping from wasm we should modulate by MAX_INT\n     * our float-point arguments before actual convertion to integers.\n     */\n    if (!isFinite(x + y)) return 0;\n    return dtoi32(x) * dtoi32(y);\n  }\n\n  export function log(x: f64): f64 { // see: musl/src/math/log.c and SUN COPYRIGHT NOTICE above\n    if (ASC_SHRINK_LEVEL < 1) {\n      return log_lut(x);\n    } else {\n      const\n        ln2_hi = reinterpret<f64>(0x3FE62E42FEE00000), // 6.93147180369123816490e-01\n        ln2_lo = reinterpret<f64>(0x3DEA39EF35793C76), // 1.90821492927058770002e-10\n        Lg1    = reinterpret<f64>(0x3FE5555555555593), // 6.666666666666735130e-01\n        Lg2    = reinterpret<f64>(0x3FD999999997FA04), // 3.999999999940941908e-01\n        Lg3    = reinterpret<f64>(0x3FD2492494229359), // 2.857142874366239149e-01\n        Lg4    = reinterpret<f64>(0x3FCC71C51D8E78AF), // 2.222219843214978396e-01\n        Lg5    = reinterpret<f64>(0x3FC7466496CB03DE), // 1.818357216161805012e-01\n        Lg6    = reinterpret<f64>(0x3FC39A09D078C69F), // 1.531383769920937332e-01\n        Lg7    = reinterpret<f64>(0x3FC2F112DF3E5244), // 1.479819860511658591e-01\n        Ox1p54 = reinterpret<f64>(0x4350000000000000); // 0x1p54\n\n      let u = reinterpret<u64>(x);\n      let hx = <u32>(u >> 32);\n      let k = 0;\n      if (hx < 0x00100000 || <bool>(hx >> 31)) {\n        if (u << 1 == 0) return -1 / (x * x);\n        if (hx >> 31)    return (x - x) / 0.0;\n        k -= 54;\n        x *= Ox1p54;\n        u = reinterpret<u64>(x);\n        hx = <u32>(u >> 32);\n      } else if (hx >= 0x7FF00000) {\n        return x;\n      } else if (hx == 0x3FF00000 && u << 32 == 0) {\n        return 0;\n      }\n      hx += 0x3FF00000 - 0x3FE6A09E;\n      k += (<i32>hx >> 20) - 0x3FF;\n      hx = (hx & 0x000FFFFF) + 0x3FE6A09E;\n      u = <u64>hx << 32 | (u & 0xFFFFFFFF);\n      x = reinterpret<f64>(u);\n      let f = x - 1.0;\n      let hfsq = 0.5 * f * f;\n      let s = f / (2.0 + f);\n      let z = s * s;\n      let w = z * z;\n      let t1 = w * (Lg2 + w * (Lg4 + w * Lg6));\n      let t2 = z * (Lg1 + w * (Lg3 + w * (Lg5 + w * Lg7)));\n      let r = t2 + t1;\n      let dk = <f64>k;\n      return s * (hfsq + r) + dk * ln2_lo - hfsq + f + dk * ln2_hi;\n    }\n  }\n\n  export function log10(x: f64): f64 { // see: musl/src/math/log10.c and SUN COPYRIGHT NOTICE above\n    const\n      ivln10hi  = reinterpret<f64>(0x3FDBCB7B15200000), // 4.34294481878168880939e-01\n      ivln10lo  = reinterpret<f64>(0x3DBB9438CA9AADD5), // 2.50829467116452752298e-11\n      log10_2hi = reinterpret<f64>(0x3FD34413509F6000), // 3.01029995663611771306e-01\n      log10_2lo = reinterpret<f64>(0x3D59FEF311F12B36), // 3.69423907715893078616e-13\n      Lg1       = reinterpret<f64>(0x3FE5555555555593), // 6.666666666666735130e-01\n      Lg2       = reinterpret<f64>(0x3FD999999997FA04), // 3.999999999940941908e-01\n      Lg3       = reinterpret<f64>(0x3FD2492494229359), // 2.857142874366239149e-01\n      Lg4       = reinterpret<f64>(0x3FCC71C51D8E78AF), // 2.222219843214978396e-01\n      Lg5       = reinterpret<f64>(0x3FC7466496CB03DE), // 1.818357216161805012e-01\n      Lg6       = reinterpret<f64>(0x3FC39A09D078C69F), // 1.531383769920937332e-01\n      Lg7       = reinterpret<f64>(0x3FC2F112DF3E5244), // 1.479819860511658591e-01\n      Ox1p54    = reinterpret<f64>(0x4350000000000000); // 0x1p54\n\n    var u = reinterpret<u64>(x);\n    var hx = <u32>(u >> 32);\n    var k = 0;\n    if (hx < 0x00100000 || <bool>(hx >> 31)) {\n      if (u << 1 == 0) return -1 / (x * x);\n      if (hx >> 31) return (x - x) / 0.0;\n      k -= 54;\n      x *= Ox1p54;\n      u = reinterpret<u64>(x);\n      hx = <u32>(u >> 32);\n    } else if (hx >= 0x7FF00000) {\n      return x;\n    } else if (hx == 0x3FF00000 && u << 32 == 0) {\n      return 0;\n    }\n    hx += 0x3FF00000 - 0x3FE6A09E;\n    k += <i32>(hx >> 20) - 0x3FF;\n    hx = (hx & 0x000FFFFF) + 0x3FE6A09E;\n    u = <u64>hx << 32 | (u & 0xFFFFFFFF);\n    x = reinterpret<f64>(u);\n    var f = x - 1.0;\n    var hfsq = 0.5 * f * f;\n    var s = f / (2.0 + f);\n    var z = s * s;\n    var w = z * z;\n    var t1 = w * (Lg2 + w * (Lg4 + w * Lg6));\n    var t2 = z * (Lg1 + w * (Lg3 + w * (Lg5 + w * Lg7)));\n    var r = t2 + t1;\n    var hi = f - hfsq;\n    u = reinterpret<u64>(hi);\n    u &= 0xFFFFFFFF00000000;\n    hi = reinterpret<f64>(u);\n    var lo = f - hi - hfsq + s * (hfsq + r);\n    var val_hi = hi * ivln10hi;\n    var dk = <f64>k;\n    var y = dk * log10_2hi;\n    var val_lo = dk * log10_2lo + (lo + hi) * ivln10lo + lo * ivln10hi;\n    w = y + val_hi;\n    val_lo += (y - w) + val_hi;\n    return val_lo + w;\n  }\n\n  export function log1p(x: f64): f64 { // see: musl/src/math/log1p.c and SUN COPYRIGHT NOTICE above\n    const\n      ln2_hi = reinterpret<f64>(0x3FE62E42FEE00000), // 6.93147180369123816490e-01\n      ln2_lo = reinterpret<f64>(0x3DEA39EF35793C76), // 1.90821492927058770002e-10\n      Lg1    = reinterpret<f64>(0x3FE5555555555593), // 6.666666666666735130e-01\n      Lg2    = reinterpret<f64>(0x3FD999999997FA04), // 3.999999999940941908e-01\n      Lg3    = reinterpret<f64>(0x3FD2492494229359), // 2.857142874366239149e-01\n      Lg4    = reinterpret<f64>(0x3FCC71C51D8E78AF), // 2.222219843214978396e-01\n      Lg5    = reinterpret<f64>(0x3FC7466496CB03DE), // 1.818357216161805012e-01\n      Lg6    = reinterpret<f64>(0x3FC39A09D078C69F), // 1.531383769920937332e-01\n      Lg7    = reinterpret<f64>(0x3FC2F112DF3E5244); // 1.479819860511658591e-01\n\n    var u = reinterpret<u64>(x);\n    var hx = <u32>(u >> 32);\n    var k = 1;\n    var c = 0.0, f = 0.0;\n    if (hx < 0x3FDA827A || <bool>(hx >> 31)) {\n      if (hx >= 0xBFF00000) {\n        if (x == -1) return x / 0.0;\n        return (x - x) / 0.0;\n      }\n      if (hx << 1 < 0x3CA00000 << 1) return x;\n      if (hx <= 0xBFD2BEC4) {\n        k = 0;\n        c = 0;\n        f = x;\n      }\n    } else if (hx >= 0x7FF00000) return x;\n    if (k) {\n      u = reinterpret<u64>(1 + x);\n      let hu = <u32>(u >> 32);\n      hu += 0x3FF00000 - 0x3FE6A09E;\n      k = <i32>(hu >> 20) - 0x3FF;\n      if (k < 54) {\n        let uf = reinterpret<f64>(u);\n        c = k >= 2 ? 1 - (uf - x) : x - (uf - 1);\n        c /= uf;\n      } else c = 0;\n      hu = (hu & 0x000FFFFF) + 0x3FE6A09E;\n      u = <u64>hu << 32 | (u & 0xFFFFFFFF);\n      f = reinterpret<f64>(u) - 1;\n    }\n    var hfsq = 0.5 * f * f;\n    var s = f / (2.0 + f);\n    var z = s * s;\n    var w = z * z;\n    var t1 = w * (Lg2 + w * (Lg4 + w * Lg6));\n    var t2 = z * (Lg1 + w * (Lg3 + w * (Lg5 + w * Lg7)));\n    var r = t2 + t1;\n    var dk = <f64>k;\n    return s * (hfsq + r) + (dk * ln2_lo + c) - hfsq + f + dk * ln2_hi;\n  }\n\n  export function log2(x: f64): f64 { // see: musl/src/math/log2.c and SUN COPYRIGHT NOTICE above\n    if (ASC_SHRINK_LEVEL < 1) {\n      return log2_lut(x);\n    } else {\n      const\n        ivln2hi = reinterpret<f64>(0x3FF7154765200000), // 1.44269504072144627571e+00\n        ivln2lo = reinterpret<f64>(0x3DE705FC2EEFA200), // 1.67517131648865118353e-10\n        Lg1     = reinterpret<f64>(0x3FE5555555555593), // 6.666666666666735130e-01\n        Lg2     = reinterpret<f64>(0x3FD999999997FA04), // 3.999999999940941908e-01\n        Lg3     = reinterpret<f64>(0x3FD2492494229359), // 2.857142874366239149e-01\n        Lg4     = reinterpret<f64>(0x3FCC71C51D8E78AF), // 2.222219843214978396e-01\n        Lg5     = reinterpret<f64>(0x3FC7466496CB03DE), // 1.818357216161805012e-01\n        Lg6     = reinterpret<f64>(0x3FC39A09D078C69F), // 1.531383769920937332e-01\n        Lg7     = reinterpret<f64>(0x3FC2F112DF3E5244), // 1.479819860511658591e-01\n        Ox1p54  = reinterpret<f64>(0x4350000000000000); // 1p54\n\n      let u = reinterpret<u64>(x);\n      let hx = <u32>(u >> 32);\n      let k = 0;\n      if (hx < 0x00100000 || <bool>(hx >> 31)) {\n        if (u << 1 == 0) return -1 / (x * x);\n        if (hx >> 31) return (x - x) / 0.0;\n        k -= 54;\n        x *= Ox1p54;\n        u = reinterpret<u64>(x);\n        hx = <u32>(u >> 32);\n      } else if (hx >= 0x7FF00000) {\n        return x;\n      } else if (hx == 0x3FF00000 && u << 32 == 0) {\n        return 0;\n      }\n      hx += 0x3FF00000 - 0x3FE6A09E;\n      k += <i32>(hx >> 20) - 0x3FF;\n      hx = (hx & 0x000FFFFF) + 0x3FE6A09E;\n      u = <u64>hx << 32 | (u & 0xFFFFFFFF);\n      x = reinterpret<f64>(u);\n      let f = x - 1.0;\n      let hfsq = 0.5 * f * f;\n      let s = f / (2.0 + f);\n      let z = s * s;\n      let w = z * z;\n      let t1 = w * (Lg2 + w * (Lg4 + w * Lg6));\n      let t2 = z * (Lg1 + w * (Lg3 + w * (Lg5 + w * Lg7)));\n      let r = t2 + t1;\n      let hi = f - hfsq;\n      u = reinterpret<u64>(hi);\n      u &= 0xFFFFFFFF00000000;\n      hi = reinterpret<f64>(u);\n      let lo = f - hi - hfsq + s * (hfsq + r);\n      let val_hi = hi * ivln2hi;\n      let val_lo = (lo + hi) * ivln2lo + lo * ivln2hi;\n      let y = <f64>k;\n      w = y + val_hi;\n      val_lo += (y - w) + val_hi;\n      val_hi = w;\n      return val_lo + val_hi;\n    }\n  }\n\n  // @ts-ignore: decorator\n  @inline\n  export function max(value1: f64, value2: f64): f64 {\n    return builtin_max<f64>(value1, value2);\n  }\n\n  // @ts-ignore: decorator\n  @inline\n  export function min(value1: f64, value2: f64): f64 {\n    return builtin_min<f64>(value1, value2);\n  }\n\n  export function pow(x: f64, y: f64): f64 { // see: musl/src/math/pow.c and SUN COPYRIGHT NOTICE above\n    // TODO: remove this fast pathes after introduced own mid-end IR with \"stdlib call simplify\" transforms\n    if (builtin_abs<f64>(y) <= 2) {\n      if (y == 2.0) return x * x;\n      if (y == 0.5) {\n        return select<f64>(\n          builtin_abs<f64>(builtin_sqrt<f64>(x)),\n          Infinity,\n          x != -Infinity\n        );\n      }\n      if (y == -1.0) return 1 / x;\n      if (y == 1.0) return x;\n      if (y == 0.0) return 1.0;\n    }\n    if (ASC_SHRINK_LEVEL < 1) {\n      return pow_lut(x, y);\n    } else {\n      const\n        dp_h1   = reinterpret<f64>(0x3FE2B80340000000), //  5.84962487220764160156e-01\n        dp_l1   = reinterpret<f64>(0x3E4CFDEB43CFD006), //  1.35003920212974897128e-08\n        two53   = reinterpret<f64>(0x4340000000000000), //  9007199254740992.0\n        huge    = reinterpret<f64>(0x7E37E43C8800759C), //  1e+300\n        tiny    = reinterpret<f64>(0x01A56E1FC2F8F359), //  1e-300\n        L1      = reinterpret<f64>(0x3FE3333333333303), //  5.99999999999994648725e-01\n        L2      = reinterpret<f64>(0x3FDB6DB6DB6FABFF), //  4.28571428578550184252e-01\n        L3      = reinterpret<f64>(0x3FD55555518F264D), //  3.33333329818377432918e-01\n        L4      = reinterpret<f64>(0x3FD17460A91D4101), //  2.72728123808534006489e-01\n        L5      = reinterpret<f64>(0x3FCD864A93C9DB65), //  2.30660745775561754067e-01\n        L6      = reinterpret<f64>(0x3FCA7E284A454EEF), //  2.06975017800338417784e-01\n        P1      = reinterpret<f64>(0x3FC555555555553E), //  1.66666666666666019037e-01\n        P2      = reinterpret<f64>(0xBF66C16C16BEBD93), // -2.77777777770155933842e-03\n        P3      = reinterpret<f64>(0x3F11566AAF25DE2C), //  6.61375632143793436117e-05\n        P4      = reinterpret<f64>(0xBEBBBD41C5D26BF1), // -1.65339022054652515390e-06\n        P5      = reinterpret<f64>(0x3E66376972BEA4D0), //  4.13813679705723846039e-08\n        lg2     = reinterpret<f64>(0x3FE62E42FEFA39EF), //  6.93147180559945286227e-01\n        lg2_h   = reinterpret<f64>(0x3FE62E4300000000), //  6.93147182464599609375e-01\n        lg2_l   = reinterpret<f64>(0xBE205C610CA86C39), // -1.90465429995776804525e-09\n        ovt     = reinterpret<f64>(0x3C971547652B82FE), //  8.0085662595372944372e-017\n        cp      = reinterpret<f64>(0x3FEEC709DC3A03FD), //  9.61796693925975554329e-01\n        cp_h    = reinterpret<f64>(0x3FEEC709E0000000), //  9.61796700954437255859e-01\n        cp_l    = reinterpret<f64>(0xBE3E2FE0145B01F5), // -7.02846165095275826516e-09\n        ivln2   = reinterpret<f64>(0x3FF71547652B82FE), //  1.44269504088896338700e+00\n        ivln2_h = reinterpret<f64>(0x3FF7154760000000), //  1.44269502162933349609e+00\n        ivln2_l = reinterpret<f64>(0x3E54AE0BF85DDF44), //  1.92596299112661746887e-08\n        inv3    = reinterpret<f64>(0x3FD5555555555555); //  0.3333333333333333333333\n\n      let u_ = reinterpret<u64>(x);\n      let hx = <i32>(u_ >> 32);\n      let lx = <u32>u_;\n      u_ = reinterpret<u64>(y);\n      let hy = <i32>(u_ >> 32);\n      let ly = <u32>u_;\n      let ix = hx & 0x7FFFFFFF;\n      let iy = hy & 0x7FFFFFFF;\n      if ((iy | ly) == 0) return 1.0; // x**0 = 1, even if x is NaN\n      // if (hx == 0x3FF00000 && lx == 0) return 1.0; // C: 1**y = 1, even if y is NaN, JS: NaN\n      if ( // NaN if either arg is NaN\n        ix > 0x7FF00000 || (ix == 0x7FF00000 && lx != 0) ||\n        iy > 0x7FF00000 || (iy == 0x7FF00000 && ly != 0)\n      ) return x + y;\n      let yisint = 0, k: i32;\n      if (hx < 0) {\n        if (iy >= 0x43400000) yisint = 2;\n        else if (iy >= 0x3FF00000) {\n          k = (iy >> 20) - 0x3FF;\n          let offset = select<u32>(52, 20, k > 20) - k;\n          let Ly = select<u32>(ly, iy, k > 20);\n          let jj = Ly >> offset;\n          if ((jj << offset) == Ly) yisint = 2 - (jj & 1);\n        }\n      }\n      if (ly == 0) {\n        if (iy == 0x7FF00000) { // y is +-inf\n          if (((ix - 0x3FF00000) | lx) == 0) return NaN; // C: (-1)**+-inf is 1, JS: NaN\n          else if (ix >= 0x3FF00000) return hy >= 0 ? y : 0.0; // (|x|>1)**+-inf = inf,0\n          else return hy >= 0 ? 0.0 : -y; // (|x|<1)**+-inf = 0,inf\n        }\n        if (iy == 0x3FF00000) {\n          if (hy >= 0) return x;\n          return 1 / x;\n        }\n        if (hy == 0x40000000) return x * x;\n        if (hy == 0x3FE00000) {\n          if (hx >= 0) return builtin_sqrt(x);\n        }\n      }\n      let ax = builtin_abs<f64>(x), z: f64;\n      if (lx == 0) {\n        if (ix == 0 || ix == 0x7FF00000 || ix == 0x3FF00000) {\n          z = ax;\n          if (hy < 0) z = 1.0 / z;\n          if (hx < 0) {\n            if (((ix - 0x3FF00000) | yisint) == 0) {\n              let d = z - z;\n              z = d / d;\n            } else if (yisint == 1) z = -z;\n          }\n          return z;\n        }\n      }\n      let s = 1.0;\n      if (hx < 0) {\n        if (yisint == 0) {\n          let d = x - x;\n          return d / d;\n        }\n        if (yisint == 1) s = -1.0;\n      }\n      let t1: f64, t2: f64, p_h: f64, p_l: f64, r: f64, t: f64, u: f64, v: f64, w: f64;\n      let j: i32, n: i32;\n      if (iy > 0x41E00000) {\n        if (iy > 0x43F00000) {\n          if (ix <= 0x3FEFFFFF) return hy < 0 ? huge * huge : tiny * tiny;\n          if (ix >= 0x3FF00000) return hy > 0 ? huge * huge : tiny * tiny;\n        }\n        if (ix < 0x3FEFFFFF) return hy < 0 ? s * huge * huge : s * tiny * tiny;\n        if (ix > 0x3FF00000) return hy > 0 ? s * huge * huge : s * tiny * tiny;\n        t = ax - 1.0;\n        w = (t * t) * (0.5 - t * (inv3 - t * 0.25));\n        u = ivln2_h * t;\n        v = t * ivln2_l - w * ivln2;\n        t1 = u + v;\n        t1 = reinterpret<f64>(reinterpret<u64>(t1) & 0xFFFFFFFF00000000);\n        t2 = v - (t1 - u);\n      } else {\n        let ss: f64, s2: f64, s_h: f64, s_l: f64, t_h: f64, t_l: f64;\n        n = 0;\n        if (ix < 0x00100000) {\n          ax *= two53;\n          n -= 53;\n          ix = <u32>(reinterpret<u64>(ax) >> 32);\n        }\n        n += (ix >> 20) - 0x3FF;\n        j = ix & 0x000FFFFF;\n        ix = j | 0x3FF00000;\n        if (j <= 0x3988E) k = 0;\n        else if (j < 0xBB67A) k = 1;\n        else {\n          k = 0;\n          n += 1;\n          ix -= 0x00100000;\n        }\n        ax = reinterpret<f64>(reinterpret<u64>(ax) & 0xFFFFFFFF | (<u64>ix << 32));\n        let bp = select<f64>(1.5, 1.0, k); // k ? 1.5 : 1.0\n        u = ax - bp;\n        v = 1.0 / (ax + bp);\n        ss = u * v;\n        s_h = ss;\n        s_h = reinterpret<f64>(reinterpret<u64>(s_h) & 0xFFFFFFFF00000000);\n        t_h = reinterpret<f64>(<u64>(((ix >> 1) | 0x20000000) + 0x00080000 + (k << 18)) << 32);\n        t_l = ax - (t_h - bp);\n        s_l = v * ((u - s_h * t_h) - s_h * t_l);\n        s2 = ss * ss;\n        r = s2 * s2 * (L1 + s2 * (L2 + s2 * (L3 + s2 * (L4 + s2 * (L5 + s2 * L6)))));\n        r += s_l * (s_h + ss);\n        s2 = s_h * s_h;\n        t_h = 3.0 + s2 + r;\n        t_h = reinterpret<f64>(reinterpret<u64>(t_h) & 0xFFFFFFFF00000000);\n        t_l = r - ((t_h - 3.0) - s2);\n        u = s_h * t_h;\n        v = s_l * t_h + t_l * ss;\n        p_h = u + v;\n        p_h = reinterpret<f64>(reinterpret<u64>(p_h) & 0xFFFFFFFF00000000);\n        p_l = v - (p_h - u);\n        let z_h = cp_h * p_h;\n        let dp_l = select<f64>(dp_l1, 0.0, k);\n        let z_l = cp_l * p_h + p_l * cp + dp_l;\n        t = <f64>n;\n        let dp_h = select<f64>(dp_h1, 0.0, k);\n        t1 = ((z_h + z_l) + dp_h) + t;\n        t1 = reinterpret<f64>(reinterpret<u64>(t1) & 0xFFFFFFFF00000000);\n        t2 = z_l - (((t1 - t) - dp_h) - z_h);\n      }\n      let y1 = y;\n      y1 = reinterpret<f64>(reinterpret<u64>(y1) & 0xFFFFFFFF00000000);\n      p_l = (y - y1) * t1 + y * t2;\n      p_h = y1 * t1;\n      z = p_l + p_h;\n      u_ = reinterpret<u64>(z);\n      j = <u32>(u_ >> 32);\n      let i = <i32>u_;\n      if (j >= 0x40900000) {\n        if (((j - 0x40900000) | i) != 0) return s * huge * huge;\n        if (p_l + ovt > z - p_h) return s * huge * huge;\n      } else if ((j & 0x7FFFFFFF) >= 0x4090CC00) {\n        if (((j - 0xC090CC00) | i) != 0) return s * tiny * tiny;\n        if (p_l <= z - p_h) return s * tiny * tiny;\n      }\n      i = j & 0x7FFFFFFF;\n      k = (i >> 20) - 0x3FF;\n      n = 0;\n      if (i > 0x3FE00000) {\n        n = j + (0x00100000 >> (k + 1));\n        k = ((n & 0x7FFFFFFF) >> 20) - 0x3FF;\n        t = 0.0;\n        t = reinterpret<f64>(<u64>(n & ~(0x000FFFFF >> k)) << 32);\n        n = ((n & 0x000FFFFF) | 0x00100000) >> (20 - k);\n        if (j < 0) n = -n;\n        p_h -= t;\n      }\n      t = p_l + p_h;\n      t = reinterpret<f64>(reinterpret<u64>(t) & 0xFFFFFFFF00000000);\n      u = t * lg2_h;\n      v = (p_l - (t - p_h)) * lg2 + t * lg2_l;\n      z = u + v;\n      w = v - (z - u);\n      t = z * z;\n      t1 = z - t * (P1 + t * (P2 + t * (P3 + t * (P4 + t * P5))));\n      r = (z * t1) / (t1 - 2.0) - (w + z * w);\n      z = 1.0 - (r - z);\n      j = <u32>(reinterpret<u64>(z) >> 32);\n      j += n << 20;\n      if ((j >> 20) <= 0) z = scalbn(z, n);\n      else z = reinterpret<f64>(reinterpret<u64>(z) & 0xFFFFFFFF | (<u64>j << 32));\n      return s * z;\n    }\n  }\n\n  export function seedRandom(value: i64): void {\n    // Instead zero seed use golden ratio:\n    // phi = (1 + sqrt(5)) / 2\n    // trunc(2^64 / phi) = 0x9e3779b97f4a7c15\n    if (value == 0) value = 0x9e3779b97f4a7c15;\n    random_state0_64 = murmurHash3(value);\n    random_state1_64 = murmurHash3(~random_state0_64);\n    random_state0_32 = splitMix32(<u32>value);\n    random_state1_32 = splitMix32(random_state0_32);\n    random_seeded = true;\n  }\n\n  export function random(): f64 { // see: v8/src/base/utils/random-number-generator.cc\n    if (!random_seeded) seedRandom(reinterpret<i64>(seed()));\n    var s1 = random_state0_64;\n    var s0 = random_state1_64;\n    random_state0_64 = s0;\n    s1 ^= s1 << 23;\n    s1 ^= s1 >> 17;\n    s1 ^= s0;\n    s1 ^= s0 >> 26;\n    random_state1_64 = s1;\n    var r = (s0 >> 12) | 0x3FF0000000000000;\n    return reinterpret<f64>(r) - 1;\n  }\n\n  // @ts-ignore: decorator\n  @inline\n  export function round(x: f64): f64 {\n    let roundUp = builtin_ceil<f64>(x);\n    return select<f64>(roundUp, roundUp - 1.0, roundUp - 0.5 <= x);\n  }\n\n  // @ts-ignore: decorator\n  @inline\n  export function sign(x: f64): f64 {\n    if (ASC_SHRINK_LEVEL > 0) {\n      return builtin_abs(x) > 0 ? builtin_copysign<f64>(1, x) : x;\n    } else {\n      return x > 0 ? 1 : x < 0 ? -1 : x;\n    }\n  }\n\n  // @ts-ignore: decorator\n  @inline\n  export function signbit(x: f64): bool {\n    return <bool>(reinterpret<u64>(x) >>> 63);\n  }\n\n  export function sin(x: f64): f64 { // see: musl/src/math/sin.c\n    var u  = reinterpret<u64>(x);\n    var ix = <u32>(u >> 32);\n    var sign = ix >> 31;\n\n    ix &= 0x7FFFFFFF;\n\n    // |x| ~< pi/4\n    if (ix <= 0x3FE921FB) {\n      if (ix < 0x3E500000) { // |x| < 2**-26\n        return x;\n      }\n      return sin_kern(x, 0.0, 0);\n    }\n\n    // sin(Inf or NaN) is NaN\n    if (ix >= 0x7FF00000) return x - x;\n\n    // argument reduction needed\n    var n  = rempio2(x, u, sign);\n    var y0 = rempio2_y0;\n    var y1 = rempio2_y1;\n\n    x = n & 1 ? cos_kern(y0, y1) : sin_kern(y0, y1, 1);\n    return n & 2 ? -x : x;\n  }\n\n  export function sinh(x: f64): f64 { // see: musl/src/math/sinh.c\n    var u = reinterpret<u64>(x) & 0x7FFFFFFFFFFFFFFF;\n    var a = reinterpret<f64>(u);\n    var w = <u32>(u >> 32);\n    var h = builtin_copysign(0.5, x);\n    if (w < 0x40862E42) {\n      let t = expm1(a);\n      if (w < 0x3FF00000) {\n        if (w < 0x3FF00000 - (26 << 20)) return x;\n        return h * (2 * t - t * t / (t + 1));\n      }\n      return h * (t + t / (t + 1));\n    }\n    return expo2(a, 2 * h);\n  }\n\n  // @ts-ignore: decorator\n  @inline\n  export function sqrt(x: f64): f64 {\n    return builtin_sqrt<f64>(x);\n  }\n\n  export function tan(x: f64): f64 { // see: musl/src/math/tan.c\n    var u = reinterpret<u64>(x);\n    var ix = <i32>(u >> 32);\n    var sign = ix >>> 31;\n\n    ix &= 0x7FFFFFFF;\n\n    // |x| ~< pi/4\n    if (ix <= 0x3FE921FB) {\n      if (ix < 0x3E400000) { // |x| < 2**-27\n        return x;\n      }\n      return tan_kern(x, 0.0, 1);\n    }\n\n    // tan(Inf or NaN) is NaN\n    if (ix >= 0x7FF00000) return x - x;\n\n    var n = rempio2(x, u, sign);\n    return tan_kern(rempio2_y0, rempio2_y1, 1 - ((n & 1) << 1));\n  }\n\n  export function tanh(x: f64): f64 { // see: musl/src/math/tanh.c\n    var u = reinterpret<u64>(x);\n    u &= 0x7FFFFFFFFFFFFFFF;\n    var y = reinterpret<f64>(u);\n    var w = <u32>(u >> 32);\n    var t: f64;\n    if (w > 0x3FE193EA) {\n      if (w > 0x40340000) {\n        t = 1 - 0 / y;\n      } else {\n        t = expm1(2 * y);\n        t = 1 - 2 / (t + 2);\n      }\n    } else if (w > 0x3FD058AE) {\n      t = expm1(2 * y);\n      t = t / (t + 2);\n    } else if (w >= 0x00100000) {\n      t = expm1(-2 * y);\n      t = -t / (t + 2);\n    } else t = y;\n    return builtin_copysign<f64>(t, x);\n  }\n\n  // @ts-ignore: decorator\n  @inline\n  export function trunc(x: f64): f64 {\n    return builtin_trunc<f64>(x);\n  }\n\n  export function scalbn(x: f64, n: i32): f64 { // see: https://git.musl-libc.org/cgit/musl/tree/src/math/scalbn.c\n    const\n      Ox1p53    = reinterpret<f64>(0x4340000000000000),\n      Ox1p1023  = reinterpret<f64>(0x7FE0000000000000),\n      Ox1p_1022 = reinterpret<f64>(0x0010000000000000);\n\n    var y = x;\n    if (n > 1023) {\n      y *= Ox1p1023;\n      n -= 1023;\n      if (n > 1023) {\n        y *= Ox1p1023;\n        n = builtin_min<i32>(n - 1023, 1023);\n      }\n    } else if (n < -1022) {\n      // make sure final n < -53 to avoid double\n      // rounding in the subnormal range\n      y *= Ox1p_1022 * Ox1p53;\n      n += 1022 - 53;\n      if (n < -1022) {\n        y *= Ox1p_1022 * Ox1p53;\n        n = builtin_max<i32>(n + 1022 - 53, -1022);\n      }\n    }\n    return y * reinterpret<f64>(<u64>(0x3FF + n) << 52);\n  }\n\n  export function mod(x: f64, y: f64): f64 { // see: musl/src/math/fmod.c\n    if (builtin_abs<f64>(y) == 1.0) {\n      // x % 1, x % -1  ==>  sign(x) * abs(x - 1.0 * trunc(x / 1.0))\n      // TODO: move this rule to compiler's optimization pass.\n      // It could be apply for any x % C_pot, where \"C_pot\" is pow of two const.\n      return builtin_copysign<f64>(x - builtin_trunc<f64>(x), x);\n    }\n    var ux = reinterpret<u64>(x);\n    var uy = reinterpret<u64>(y);\n    var ex = <i64>(ux >> 52 & 0x7FF);\n    var ey = <i64>(uy >> 52 & 0x7FF);\n    var sx = ux >> 63;\n    var uy1 = uy << 1;\n    if (uy1 == 0 || ex == 0x7FF || isNaN<f64>(y)) {\n      let m = x * y;\n      return m / m;\n    }\n    var ux1 = ux << 1;\n    if (ux1 <= uy1) {\n      return x * f64(ux1 != uy1);\n    }\n    if (!ex) {\n      ex -= builtin_clz<i64>(ux << 12);\n      ux <<= 1 - ex;\n    } else {\n      ux &= <u64>-1 >> 12;\n      ux |= 1 << 52;\n    }\n    if (!ey) {\n      ey -= builtin_clz<i64>(uy << 12);\n      uy <<= 1 - ey;\n    } else {\n      uy &= <u64>-1 >> 12;\n      uy |= 1 << 52;\n    }\n    while (ex > ey) {\n      if (ux >= uy) {\n        if (ux == uy) return 0 * x;\n        ux -= uy;\n      }\n      ux <<= 1;\n      --ex;\n    }\n    if (ux >= uy) {\n      if (ux == uy) return 0 * x;\n      ux -= uy;\n    }\n    // for (; !(ux >> 52); ux <<= 1) --ex;\n    var shift = builtin_clz<i64>(ux << 11);\n    ex -= shift;\n    ux <<= shift;\n    if (ex > 0) {\n      ux -= 1 << 52;\n      ux |= ex << 52;\n    } else {\n      ux >>= -ex + 1;\n    }\n    return reinterpret<f64>(ux | (sx << 63));\n  }\n\n  export function rem(x: f64, y: f64): f64 { // see: musl/src/math/remquo.c\n    var ux = reinterpret<u64>(x);\n    var uy = reinterpret<u64>(y);\n    var ex = <i64>(ux >> 52 & 0x7FF);\n    var ey = <i64>(uy >> 52 & 0x7FF);\n    var sx = <i32>(ux >> 63);\n    if (uy << 1 == 0 || ex == 0x7FF || isNaN(y)) {\n      let m = x * y;\n      return m / m;\n    }\n    if (ux << 1 == 0) return x;\n    var uxi = ux;\n    if (!ex) {\n      ex -= builtin_clz<i64>(uxi << 12);\n      uxi <<= 1 - ex;\n    } else {\n      uxi &= <u64>-1 >> 12;\n      uxi |= 1 << 52;\n    }\n    if (!ey) {\n      ey -= builtin_clz<i64>(uy << 12);\n      uy <<= 1 - ey;\n    } else {\n      uy &= <u64>-1 >> 12;\n      uy |= 1 << 52;\n    }\n    var q: u32 = 0;\n    do {\n      if (ex < ey) {\n        if (ex + 1 == ey) break; // goto end\n        return x;\n      }\n      while (ex > ey) {\n        if (uxi >= uy) {\n          uxi -= uy;\n          ++q;\n        }\n        uxi <<= 1;\n        q <<= 1;\n        --ex;\n      }\n      if (uxi >= uy) {\n        uxi -= uy;\n        ++q;\n      }\n      if (uxi == 0) ex = -60;\n      else {\n        let shift = builtin_clz<i64>(uxi << 11);\n        ex -= shift;\n        uxi <<= shift;\n      }\n      break;\n    } while (false);\n    // end:\n    if (ex > 0) {\n      uxi -= 1 << 52;\n      uxi |= ex << 52;\n    } else {\n      uxi >>= -ex + 1;\n    }\n    x = reinterpret<f64>(uxi);\n    y = builtin_abs<f64>(y);\n    var x2 = x + x;\n    if (ex == ey || (ex + 1 == ey && (x2 > y || (x2 == y && <bool>(q & 1))))) {\n      x -= y;\n      // ++q;\n    }\n    return sx ? -x : x;\n  }\n\n  export function sincos(x: f64): void { // see: musl/tree/src/math/sincos.c\n    var u = reinterpret<u64>(x);\n    var ix = <u32>(u >> 32);\n    var sign = ix >> 31;\n    ix &= 0x7FFFFFFF;\n\n    if (ix <= 0x3FE921FB) {  // |x| ~<= π/4\n      if (ix < 0x3E46A09E) { // if |x| < 2**-27 * sqrt(2)\n        sincos_sin = x;\n        sincos_cos = 1;\n        return;\n      }\n      sincos_sin = sin_kern(x, 0, 0);\n      sincos_cos = cos_kern(x, 0);\n      return;\n    }\n    // sin(Inf or NaN) is NaN\n    if (ix >= 0x7F800000) {\n      let xx = x - x;\n      sincos_sin = xx;\n      sincos_cos = xx;\n      return;\n    }\n    // general argument reduction needed\n    var n = rempio2(x, u, sign);\n    var y0 = rempio2_y0;\n    var y1 = rempio2_y1;\n    var s = sin_kern(y0, y1, 1);\n    var c = cos_kern(y0, y1);\n    var sin = s, cos = c;\n    if (n & 1) {\n      sin =  c;\n      cos = -s;\n    }\n    if (n & 2) {\n      sin = -sin;\n      cos = -cos;\n    }\n    sincos_sin = sin;\n    sincos_cos = cos;\n  }\n}\n\n// @ts-ignore: decorator\n@lazy var rempio2f_y: f64;\n\n// @ts-ignore: decorator\n@lazy @inline const PIO2F_TABLE = memory.data<u64>([\n  0xA2F9836E4E441529,\n  0xFC2757D1F534DDC0,\n  0xDB6295993C439041,\n  0xFE5163ABDEBBC561\n]);\n\nfunction Rf(z: f32): f32 { // Rational approximation of (asin(x)-x)/x^3\n  const                    // see: musl/src/math/asinf.c and SUN COPYRIGHT NOTICE above\n    pS0 = reinterpret<f32>(0x3E2AAA75), //  1.6666586697e-01f\n    pS1 = reinterpret<f32>(0xBD2F13BA), // -4.2743422091e-02f\n    pS2 = reinterpret<f32>(0xBC0DD36B), // -8.6563630030e-03f\n    qS1 = reinterpret<f32>(0xBF34E5AE); // -7.0662963390e-01f\n\n  var p = z * (pS0 + z * (pS1 + z * pS2));\n  var q: f32 = 1 + z * qS1;\n  return p / q;\n}\n\n// @ts-ignore: decorator\n@inline\nfunction expo2f(x: f32, sign: f32): f32 { // exp(x)/2 for x >= log(DBL_MAX)\n  const                                // see: musl/src/math/__expo2f.c\n    k    = <u32>235,\n    kln2 = reinterpret<f32>(0x4322E3BC); // 0x1.45c778p+7f\n  var scale = reinterpret<f32>(<u32>(0x7F + (k >> 1)) << 23);\n  // in directed rounding correct sign before rounding or overflow is important\n  return NativeMathf.exp(x - kln2) * (sign * scale) * scale;\n}\n\n// @ts-ignore: decorator\n@inline\nfunction pio2f_large_quot(x: f32, u: i32): i32 { // see: jdh8/metallic/blob/master/src/math/float/rem_pio2f.c\n  const coeff = reinterpret<f64>(0x3BF921FB54442D18); // π * 0x1p-65 = 8.51530395021638647334e-20\n\n  var offset = (u >> 23) - 152;\n  var shift  = <u64>(offset & 63);\n  var tblPtr = PIO2F_TABLE + (offset >> 6 << 3);\n\n  var b0 = load<u64>(tblPtr, 0 << 3);\n  var b1 = load<u64>(tblPtr, 1 << 3);\n  var lo: u64;\n\n  if (shift > 32) {\n    let b2 = load<u64>(tblPtr, 2 << 3);\n    lo  = b2 >> (96 - shift);\n    lo |= b1 << (shift - 32);\n  } else {\n    lo = b1 >> (32 - shift);\n  }\n\n  var hi = (b1 >> (64 - shift)) | (b0 << shift);\n  var mantissa: u64 = (u & 0x007FFFFF) | 0x00800000;\n  var product = mantissa * hi + (mantissa * lo >> 32);\n  var r: i64 = product << 2;\n  var q = <i32>((product >> 62) + (r >>> 63));\n  rempio2f_y = copysign<f64>(coeff, x) * <f64>r;\n  return q;\n}\n\n// @ts-ignore: decorator\n@inline\nfunction rempio2f(x: f32, u: u32, sign: i32): i32 { // see: jdh8/metallic/blob/master/src/math/float/rem_pio2f.c\n  const\n    pi2hi = reinterpret<f64>(0x3FF921FB50000000), // 1.57079631090164184570\n    pi2lo = reinterpret<f64>(0x3E5110B4611A6263), // 1.58932547735281966916e-8\n    _2_pi = reinterpret<f64>(0x3FE45F306DC9C883); // 0.63661977236758134308\n\n  if (u < 0x4DC90FDB) { // π * 0x1p28\n    let q = nearest(x * _2_pi);\n    rempio2f_y = x - q * pi2hi - q * pi2lo;\n    return <i32>q;\n  }\n\n  var q = pio2f_large_quot(x, u);\n  return select(-q, q, sign);\n}\n\n// |sin(x)/x - s(x)| < 2**-37.5 (~[-4.89e-12, 4.824e-12]).\n// @ts-ignore: decorator\n@inline\nfunction sin_kernf(x: f64): f32 { // see: musl/tree/src/math/__sindf.c\n  const\n    S1 = reinterpret<f64>(0xBFC5555554CBAC77), // -0x15555554cbac77.0p-55\n    S2 = reinterpret<f64>(0x3F811110896EFBB2), //  0x111110896efbb2.0p-59\n    S3 = reinterpret<f64>(0xBF2A00F9E2CAE774), // -0x1a00f9e2cae774.0p-65\n    S4 = reinterpret<f64>(0x3EC6CD878C3B46A7); //  0x16cd878c3b46a7.0p-71\n\n  var z = x * x;\n  var w = z * z;\n  var r = S3 + z * S4;\n  var s = z * x;\n  return <f32>((x + s * (S1 + z * S2)) + s * w * r);\n}\n\n// |cos(x) - c(x)| < 2**-34.1 (~[-5.37e-11, 5.295e-11]).\n// @ts-ignore: decorator\n@inline\nfunction cos_kernf(x: f64): f32 { // see: musl/tree/src/math/__cosdf.c\n  const\n    C0 = reinterpret<f64>(0xBFDFFFFFFD0C5E81), // -0x1ffffffd0c5e81.0p-54\n    C1 = reinterpret<f64>(0x3FA55553E1053A42), //  0x155553e1053a42.0p-57\n    C2 = reinterpret<f64>(0xBF56C087E80F1E27), // -0x16c087e80f1e27.0p-62\n    C3 = reinterpret<f64>(0x3EF99342E0EE5069); //  0x199342e0ee5069.0p-68\n\n  var z = x * x;\n  var w = z * z;\n  var r = C2 + z * C3;\n  return <f32>(((1 + z * C0) + w * C1) + (w * z) * r);\n}\n\n// |tan(x)/x - t(x)| < 2**-25.5 (~[-2e-08, 2e-08]).\n// @ts-ignore: decorator\n@inline\nfunction tan_kernf(x: f64, odd: i32): f32 { // see: musl/tree/src/math/__tandf.c\n  const\n    T0 = reinterpret<f64>(0x3FD5554D3418C99F), // 0x15554d3418c99f.0p-54\n    T1 = reinterpret<f64>(0x3FC112FD38999F72), // 0x1112fd38999f72.0p-55\n    T2 = reinterpret<f64>(0x3FAB54C91D865AFE), // 0x1b54c91d865afe.0p-57\n    T3 = reinterpret<f64>(0x3F991DF3908C33CE), // 0x191df3908c33ce.0p-58\n    T4 = reinterpret<f64>(0x3F685DADFCECF44E), // 0x185dadfcecf44e.0p-61\n    T5 = reinterpret<f64>(0x3F8362B9BF971BCD); // 0x1362b9bf971bcd.0p-59\n\n  var z = x * x;\n  var r = T4 + z * T5;\n  var t = T2 + z * T3;\n  var w = z * z;\n  var s = z * x;\n  var u = T0 + z * T1;\n\n  r = (x + s * u) + (s * w) * (t + w * r);\n  return <f32>(odd ? -1 / r : r);\n}\n\n// See: jdh8/metallic/src/math/float/log2f.c and jdh8/metallic/src/math/float/kernel/atanh.h\n// @ts-ignore: decorator\n@inline\nfunction log2f(x: f64): f64 {\n  const\n    log2e = reinterpret<f64>(0x3FF71547652B82FE), // 1.44269504088896340736\n    c0 = reinterpret<f64>(0x3FD555554FD9CAEF),    // 0.33333332822728226129\n    c1 = reinterpret<f64>(0x3FC999A7A8AF4132),    // 0.20000167595436263505\n    c2 = reinterpret<f64>(0x3FC2438D79437030),    // 0.14268654271188685375\n    c3 = reinterpret<f64>(0x3FBE2F663B001C97);    // 0.11791075649681414150\n\n  var i = reinterpret<i64>(x);\n  var exponent = (i - 0x3FE6A09E667F3BCD) >> 52;\n  x = reinterpret<f64>(i - (exponent << 52));\n  x = (x - 1) / (x + 1);\n  var xx = x * x;\n  var y = x + x * xx * (c0 + c1 * xx + (c2 + c3 * xx) * (xx * xx));\n  return (2 * log2e) * y + <f64>exponent;\n}\n\n// See: jdh8/metallic/src/math/float/exp2f.h and jdh8/metallic/blob/master/src/math/float/kernel/exp2f.h\n// @ts-ignore: decorator\n@inline\nfunction exp2f(x: f64): f64 {\n  const\n    c0 = reinterpret<f64>(0x3FE62E4302FCC24A), // 6.931471880289532425e-1\n    c1 = reinterpret<f64>(0x3FCEBFBE07D97B91), // 2.402265108421173406e-1\n    c2 = reinterpret<f64>(0x3FAC6AF6CCFC1A65), // 5.550357105498874537e-2\n    c3 = reinterpret<f64>(0x3F83B29E3CE9AEF6), // 9.618030771171497658e-3\n    c4 = reinterpret<f64>(0x3F55F0896145A89F), // 1.339086685300950937e-3\n    c5 = reinterpret<f64>(0x3F2446C81E384864); // 1.546973499989028719e-4\n\n  if (x < -1022) return 0;\n  if (x >= 1024) return Infinity;\n\n  var n = nearest(x);\n  x -= n;\n  var xx = x * x;\n  var y = 1 + x * (c0 + c1 * x + (c2 + c3 * x) * xx + (c4 + c5 * x) * (xx * xx));\n  return reinterpret<f64>(reinterpret<i64>(y) + (<i64>n << 52));\n}\n\nexport namespace NativeMathf {\n\n  // @ts-ignore: decorator\n  @lazy\n  export const E       = <f32>NativeMath.E;\n\n  // @ts-ignore: decorator\n  @lazy\n  export const LN2     = <f32>NativeMath.LN2;\n\n  // @ts-ignore: decorator\n  @lazy\n  export const LN10    = <f32>NativeMath.LN10;\n\n  // @ts-ignore: decorator\n  @lazy\n  export const LOG2E   = <f32>NativeMath.LOG2E;\n\n  // @ts-ignore: decorator\n  @lazy\n  export const LOG10E  = <f32>NativeMath.LOG10E;\n\n  // @ts-ignore: decorator\n  @lazy\n  export const PI      = <f32>NativeMath.PI;\n\n  // @ts-ignore: decorator\n  @lazy\n  export const SQRT1_2 = <f32>NativeMath.SQRT1_2;\n\n  // @ts-ignore: decorator\n  @lazy\n  export const SQRT2   = <f32>NativeMath.SQRT2;\n\n  // @ts-ignore: decorator\n  @lazy\n  export var sincos_sin: f32 = 0;\n\n  // @ts-ignore: decorator\n  @lazy\n  export var sincos_cos: f32 = 0;\n\n  // @ts-ignore: decorator\n  @inline\n  export function abs(x: f32): f32 {\n    return builtin_abs<f32>(x);\n  }\n\n  export function acos(x: f32): f32 { // see: musl/src/math/acosf.c and SUN COPYRIGHT NOTICE above\n    const\n      pio2_hi   = reinterpret<f32>(0x3FC90FDA), // 1.5707962513e+00f\n      pio2_lo   = reinterpret<f32>(0x33A22168), // 7.5497894159e-08f\n      Ox1p_120f = reinterpret<f32>(0x03800000); // 0x1p-120f\n\n    var hx = reinterpret<u32>(x);\n    var ix = hx & 0x7FFFFFFF;\n    if (ix >= 0x3F800000) {\n      if (ix == 0x3F800000) {\n        if (hx >> 31) return 2 * pio2_hi + Ox1p_120f;\n        return 0;\n      }\n      return 0 / (x - x);\n    }\n    if (ix < 0x3F000000) {\n      if (ix <= 0x32800000) return pio2_hi + Ox1p_120f;\n      return pio2_hi - (x - (pio2_lo - x * Rf(x * x)));\n    }\n    var z: f32, w: f32, s: f32;\n    if (hx >> 31) {\n      // z = (1 + x) * 0.5;\n      z = 0.5 + x * 0.5;\n      s = builtin_sqrt<f32>(z);\n      w = Rf(z) * s - pio2_lo;\n      return 2 * (pio2_hi - (s + w));\n    }\n    // z = (1 - x) * 0.5;\n    z = 0.5 - x * 0.5;\n    s = builtin_sqrt<f32>(z);\n    hx = reinterpret<u32>(s);\n    var df = reinterpret<f32>(hx & 0xFFFFF000);\n    var c = (z - df * df) / (s + df);\n    w = Rf(z) * s + c;\n    return 2 * (df + w);\n  }\n\n  export function acosh(x: f32): f32 { // see: musl/src/math/acoshf.c\n    const s = reinterpret<f32>(0x3F317218); // 0.693147180559945309417232121458176568f\n    var u = reinterpret<u32>(x);\n    var a = u & 0x7FFFFFFF;\n    if (a < 0x3F800000 + (1 << 23)) { // |x| < 2, invalid if x < 1\n      let xm1 = x - 1;\n      return log1p(xm1 + builtin_sqrt(xm1 * (xm1 + 2)));\n    }\n    if (u < 0x3F800000 + (12 << 23)) { // 2 <= x < 0x1p12\n      return log(2 * x - 1 / (x + builtin_sqrt<f32>(x * x - 1)));\n    }\n    // x >= 0x1p12 or x <= -2 or NaN\n    return log(x) + s;\n  }\n\n  export function asin(x: f32): f32 { // see: musl/src/math/asinf.c and SUN COPYRIGHT NOTICE above\n    const\n      pio2      = reinterpret<f32>(0x3FC90FDB), // 1.570796326794896558e+00f\n      Ox1p_120f = reinterpret<f32>(0x03800000); // 0x1p-120f\n\n    var sx = x;\n    var hx = reinterpret<u32>(x) & 0x7FFFFFFF;\n    if (hx >= 0x3F800000) {\n      if (hx == 0x3F800000) return x * pio2 + Ox1p_120f;\n      return 0 / (x - x);\n    }\n    if (hx < 0x3F000000) {\n      if (hx < 0x39800000 && hx >= 0x00800000) return x;\n      return x + x * Rf(x * x);\n    }\n    // var z: f32 = (1 - builtin_abs<f32>(x)) * 0.5;\n    var z: f32 = 0.5 - builtin_abs<f32>(x) * 0.5;\n    var s = builtin_sqrt<f64>(z); // sic\n    x = <f32>(pio2 - 2 * (s + s * Rf(z)));\n    return builtin_copysign(x, sx);\n  }\n\n  export function asinh(x: f32): f32 { // see: musl/src/math/asinhf.c\n    const c = reinterpret<f32>(0x3F317218); // 0.693147180559945309417232121458176568f\n    var u = reinterpret<u32>(x) & 0x7FFFFFFF;\n    var y = reinterpret<f32>(u);\n    if (u >= 0x3F800000 + (12 << 23)) y = log(y) + c;\n    else if (u >= 0x3F800000 + (1 << 23))  y =   log(2 * y + 1 / (builtin_sqrt<f32>(y * y + 1) + y));\n    else if (u >= 0x3F800000 - (12 << 23)) y = log1p(y + y * y / (builtin_sqrt<f32>(y * y + 1) + 1));\n    return builtin_copysign(y, x);\n  }\n\n  export function atan(x: f32): f32 { // see: musl/src/math/atanf.c and SUN COPYRIGHT NOTICE above\n    const\n      atanhi0   = reinterpret<f32>(0x3EED6338), //  4.6364760399e-01f\n      atanhi1   = reinterpret<f32>(0x3F490FDA), //  7.8539812565e-01f\n      atanhi2   = reinterpret<f32>(0x3F7B985E), //  9.8279368877e-01f\n      atanhi3   = reinterpret<f32>(0x3FC90FDA), //  1.5707962513e+00f\n      atanlo0   = reinterpret<f32>(0x31AC3769), //  5.0121582440e-09f\n      atanlo1   = reinterpret<f32>(0x33222168), //  3.7748947079e-08f\n      atanlo2   = reinterpret<f32>(0x33140FB4), //  3.4473217170e-08f\n      atanlo3   = reinterpret<f32>(0x33A22168), //  7.5497894159e-08f\n      aT0       = reinterpret<f32>(0x3EAAAAA9), //  3.3333328366e-01f\n      aT1       = reinterpret<f32>(0xBE4CCA98), // -1.9999158382e-01f\n      aT2       = reinterpret<f32>(0x3E11F50D), //  1.4253635705e-01f\n      aT3       = reinterpret<f32>(0xBDDA1247), // -1.0648017377e-01f\n      aT4       = reinterpret<f32>(0x3D7CAC25), //  6.1687607318e-02f\n      Ox1p_120f = reinterpret<f32>(0x03800000); //  0x1p-120f\n\n    var ix = reinterpret<u32>(x);\n    var sx = x;\n    ix &= 0x7FFFFFFF;\n    var z: f32;\n    if (ix >= 0x4C800000) {\n      if (isNaN(x)) return x;\n      z = atanhi3 + Ox1p_120f;\n      return builtin_copysign(z, sx);\n    }\n    var id: i32;\n    if (ix < 0x3EE00000) {\n      if (ix < 0x39800000) return x;\n      id = -1;\n    } else {\n      x = builtin_abs<f32>(x);\n      if (ix < 0x3F980000) {\n        if (ix < 0x3F300000) {\n          id = 0;\n          x = (2.0 * x - 1.0) / (2.0 + x);\n        } else {\n          id = 1;\n          x = (x - 1.0) / (x + 1.0);\n        }\n      } else {\n        if (ix < 0x401C0000) {\n          id = 2;\n          x = (x - 1.5) / (1.0 + 1.5 * x);\n        } else {\n          id = 3;\n          x = -1.0 / x;\n        }\n      }\n    }\n    z = x * x;\n    var w = z * z;\n    var s1 = z * (aT0 + w * (aT2 + w * aT4));\n    var s2 = w * (aT1 + w * aT3);\n    var s3 = x * (s1 + s2);\n    if (id < 0) return x - s3;\n    switch (id) {\n      case 0: { z = atanhi0 - ((s3 - atanlo0) - x); break; }\n      case 1: { z = atanhi1 - ((s3 - atanlo1) - x); break; }\n      case 2: { z = atanhi2 - ((s3 - atanlo2) - x); break; }\n      case 3: { z = atanhi3 - ((s3 - atanlo3) - x); break; }\n      default: unreachable();\n    }\n    return builtin_copysign(z, sx);\n  }\n\n  export function atanh(x: f32): f32 { // see: musl/src/math/atanhf.c\n    var u = reinterpret<u32>(x);\n    var y = builtin_abs(x);\n    if (u < 0x3F800000 - (1 << 23)) {\n      if (u >= 0x3F800000 - (32 << 23)) y = 0.5 * log1p(2 * y * (1.0 + y / (1 - y)));\n    } else y = 0.5 * log1p(2 * (y / (1 - y)));\n    return builtin_copysign(y, x);\n  }\n\n  export function atan2(y: f32, x: f32): f32 { // see: musl/src/math/atan2f.c and SUN COPYRIGHT NOTICE above\n    const\n      pi    = reinterpret<f32>(0x40490FDB), //  3.1415927410e+00f\n      pi_lo = reinterpret<f32>(0xB3BBBD2E); // -8.7422776573e-08f\n\n    if (isNaN(x) || isNaN(y)) return x + y;\n    var ix = reinterpret<u32>(x);\n    var iy = reinterpret<u32>(y);\n    if (ix == 0x3F800000) return atan(y);\n    var m = <u32>(((iy >> 31) & 1) | ((ix >> 30) & 2));\n    ix &= 0x7FFFFFFF;\n    iy &= 0x7FFFFFFF;\n    if (iy == 0) {\n      switch (m) {\n        case 0:\n        case 1: return  y;\n        case 2: return  pi;\n        case 3: return -pi;\n      }\n    }\n    if (ix == 0) return m & 1 ? -pi / 2 : pi / 2;\n    if (ix == 0x7F800000) {\n      if (iy == 0x7F800000) {\n        let t: f32 = m & 2 ? 3 * pi / 4 : pi / 4;\n        return m & 1 ? -t : t;\n      } else {\n        let t: f32 = m & 2 ? pi : 0.0;\n        return m & 1 ? -t : t;\n      }\n    }\n    if (ix + (26 << 23) < iy || iy == 0x7F800000) return m & 1 ? -pi / 2 : pi / 2;\n    var z: f32;\n    if ((m & 2) && iy + (26 << 23) < ix) z = 0.0;\n    else z = atan(builtin_abs<f32>(y / x));\n    switch (m) {\n      case 0: return  z;\n      case 1: return -z;\n      case 2: return pi - (z - pi_lo);\n      case 3: return (z - pi_lo) - pi;\n    }\n    unreachable();\n    return 0;\n  }\n\n  export function cbrt(x: f32): f32 { // see: musl/src/math/cbrtf.c and SUN COPYRIGHT NOTICE above\n    const\n      B1      = <u32>709958130,\n      B2      = <u32>642849266,\n      Ox1p24f = reinterpret<f32>(0x4B800000);\n\n    var u = reinterpret<u32>(x);\n    var hx = u & 0x7FFFFFFF;\n    if (hx >= 0x7F800000) return x + x;\n    if (hx < 0x00800000) {\n      if (hx == 0) return x;\n      u = reinterpret<u32>(x * Ox1p24f);\n      hx = u & 0x7FFFFFFF;\n      hx = hx / 3 + B2;\n    } else {\n      hx = hx / 3 + B1;\n    }\n    u &= 0x80000000;\n    u |= hx;\n    var t = <f64>reinterpret<f32>(u);\n    var r = t * t * t;\n    t = t * (<f64>x + x + r) / (x + r + r);\n    r = t * t * t;\n    t = t * (<f64>x + x + r) / (x + r + r);\n    return <f32>t;\n  }\n\n  // @ts-ignore: decorator\n  @inline\n  export function ceil(x: f32): f32 {\n    return builtin_ceil<f32>(x);\n  }\n\n  export function clz32(x: f32): f32 {\n    if (!isFinite(x)) return 32;\n    return <f32>builtin_clz(dtoi32(x));\n  }\n\n  export function cos(x: f32): f32 { // see: musl/src/math/cosf.c\n    const\n      c1pio2 = reinterpret<f64>(0x3FF921FB54442D18), // M_PI_2 * 1\n      c2pio2 = reinterpret<f64>(0x400921FB54442D18), // M_PI_2 * 2\n      c3pio2 = reinterpret<f64>(0x4012D97C7F3321D2), // M_PI_2 * 3\n      c4pio2 = reinterpret<f64>(0x401921FB54442D18); // M_PI_2 * 4\n\n    var ix = reinterpret<u32>(x);\n    var sign = ix >> 31;\n    ix &= 0x7FFFFFFF;\n\n    if (ix <= 0x3F490FDA) {  // |x| ~<= π/4\n      if (ix < 0x39800000) { // |x| < 2**-12\n        // raise inexact if x != 0\n        return 1;\n      }\n      return cos_kernf(x);\n    }\n\n    if (ASC_SHRINK_LEVEL < 1) {\n      if (ix <= 0x407B53D1) {  // |x| ~<= 5π/4\n        if (ix > 0x4016CBE3) { // |x|  ~> 3π/4\n          return -cos_kernf(sign ? x + c2pio2 : x - c2pio2);\n        } else {\n          return sign ? sin_kernf(x + c1pio2) : sin_kernf(c1pio2 - x);\n        }\n      }\n      if (ix <= 0x40E231D5) {  // |x| ~<= 9π/4\n        if (ix > 0x40AFEDDF) { // |x|  ~> 7π/4\n          return cos_kernf(sign ? x + c4pio2 : x - c4pio2);\n        } else {\n          return sign ? sin_kernf(-x - c3pio2) : sin_kernf(x - c3pio2);\n        }\n      }\n    }\n\n    // cos(Inf or NaN) is NaN\n    if (ix >= 0x7F800000) return x - x;\n\n    // general argument reduction needed\n    var n = rempio2f(x, ix, sign);\n    var y = rempio2f_y;\n\n    var t = n & 1 ? sin_kernf(y) : cos_kernf(y);\n    return (n + 1) & 2 ? -t : t;\n  }\n\n  export function cosh(x: f32): f32 { // see: musl/src/math/coshf.c\n    var u = reinterpret<u32>(x);\n    u &= 0x7FFFFFFF;\n    x = reinterpret<f32>(u);\n    if (u < 0x3F317217) {\n      if (u < 0x3F800000 - (12 << 23)) return 1;\n      let t = expm1(x);\n      // return 1 + t * t / (2 * (1 + t));\n      return 1 + t * t / (2 + 2 * t);\n    }\n    if (u < 0x42B17217) {\n      let t = exp(x);\n      // return 0.5 * (t + 1 / t);\n      return 0.5 * t + 0.5 / t;\n    }\n    return expo2f(x, 1);\n  }\n\n  // @ts-ignore: decorator\n  @inline\n  export function floor(x: f32): f32 {\n    return builtin_floor<f32>(x);\n  }\n\n  export function exp(x: f32): f32 { // see: musl/src/math/expf.c and SUN COPYRIGHT NOTICE above\n    if (ASC_SHRINK_LEVEL < 1) {\n      return expf_lut(x);\n    } else {\n      const\n        ln2hi    = reinterpret<f32>(0x3F317200), //  6.9314575195e-1f\n        ln2lo    = reinterpret<f32>(0x35BFBE8E), //  1.4286067653e-6f\n        invln2   = reinterpret<f32>(0x3FB8AA3B), //  1.4426950216e+0f\n        P1       = reinterpret<f32>(0x3E2AAA8F), //  1.6666625440e-1f\n        P2       = reinterpret<f32>(0xBB355215), // -2.7667332906e-3f\n        Ox1p127f = reinterpret<f32>(0x7F000000); //  0x1p+127f\n\n      let hx = reinterpret<u32>(x);\n      let sign_ = <i32>(hx >> 31);\n      hx &= 0x7FFFFFFF;\n      if (hx >= 0x42AEAC50) {\n        if (hx > 0x7F800000) return x; // NaN\n        if (hx >= 0x42B17218) {\n          if (!sign_) return x * Ox1p127f;\n          else if (hx >= 0x42CFF1B5) return 0;\n        }\n      }\n      let hi: f32, lo: f32;\n      let k: i32;\n      if (hx > 0x3EB17218) {\n        if (hx > 0x3F851592) {\n          k = <i32>(invln2 * x + builtin_copysign<f32>(0.5, x));\n        } else {\n          k = 1 - (sign_ << 1);\n        }\n        hi = x - <f32>k * ln2hi;\n        lo = <f32>k * ln2lo;\n        x = hi - lo;\n      } else if (hx > 0x39000000) {\n        k = 0;\n        hi = x;\n        lo = 0;\n      } else {\n        return 1 + x;\n      }\n      let xx = x * x;\n      let c = x - xx * (P1 + xx * P2);\n      let y: f32 = 1 + (x * c / (2 - c) - lo + hi);\n      return k == 0 ? y : scalbn(y, k);\n    }\n  }\n\n  export function exp2(x: f32): f32 {\n    return exp2f_lut(x);\n  }\n\n  export function expm1(x: f32): f32 { // see: musl/src/math/expm1f.c and SUN COPYRIGHT NOTICE above\n    const\n      ln2_hi   = reinterpret<f32>(0x3F317180), //  6.9313812256e-01f\n      ln2_lo   = reinterpret<f32>(0x3717F7D1), //  9.0580006145e-06f\n      invln2   = reinterpret<f32>(0x3FB8AA3B), //  1.4426950216e+00f\n      Q1       = reinterpret<f32>(0xBD088868), // -3.3333212137e-02f\n      Q2       = reinterpret<f32>(0x3ACF3010), //  1.5807170421e-03f\n      Ox1p127f = reinterpret<f32>(0x7F000000); //  0x1p+127f\n\n    var u = reinterpret<u32>(x);\n    var hx = u & 0x7FFFFFFF;\n    var sign_ = <i32>(u >> 31);\n    if (hx >= 0x4195B844) {\n      if (hx > 0x7F800000) return x;\n      if (sign_) return -1;\n      if (hx > 0x42B17217) { // x > log(FLT_MAX)\n        x *= Ox1p127f;\n        return x;\n      }\n    }\n    var c: f32 = 0.0, t: f32, k: i32;\n    if (hx > 0x3EB17218) {\n      k = select<i32>(\n        1 - (sign_ << 1),\n        <i32>(invln2 * x + builtin_copysign<f32>(0.5, x)),\n        hx < 0x3F851592\n      );\n      t = <f32>k;\n      let hi = x - t * ln2_hi;\n      let lo = t * ln2_lo;\n      x = hi - lo;\n      c = (hi - x) - lo;\n    } else if (hx < 0x33000000) {\n      return x;\n    } else k = 0;\n    var hfx: f32 = 0.5 * x;\n    var hxs: f32 = x * hfx;\n    var r1: f32 = 1.0 + hxs * (Q1 + hxs * Q2);\n    t  = 3.0 - r1 * hfx;\n    var e = hxs * ((r1 - t) / (6.0 - x * t));\n    if (k == 0) return x - (x * e - hxs);\n    e  = x * (e - c) - c;\n    e -= hxs;\n    if (k == -1) return 0.5 * (x - e) - 0.5;\n    if (k == 1) {\n      if (x < -0.25) return -2.0 * (e - (x + 0.5));\n      return 1.0 + 2.0 * (x - e);\n    }\n    u = (0x7F + k) << 23;\n    var twopk = reinterpret<f32>(u);\n    var y: f32;\n    if (k < 0 || k > 56) {\n      y = x - e + 1.0;\n      if (k == 128) y = y * 2.0 * Ox1p127f;\n      else y = y * twopk;\n      return y - 1.0;\n    }\n    u = (0x7F - k) << 23;\n    y = reinterpret<f32>(u);\n    if (k < 20) y = (1 - y) - e;\n    else y = 1 - (e + y);\n    return (x + y) * twopk;\n  }\n\n  // @ts-ignore: decorator\n  @inline\n  export function fround(x: f32): f32 {\n    return x;\n  }\n\n  export function hypot(x: f32, y: f32): f32 { // see: musl/src/math/hypotf.c\n    const\n      Ox1p90f  = reinterpret<f32>(0x6C800000),\n      Ox1p_90f = reinterpret<f32>(0x12800000);\n\n    var ux = reinterpret<u32>(x);\n    var uy = reinterpret<u32>(y);\n    ux &= 0x7FFFFFFF;\n    uy &= 0x7FFFFFFF;\n    if (ux < uy) {\n      let ut = ux;\n      ux = uy;\n      uy = ut;\n    }\n    x = reinterpret<f32>(ux);\n    y = reinterpret<f32>(uy);\n    if (uy == 0xFF << 23) return y;\n    if (ux >= 0xFF << 23 || uy == 0 || ux - uy >= 25 << 23) return x + y;\n    var z: f32 = 1;\n    if (ux >= (0x7F + 60) << 23) {\n      z  = Ox1p90f;\n      x *= Ox1p_90f;\n      y *= Ox1p_90f;\n    } else if (uy < (0x7F - 60) << 23) {\n      z  = Ox1p_90f;\n      x *= Ox1p90f;\n      y *= Ox1p90f;\n    }\n    return z * builtin_sqrt<f32>(<f32>(<f64>x * x + <f64>y * y));\n  }\n\n  // @ts-ignore: decorator\n  @inline\n  export function imul(x: f32, y: f32): f32 {\n    /*\n     * Wasm (MVP) and JS have different approaches for double->int conversions.\n     *\n     * For emulate JS conversion behavior and avoid trapping from wasm we should modulate by MAX_INT\n     * our float-point arguments before actual convertion to integers.\n     */\n    if (!isFinite(x + y)) return 0;\n    return <f32>(dtoi32(x) * dtoi32(y));\n  }\n\n  export function log(x: f32): f32 { // see: musl/src/math/logf.c and SUN COPYRIGHT NOTICE above\n    if (ASC_SHRINK_LEVEL < 1) {\n      return logf_lut(x);\n    } else {\n      const\n        ln2_hi  = reinterpret<f32>(0x3F317180), // 6.9313812256e-01f\n        ln2_lo  = reinterpret<f32>(0x3717F7D1), // 9.0580006145e-06f\n        Lg1     = reinterpret<f32>(0x3F2AAAAA), // 0xaaaaaa.0p-24f\n        Lg2     = reinterpret<f32>(0x3ECCCE13), // 0xccce13.0p-25f\n        Lg3     = reinterpret<f32>(0x3E91E9EE), // 0x91e9ee.0p-25f\n        Lg4     = reinterpret<f32>(0x3E789E26), // 0xf89e26.0p-26f\n        Ox1p25f = reinterpret<f32>(0x4C000000);\n\n      let u = reinterpret<u32>(x);\n      let k = 0;\n      if (u < 0x00800000 || <bool>(u >> 31)) {\n        if (u << 1 == 0) return -1 / (x * x);\n        if (u >> 31) return (x - x) / 0;\n        k -= 25;\n        x *= Ox1p25f;\n        u = reinterpret<u32>(x);\n      } else if (u >= 0x7F800000) {\n        return x;\n      } else if (u == 0x3F800000) {\n        return 0;\n      }\n      u += 0x3F800000 - 0x3F3504F3;\n      k += <u32>(<i32>u >> 23) - 0x7F;\n      u = (u & 0x007FFFFF) + 0x3F3504F3;\n      x = reinterpret<f32>(u);\n      let f = x - 1.0;\n      let s = f / (2.0 + f);\n      let z = s * s;\n      let w = z * z;\n      let t1 = w * (Lg2 + w * Lg4);\n      let t2 = z * (Lg1 + w * Lg3);\n      let r = t2 + t1;\n      let hfsq = <f32>0.5 * f * f;\n      let dk = <f32>k;\n      return s * (hfsq + r) + dk * ln2_lo - hfsq + f + dk * ln2_hi;\n    }\n  }\n\n  export function log10(x: f32): f32 { // see: musl/src/math/log10f.c and SUN COPYRIGHT NOTICE above\n    const\n      ivln10hi  = reinterpret<f32>(0x3EDE6000), //  4.3432617188e-01f\n      ivln10lo  = reinterpret<f32>(0xB804EAD9), // -3.1689971365e-05f\n      log10_2hi = reinterpret<f32>(0x3E9A2080), //  3.0102920532e-01f\n      log10_2lo = reinterpret<f32>(0x355427DB), //  7.9034151668e-07f\n      Lg1       = reinterpret<f32>(0x3F2AAAAA), //  0xaaaaaa.0p-24f, 0.66666662693f\n      Lg2       = reinterpret<f32>(0x3ECCCE13), //  0xccce13.0p-25f, 0.40000972152f\n      Lg3       = reinterpret<f32>(0x3E91E9EE), //  0x91e9ee.0p-25f, 0.28498786688f\n      Lg4       = reinterpret<f32>(0x3E789E26), //  0xf89e26.0p-26f, 0.24279078841f\n      Ox1p25f   = reinterpret<f32>(0x4C000000); //  0x1p25f\n\n    var ix = reinterpret<u32>(x);\n    var k = 0;\n    if (ix < 0x00800000 || <bool>(ix >> 31)) {\n      if (ix << 1 == 0) return -1 / (x * x);\n      if (ix >> 31) return (x - x) / 0.0;\n      k -= 25;\n      x *= Ox1p25f;\n      ix = reinterpret<u32>(x);\n    } else if (ix >= 0x7F800000) {\n      return x;\n    } else if (ix == 0x3F800000) {\n      return 0;\n    }\n    ix += 0x3F800000 - 0x3F3504F3;\n    k += <i32>(ix >> 23) - 0x7F;\n    ix = (ix & 0x007FFFFF) + 0x3F3504F3;\n    x = reinterpret<f32>(ix);\n    var f = x - 1.0;\n    var s = f / (2.0 + f);\n    var z = s * s;\n    var w = z * z;\n    var t1 = w * (Lg2 + w * Lg4);\n    var t2 = z * (Lg1 + w * Lg3);\n    var r = t2 + t1;\n    var hfsq: f32 = 0.5 * f * f;\n    var hi = f - hfsq;\n    ix = reinterpret<u32>(hi);\n    ix &= 0xFFFFF000;\n    hi = reinterpret<f32>(ix);\n    var lo = f - hi - hfsq + s * (hfsq + r);\n    var dk = <f32>k;\n    return dk * log10_2lo + (lo + hi) * ivln10lo + lo * ivln10hi + hi * ivln10hi + dk * log10_2hi;\n  }\n\n  export function log1p(x: f32): f32 { // see: musl/src/math/log1pf.c and SUN COPYRIGHT NOTICE above\n    const\n      ln2_hi = reinterpret<f32>(0x3F317180), // 6.9313812256e-01\n      ln2_lo = reinterpret<f32>(0x3717F7D1), // 9.0580006145e-06\n      Lg1    = reinterpret<f32>(0x3F2AAAAA), // 0xaaaaaa.0p-24f, 0.66666662693f\n      Lg2    = reinterpret<f32>(0x3ECCCE13), // 0xccce13.0p-25f, 0.40000972152f\n      Lg3    = reinterpret<f32>(0x3E91E9EE), // 0x91e9ee.0p-25f, 0.28498786688f\n      Lg4    = reinterpret<f32>(0x3E789E26); // 0xf89e26.0p-26f, 0.24279078841f\n\n    var ix = reinterpret<u32>(x);\n    var c: f32 = 0, f: f32 = 0;\n    var k: i32 = 1;\n    if (ix < 0x3ED413D0 || <bool>(ix >> 31)) {\n      if (ix >= 0xBF800000) {\n        if (x == -1) return x / 0.0;\n        return (x - x) / 0.0;\n      }\n      if (ix << 1 < 0x33800000 << 1) return x;\n      if (ix <= 0xBE95F619) {\n        k = 0;\n        c = 0;\n        f = x;\n      }\n    } else if (ix >= 0x7F800000) return x;\n    if (k) {\n      let uf: f32 = 1 + x;\n      let iu = reinterpret<u32>(uf);\n      iu += 0x3F800000 - 0x3F3504F3;\n      k = <i32>(iu >> 23) - 0x7F;\n      if (k < 25) {\n        c = k >= 2 ? 1 - (uf - x) : x - (uf - 1);\n        c /= uf;\n      } else c = 0;\n      iu = (iu & 0x007FFFFF) + 0x3F3504F3;\n      f = reinterpret<f32>(iu) - 1;\n    }\n    var s = f / (2.0 + f);\n    var z = s * s;\n    var w = z * z;\n    var t1 = w * (Lg2 + w * Lg4);\n    var t2 = z * (Lg1 + w * Lg3);\n    var r = t2 + t1;\n    var hfsq: f32 = 0.5 * f * f;\n    var dk = <f32>k;\n    return s * (hfsq + r) + (dk * ln2_lo + c) - hfsq + f + dk * ln2_hi;\n  }\n\n  export function log2(x: f32): f32 { // see: musl/src/math/log2f.c and SUN COPYRIGHT NOTICE above\n    if (ASC_SHRINK_LEVEL < 1) {\n      return log2f_lut(x);\n    } else {\n      const\n        ivln2hi = reinterpret<f32>(0x3FB8B000), //  1.4428710938e+00f\n        ivln2lo = reinterpret<f32>(0xB9389AD4), // -1.7605285393e-04\n        Lg1     = reinterpret<f32>(0x3F2AAAAA), //  0xaaaaaa.0p-24f, 0.66666662693f\n        Lg2     = reinterpret<f32>(0x3ECCCE13), //  0xccce13.0p-25f, 0.40000972152f\n        Lg3     = reinterpret<f32>(0x3E91E9EE), //  0x91e9ee.0p-25f, 0.28498786688f\n        Lg4     = reinterpret<f32>(0x3E789E26), //  0xf89e26.0p-26f, 0.24279078841f\n        Ox1p25f = reinterpret<f32>(0x4C000000); //  0x1p25f\n\n      let ix = reinterpret<u32>(x);\n      let k: i32 = 0;\n      if (ix < 0x00800000 || <bool>(ix >> 31)) {\n        if (ix << 1 == 0) return -1 / (x * x);\n        if (ix >> 31) return (x - x) / 0.0;\n        k -= 25;\n        x *= Ox1p25f;\n        ix = reinterpret<u32>(x);\n      } else if (ix >= 0x7F800000) {\n        return x;\n      } else if (ix == 0x3F800000) {\n        return 0;\n      }\n      ix += 0x3F800000 - 0x3F3504F3;\n      k += <i32>(ix >> 23) - 0x7F;\n      ix = (ix & 0x007FFFFF) + 0x3F3504F3;\n      x = reinterpret<f32>(ix);\n      let f = x - 1.0;\n      let s = f / (2.0 + f);\n      let z = s * s;\n      let w = z * z;\n      let t1 = w * (Lg2 + w * Lg4);\n      let t2 = z * (Lg1 + w * Lg3);\n      let r = t2 + t1;\n      let hfsq: f32 = 0.5 * f * f;\n      let hi = f - hfsq;\n      let u = reinterpret<u32>(hi);\n      u &= 0xFFFFF000;\n      hi = reinterpret<f32>(u);\n      let lo: f32 = f - hi - hfsq + s * (hfsq + r);\n      let dk = <f32>k;\n      return (lo + hi) * ivln2lo + lo * ivln2hi + hi * ivln2hi + dk;\n    }\n  }\n\n  // @ts-ignore: decorator\n  @inline\n  export function max(value1: f32, value2: f32): f32 {\n    return builtin_max<f32>(value1, value2);\n  }\n\n  // @ts-ignore: decorator\n  @inline\n  export function min(value1: f32, value2: f32): f32 {\n    return builtin_min<f32>(value1, value2);\n  }\n\n  export function pow(x: f32, y: f32): f32 {\n    // TODO: remove this fast pathes after introduced own mid-end IR with \"stdlib call simplify\" transforms\n    if (builtin_abs<f32>(y) <= 2) {\n      if (y == 2.0) return x * x;\n      if (y == 0.5) {\n        return select<f32>(\n          builtin_abs<f32>(builtin_sqrt<f32>(x)),\n          Infinity,\n          x != -Infinity\n        );\n      }\n      if (y == -1.0) return 1 / x;\n      if (y == 1.0) return x;\n      if (y == 0.0) return 1.0;\n    }\n    if (ASC_SHRINK_LEVEL < 1) {\n      // see: musl/src/math/powf.c\n      return powf_lut(x, y);\n    } else {\n      // based on:  jdh8/metallic/src/math/float/powf.c\n      if (y == 0) return 1;\n      // @ts-ignore: cast\n      if (isNaN(x) | isNaN(y)) {\n        return NaN;\n      }\n      let sign: u32 = 0;\n      let uy = reinterpret<u32>(y);\n      let ux = reinterpret<u32>(x);\n      let sx = ux >> 31;\n      ux &= 0x7FFFFFFF;\n      if (sx && nearest(y) == y) {\n        x = -x;\n        sx = 0;\n        sign = u32(nearest(y * 0.5) != y * 0.5) << 31;\n      }\n      let m: u32;\n      if (ux == 0x3F800000) { // x == 1\n        m = sx | u32((uy & 0x7FFFFFFF) == 0x7F800000) ? 0x7FC00000 : 0x3F800000;\n      } else if (ux == 0) {\n        m = uy >> 31 ? 0x7F800000 : 0;\n      } else if (ux == 0x7F800000) {\n        m = uy >> 31 ? 0 : 0x7F800000;\n      } else if (sx) {\n        m = 0x7FC00000;\n      } else {\n        m = reinterpret<u32>(<f32>exp2f(<f64>y * log2f(x)));\n      }\n      return reinterpret<f32>(m | sign);\n    }\n  }\n\n  // @ts-ignore: decorator\n  @inline\n  export function seedRandom(value: i64): void {\n    NativeMath.seedRandom(value);\n  }\n\n  // Using xoroshiro64starstar from http://xoshiro.di.unimi.it/xoroshiro64starstar.c\n  export function random(): f32 {\n    if (!random_seeded) seedRandom(reinterpret<i64>(seed()));\n\n    var s0 = random_state0_32;\n    var s1 = random_state1_32;\n    var r  = rotl<u32>(s0 * 0x9E3779BB, 5) * 5;\n\n    s1 ^= s0;\n    random_state0_32 = rotl<u32>(s0, 26) ^ s1 ^ (s1 << 9);\n    random_state1_32 = rotl<u32>(s1, 13);\n\n    return reinterpret<f32>((r >> 9) | (127 << 23)) - 1.0;\n  }\n\n  // @ts-ignore: decorator\n  @inline\n  export function round(x: f32): f32 {\n    let roundUp = builtin_ceil<f32>(x);\n    return select<f32>(roundUp, roundUp - 1.0, roundUp - 0.5 <= x);\n  }\n\n  // @ts-ignore: decorator\n  @inline\n  export function sign(x: f32): f32 {\n    if (ASC_SHRINK_LEVEL > 0) {\n      return builtin_abs(x) > 0 ? builtin_copysign<f32>(1, x) : x;\n    } else {\n      return x > 0 ? 1 : x < 0 ? -1 : x;\n    }\n  }\n\n  // @ts-ignore: decorator\n  @inline\n  export function signbit(x: f32): bool {\n    return <bool>(reinterpret<u32>(x) >>> 31);\n  }\n\n  export function sin(x: f32): f32 { // see: musl/src/math/sinf.c\n    const\n      s1pio2 = reinterpret<f64>(0x3FF921FB54442D18), // M_PI_2 * 1\n      s2pio2 = reinterpret<f64>(0x400921FB54442D18), // M_PI_2 * 2\n      s3pio2 = reinterpret<f64>(0x4012D97C7F3321D2), // M_PI_2 * 3\n      s4pio2 = reinterpret<f64>(0x401921FB54442D18); // M_PI_2 * 4\n\n    var ix = reinterpret<u32>(x);\n    var sign = ix >> 31;\n    ix &= 0x7FFFFFFF;\n\n    if (ix <= 0x3F490FDA) {  // |x| ~<= π/4\n      if (ix < 0x39800000) { // |x| < 2**-12\n        return x;\n      }\n      return sin_kernf(x);\n    }\n\n    if (ASC_SHRINK_LEVEL < 1) {\n      if (ix <= 0x407B53D1) {   // |x| ~<= 5π/4\n        if (ix <= 0x4016CBE3) { // |x| ~<= 3π/4\n          return sign ? -cos_kernf(x + s1pio2) : cos_kernf(x - s1pio2);\n        }\n        return sin_kernf(-(sign ? x + s2pio2 : x - s2pio2));\n      }\n\n      if (ix <= 0x40E231D5) {   // |x| ~<= 9π/4\n        if (ix <= 0x40AFEDDF) { // |x| ~<= 7π/4\n          return sign ? cos_kernf(x + s3pio2) : -cos_kernf(x - s3pio2);\n        }\n        return sin_kernf(sign ? x + s4pio2 : x - s4pio2);\n      }\n    }\n\n    // sin(Inf or NaN) is NaN\n    if (ix >= 0x7F800000) return x - x;\n\n    var n = rempio2f(x, ix, sign);\n    var y = rempio2f_y;\n\n    var t = n & 1 ? cos_kernf(y) : sin_kernf(y);\n    return n & 2 ? -t : t;\n  }\n\n  export function sinh(x: f32): f32 { // see: musl/src/math/sinhf.c\n    var u = reinterpret<u32>(x) & 0x7FFFFFFF;\n    var a = reinterpret<f32>(u);\n    var h = builtin_copysign<f32>(0.5, x);\n    if (u < 0x42B17217) {\n      let t = expm1(a);\n      if (u < 0x3F800000) {\n        if (u < 0x3F800000 - (12 << 23)) return x;\n        return h * (2 * t - t * t / (t + 1));\n      }\n      return h * (t + t / (t + 1));\n    }\n    return expo2f(a, 2 * h);\n  }\n\n  // @ts-ignore: decorator\n  @inline\n  export function sqrt(x: f32): f32 {\n    return builtin_sqrt<f32>(x);\n  }\n\n  export function tan(x: f32): f32 { // see: musl/src/math/tanf.c\n    const\n      t1pio2 = reinterpret<f64>(0x3FF921FB54442D18), // 1 * M_PI_2\n      t2pio2 = reinterpret<f64>(0x400921FB54442D18), // 2 * M_PI_2\n      t3pio2 = reinterpret<f64>(0x4012D97C7F3321D2), // 3 * M_PI_2\n      t4pio2 = reinterpret<f64>(0x401921FB54442D18); // 4 * M_PI_2\n\n    var ix = reinterpret<u32>(x);\n    var sign = ix >> 31;\n    ix &= 0x7FFFFFFF;\n\n    if (ix <= 0x3F490FDA) {  // |x| ~<= π/4\n      if (ix < 0x39800000) { // |x| < 2**-12\n        return x;\n      }\n      return tan_kernf(x, 0);\n    }\n\n    if (ASC_SHRINK_LEVEL < 1) {\n      if (ix <= 0x407B53D1) {   // |x| ~<= 5π/4\n        if (ix <= 0x4016CBE3) { // |x| ~<= 3π/4\n          return tan_kernf((sign ? x + t1pio2 : x - t1pio2), 1);\n        } else {\n          return tan_kernf((sign ? x + t2pio2 : x - t2pio2), 0);\n        }\n      }\n      if (ix <= 0x40E231D5) {   // |x| ~<= 9π/4\n        if (ix <= 0x40AFEDDF) { // |x| ~<= 7π/4\n          return tan_kernf((sign ? x + t3pio2 : x - t3pio2), 1);\n        } else {\n          return tan_kernf((sign ? x + t4pio2 : x - t4pio2), 0);\n        }\n      }\n    }\n\n    // tan(Inf or NaN) is NaN\n    if (ix >= 0x7F800000) return x - x;\n\n    // argument reduction\n    var n = rempio2f(x, ix, sign);\n    var y = rempio2f_y;\n    return tan_kernf(y, n & 1);\n  }\n\n  export function tanh(x: f32): f32 { // see: musl/src/math/tanhf.c\n    var u = reinterpret<u32>(x);\n    u &= 0x7FFFFFFF;\n    var y = reinterpret<f32>(u);\n    var t: f32;\n    if (u > 0x3F0C9F54) {\n      if (u > 0x41200000) t = 1 + 0 / y;\n      else {\n        t = expm1(2 * y);\n        t = 1 - 2 / (t + 2);\n      }\n    } else if (u > 0x3E82C578) {\n      t = expm1(2 * y);\n      t = t / (t + 2);\n    } else if (u >= 0x00800000) {\n      t = expm1(-2 * y);\n      t = -t / (t + 2);\n    } else t = y;\n    return builtin_copysign<f32>(t, x);\n  }\n\n  // @ts-ignore: decorator\n  @inline\n  export function trunc(x: f32): f32 {\n    return builtin_trunc<f32>(x);\n  }\n\n  export function scalbn(x: f32, n: i32): f32 { // see: https://git.musl-libc.org/cgit/musl/tree/src/math/scalbnf.c\n    const\n      Ox1p24f   = reinterpret<f32>(0x4B800000),\n      Ox1p127f  = reinterpret<f32>(0x7F000000),\n      Ox1p_126f = reinterpret<f32>(0x00800000);\n\n    var y = x;\n    if (n > 127) {\n      y *= Ox1p127f;\n      n -= 127;\n      if (n > 127) {\n        y *= Ox1p127f;\n        n = builtin_min<i32>(n - 127, 127);\n      }\n    } else if (n < -126) {\n      y *= Ox1p_126f * Ox1p24f;\n      n += 126 - 24;\n      if (n < -126) {\n        y *= Ox1p_126f * Ox1p24f;\n        n = builtin_max<i32>(n + 126 - 24, -126);\n      }\n    }\n    return y * reinterpret<f32>(<u32>(0x7F + n) << 23);\n  }\n\n  export function mod(x: f32, y: f32): f32 { // see: musl/src/math/fmodf.c\n    if (builtin_abs<f32>(y) == 1.0) {\n      // x % 1, x % -1  ==>  sign(x) * abs(x - 1.0 * trunc(x / 1.0))\n      // TODO: move this rule to compiler's optimization pass.\n      // It could be apply for any x % C_pot, where \"C_pot\" is pow of two const.\n      return builtin_copysign<f32>(x - builtin_trunc<f32>(x), x);\n    }\n    var ux = reinterpret<u32>(x);\n    var uy = reinterpret<u32>(y);\n    var ex = <i32>(ux >> 23 & 0xFF);\n    var ey = <i32>(uy >> 23 & 0xFF);\n    var sm = ux & 0x80000000;\n    var uy1 = uy << 1;\n    if (uy1 == 0 || ex == 0xFF || isNaN<f32>(y)) {\n      let m = x * y;\n      return m / m;\n    }\n    var ux1 = ux << 1;\n    if (ux1 <= uy1) {\n      return x * f32(ux1 != uy1);\n    }\n    if (!ex) {\n      ex -= builtin_clz<u32>(ux << 9);\n      ux <<= 1 - ex;\n    } else {\n      ux &= <u32>-1 >> 9;\n      ux |= 1 << 23;\n    }\n    if (!ey) {\n      ey -= builtin_clz<u32>(uy << 9);\n      uy <<= 1 - ey;\n    } else {\n      uy &= <u32>-1 >> 9;\n      uy |= 1 << 23;\n    }\n    while (ex > ey) {\n      if (ux >= uy) {\n        if (ux == uy) return 0 * x;\n        ux -= uy;\n      }\n      ux <<= 1;\n      --ex;\n    }\n    if (ux >= uy) {\n      if (ux == uy) return 0 * x;\n      ux -= uy;\n    }\n    // for (; !(ux >> 23); ux <<= 1) --ex;\n    var shift = <i32>builtin_clz<u32>(ux << 8);\n    ex -= shift;\n    ux <<= shift;\n    if (ex > 0) {\n      ux -= 1 << 23;\n      ux |= <u32>ex << 23;\n    } else {\n      ux >>= -ex + 1;\n    }\n    return reinterpret<f32>(ux | sm);\n  }\n\n  export function rem(x: f32, y: f32): f32 { // see: musl/src/math/remquof.c\n    var ux = reinterpret<u32>(x);\n    var uy = reinterpret<u32>(y);\n    var ex = <i32>(ux >> 23 & 0xFF);\n    var ey = <i32>(uy >> 23 & 0xFF);\n    var sx = <i32>(ux >> 31);\n    var uxi = ux;\n    if (uy << 1 == 0 || ex == 0xFF || isNaN(y)) return (x * y) / (x * y);\n    if (ux << 1 == 0) return x;\n    if (!ex) {\n      ex -= builtin_clz<u32>(uxi << 9);\n      uxi <<= 1 - ex;\n    } else {\n      uxi &= <u32>-1 >> 9;\n      uxi |= 1 << 23;\n    }\n    if (!ey) {\n      ey -= builtin_clz<u32>(uy << 9);\n      uy <<= 1 - ey;\n    } else {\n      uy &= <u32>-1 >> 9;\n      uy |= 1 << 23;\n    }\n    var q = 0;\n    do {\n      if (ex < ey) {\n        if (ex + 1 == ey) break; // goto end\n        return x;\n      }\n      while (ex > ey) {\n        if (uxi >= uy) {\n          uxi -= uy;\n          ++q;\n        }\n        uxi <<= 1;\n        q <<= 1;\n        --ex;\n      }\n      if (uxi >= uy) {\n        uxi -= uy;\n        ++q;\n      }\n      if (uxi == 0) ex = -30;\n      else {\n        let shift = builtin_clz<i32>(uxi << 8);\n        ex -= shift;\n        uxi <<= shift;\n      }\n      break;\n    } while (false);\n    // end:\n    if (ex > 0) {\n      uxi -= 1 << 23;\n      uxi |= <u32>ex << 23;\n    } else {\n      uxi >>= -ex + 1;\n    }\n    x = reinterpret<f32>(uxi);\n    y = builtin_abs<f32>(y);\n    var x2 = x + x;\n    if (ex == ey || (ex + 1 == ey && (<f32>x2 > y || (<f32>x2 == y && <bool>(q & 1))))) {\n      x -= y;\n      // q++;\n    }\n    return sx ? -x : x;\n  }\n\n  export function sincos(x: f32): void { // see: musl/tree/src/math/sincosf.c\n    const\n      s1pio2 = reinterpret<f64>(0x3FF921FB54442D18), // 1 * M_PI_2\n      s2pio2 = reinterpret<f64>(0x400921FB54442D18), // 2 * M_PI_2\n      s3pio2 = reinterpret<f64>(0x4012D97C7F3321D2), // 3 * M_PI_2\n      s4pio2 = reinterpret<f64>(0x401921FB54442D18); // 4 * M_PI_2\n\n    var ix = reinterpret<u32>(x);\n    var sign = ix >> 31;\n    ix &= 0x7FFFFFFF;\n\n    if (ix <= 0x3F490FDA) {  // |x| ~<= π/4\n      if (ix < 0x39800000) { // |x| < 2**-12\n        sincos_sin = x;\n        sincos_cos = 1;\n        return;\n      }\n      sincos_sin = sin_kernf(x);\n      sincos_cos = cos_kernf(x);\n      return;\n    }\n    if (ASC_SHRINK_LEVEL < 1) {\n      if (ix <= 0x407B53D1) {   // |x| ~<= 5π/4\n        if (ix <= 0x4016CBE3) { // |x| ~<= 3π/4\n          if (sign) {\n            sincos_sin = -cos_kernf(x + s1pio2);\n            sincos_cos =  sin_kernf(x + s1pio2);\n          } else {\n            sincos_sin = cos_kernf(s1pio2 - x);\n            sincos_cos = sin_kernf(s1pio2 - x);\n          }\n          return;\n        }\n        // -sin(x + c) is not correct if x+c could be 0: -0 vs +0\n        sincos_sin = -sin_kernf(sign ? x + s2pio2 : x - s2pio2);\n        sincos_cos = -cos_kernf(sign ? x + s2pio2 : x - s2pio2);\n        return;\n      }\n      if (ix <= 0x40E231D5) {   // |x| ~<= 9π/4\n        if (ix <= 0x40AFEDDF) { // |x| ~<= 7π/4\n          if (sign) {\n            sincos_sin =  cos_kernf(x + s3pio2);\n            sincos_cos = -sin_kernf(x + s3pio2);\n          } else {\n            sincos_sin = -cos_kernf(x - s3pio2);\n            sincos_cos =  sin_kernf(x - s3pio2);\n          }\n          return;\n        }\n        sincos_sin = sin_kernf(sign ? x + s4pio2 : x - s4pio2);\n        sincos_cos = cos_kernf(sign ? x + s4pio2 : x - s4pio2);\n        return;\n      }\n    }\n    // sin(Inf or NaN) is NaN\n    if (ix >= 0x7F800000) {\n      let xx = x - x;\n      sincos_sin = xx;\n      sincos_cos = xx;\n      return;\n    }\n    // general argument reduction needed\n    var n = rempio2f(x, ix, sign);\n    var y = rempio2f_y;\n    var s = sin_kernf(y);\n    var c = cos_kernf(y);\n    var sin = s, cos = c;\n    if (n & 1) {\n      sin =  c;\n      cos = -s;\n    }\n    if (n & 2) {\n      sin = -sin;\n      cos = -cos;\n    }\n    sincos_sin = sin;\n    sincos_cos = cos;\n  }\n}\n\nexport function ipow32(x: i32, e: i32): i32 {\n  var out = 1;\n  if (ASC_SHRINK_LEVEL < 1) {\n    if (x == 2) {\n      return select<i32>(1 << e, 0, <u32>e < 32);\n    }\n    if (e <= 0) {\n      if (x == -1) return select<i32>(-1, 1, e & 1);\n      return i32(e == 0) | i32(x == 1);\n    }\n    else if (e == 1) return x;\n    else if (e == 2) return x * x;\n    else if (e < 32) {\n      let log = 32 - clz(e);\n      // 32 = 2 ^ 5, so need only five cases.\n      // But some extra cases needs for properly overflowing\n      switch (log) {\n        case 5: {\n          if (e & 1) out *= x;\n          e >>>= 1;\n          x *= x;\n        }\n        case 4: {\n          if (e & 1) out *= x;\n          e >>>= 1;\n          x *= x;\n        }\n        case 3: {\n          if (e & 1) out *= x;\n          e >>>= 1;\n          x *= x;\n        }\n        case 2: {\n          if (e & 1) out *= x;\n          e >>>= 1;\n          x *= x;\n        }\n        case 1: {\n          if (e & 1) out *= x;\n        }\n      }\n      return out;\n    }\n  }\n  while (e) {\n    if (e & 1) out *= x;\n    e >>>= 1;\n    x *= x;\n  }\n  return out;\n}\n\nexport function ipow64(x: i64, e: i64): i64 {\n  var out: i64 = 1;\n  if (ASC_SHRINK_LEVEL < 1) {\n    if (x == 2) {\n      return select<i64>(1 << e, 0, <u64>e < 64);\n    }\n    if (e <= 0) {\n      if (x == -1) return select<i64>(-1, 1, e & 1);\n      return i64(e == 0) | i64(x == 1);\n    }\n    else if (e == 1) return x;\n    else if (e == 2) return x * x;\n    else if (e < 64) {\n      let log = 64 - <i32>clz(e);\n      // 64 = 2 ^ 6, so need only six cases.\n      // But some extra cases needs for properly overflowing\n      switch (log) {\n        case 6: {\n          if (e & 1) out *= x;\n          e >>>= 1;\n          x *= x;\n        }\n        case 5: {\n          if (e & 1) out *= x;\n          e >>>= 1;\n          x *= x;\n        }\n        case 4: {\n          if (e & 1) out *= x;\n          e >>>= 1;\n          x *= x;\n        }\n        case 3: {\n          if (e & 1) out *= x;\n          e >>>= 1;\n          x *= x;\n        }\n        case 2: {\n          if (e & 1) out *= x;\n          e >>>= 1;\n          x *= x;\n        }\n        case 1: {\n          if (e & 1) out *= x;\n        }\n      }\n      return out;\n    }\n  }\n  while (e) {\n    if (e & 1) out *= x;\n    e >>>= 1;\n    x *= x;\n  }\n  return out;\n}\n\n/*\nTODO:\nIn compile time if only exponent is constant we could replace ipow32/ipow64 by shortest addition chains\nwhich usually faster than exponentiation by squaring\n\nfor ipow32 and e < 32:\n\nlet b: i32, c: i32, d: i32, h: i32, k: i32, g: i32;\nswitch (e) {\n  case  1: return x;\n  case  2: return x * x;\n  case  3: return x * x * x;\n  case  4: return (b = x * x) * b;\n  case  5: return (b = x * x) * b * x;\n  case  6: return (b = x * x) * b * b;\n  case  7: return (b = x * x) * b * b * x;\n  case  8: return (d = (b = x * x) * b) * d;\n  case  9: return (c = x * x * x) * c * c;\n  case 10: return (d = (b = x * x) * b) * d * b;\n  case 11: return (d = (b = x * x) * b) * d * b * x;\n  case 12: return (d = (b = x * x) * b) * d * d;\n  case 13: return (d = (b = x * x) * b) * d * d * x;\n  case 14: return (d = (b = x * x) * b) * d * d * b;\n  case 15: return (k = (b = x * x) * b * x) * k * k;\n  case 16: return (h = (d = (b = x * x) * b) * d) * h;\n  case 17: return (h = (d = (b = x * x) * b) * d) * h * x;\n  case 18: return (h = (d = (b = x * x) * b) * d * x) * h;\n  case 19: return (h = (d = (b = x * x) * b) * d * x) * h * x;\n  case 20: return (h = (k = (b = x * x) * b * x) * k) * h;\n  case 21: return (h = (k = (b = x * x) * b * x) * k) * h * x;\n  case 22: return (g = (h = (k = (b = x * x) * b * x) * k) * x) * g;\n  case 23: return (h = (d = (c = (b = x * x) * x) * b) * d) * h * c;\n  case 24: return (h = (d = (c = x * x * x) * c) * d) * h;\n  case 25: return (h = (d = (c = x * x * x) * c) * d) * h * x;\n  case 26: return (g = (h = (d = (c = x * x * x) * c) * d) * x) * g;\n  case 27: return (h = (d = (c = x * x * x) * c) * d) * h * c;\n  case 28: return (h = (d = (c = x * x * x) * c * x) * d) * h;\n  case 29: return (h = (d = (c = x * x * x) * c * x) * d) * h * x;\n  case 30: return (h = (d = (c = x * x * x) * c) * d * c) * h;\n  case 31: return (h = (d = (c = x * x * x) * c) * d * c) * h * x;\n}\n\nfor ipow64: TODO\nswitch (e) {\n  case 32:\n  ...\n  case 63:\n}\n*/\n","// This file is shared with the compiler and must remain portable\n\n// ╒═══════════════════ Typeinfo interpretation ═══════════════════╕\n//    3                   2                   1\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┤ ◄─ __rtti_base\n// │                             count                             │\n// ╞═══════════════════════════════════════════════════════════════╡ ┐\n// │                      Typeinfo#flags [id=0]                    │ id < count\n// ├ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┤\n// │                      Typeinfo#base  [id=0]                    │\n// ├───────────────────────────────────────────────────────────────┤\n// │                              ...                              │\n\n/** Runtime type information data structure. */\n@unmanaged\nexport class Typeinfo {\n  /** Flags describing the shape of this class type. */\n  flags: TypeinfoFlags = TypeinfoFlags.NONE;\n  /** Base class id or `0` if none. */\n  base: u32 = 0;\n}\n\n/** Runtime type information flags. */\nexport const enum TypeinfoFlags {\n  /** No specific flags. */\n  NONE = 0,\n  /** Type is an `ArrayBufferView`. */\n  ARRAYBUFFERVIEW = 1 << 0,\n  /** Type is an `Array`. */\n  ARRAY = 1 << 1,\n  /** Type is a `StaticArray`. */\n  STATICARRAY = 1 << 2,\n  /** Type is a `Set`. */\n  SET = 1 << 3,\n  /** Type is a `Map`. */\n  MAP = 1 << 4,\n  /** Type has no outgoing pointers. */\n  POINTERFREE = 1 << 5,\n  /** Value alignment of 1 byte. */\n  VALUE_ALIGN_0 = 1 << 6,\n  /** Value alignment of 2 bytes. */\n  VALUE_ALIGN_1 = 1 << 7,\n  /** Value alignment of 4 bytes. */\n  VALUE_ALIGN_2 = 1 << 8,\n  /** Value alignment of 8 bytes. */\n  VALUE_ALIGN_3 = 1 << 9,\n  /** Value alignment of 16 bytes. */\n  VALUE_ALIGN_4 = 1 << 10,\n  /** Value is a signed type. */\n  VALUE_SIGNED = 1 << 11,\n  /** Value is a float type. */\n  VALUE_FLOAT = 1 << 12,\n  /** Value type is nullable. */\n  VALUE_NULLABLE = 1 << 13,\n  /** Value type is managed. */\n  VALUE_MANAGED = 1 << 14,\n  /** Key alignment of 1 byte. */\n  KEY_ALIGN_0 = 1 << 15,\n  /** Key alignment of 2 bytes. */\n  KEY_ALIGN_1 = 1 << 16,\n  /** Key alignment of 4 bytes. */\n  KEY_ALIGN_2 = 1 << 17,\n  /** Key alignment of 8 bytes. */\n  KEY_ALIGN_3 = 1 << 18,\n  /** Key alignment of 16 bytes. */\n  KEY_ALIGN_4 = 1 << 19,\n  /** Key is a signed type. */\n  KEY_SIGNED = 1 << 20,\n  /** Key is a float type. */\n  KEY_FLOAT = 1 << 21,\n  /** Key type is nullable. */\n  KEY_NULLABLE = 1 << 22,\n  /** Key type is managed. */\n  KEY_MANAGED = 1 << 23\n}\n","import { Typeinfo, TypeinfoFlags } from \"./shared/typeinfo\";\nimport { E_INDEXOUTOFRANGE } from \"./util/error\";\nimport { OBJECT, TOTAL_OVERHEAD } from \"./rt/common\";\nimport { ArrayBufferView } from \"./arraybuffer\";\n\n// @ts-ignore: decorator\n@builtin\nexport declare const __rtti_base: usize;\n\n// @ts-ignore: decorator\n@builtin @unsafe\nexport declare function __visit_globals(cookie: u32): void;\n\n// @ts-ignore: decorator\n@builtin @unsafe\nexport declare function __visit_members(ref: usize, cookie: u32): void;\n\n// @ts-ignore: decorator\n@unsafe\nexport function __typeinfo(id: u32): TypeinfoFlags {\n  var ptr = __rtti_base;\n  if (id > load<u32>(ptr)) throw new Error(E_INDEXOUTOFRANGE);\n  return changetype<Typeinfo>(ptr + sizeof<u32>() + id * offsetof<Typeinfo>()).flags;\n}\n\n// @ts-ignore: decorator\n@unsafe\nexport function __instanceof(ptr: usize, classId: u32): bool { // keyword\n  var id = changetype<OBJECT>(ptr - TOTAL_OVERHEAD).rtId;\n  var rttiBase = __rtti_base;\n  if (id <= load<u32>(rttiBase)) {\n    do if (id == classId) return true;\n    while (id = changetype<Typeinfo>(rttiBase + sizeof<u32>() + id * offsetof<Typeinfo>()).base);\n  }\n  return false;\n}\n\n// @ts-ignore: decorator\n@unsafe\nexport function __newBuffer(size: usize, id: u32, data: usize = 0): usize {\n  var buffer = __new(size, id);\n  if (data) memory.copy(buffer, data, size);\n  return buffer;\n}\n\n// @ts-ignore: decorator\n@unsafe\nexport function __newArray(length: i32, alignLog2: usize, id: u32, data: usize = 0): usize {\n  var bufferSize = <usize>length << alignLog2;\n  // make sure `buffer` is tracked by the shadow stack\n  var buffer = changetype<ArrayBuffer>(__newBuffer(bufferSize, idof<ArrayBuffer>(), data));\n  // ...since allocating the array may trigger GC steps\n  var array = __new(offsetof<i32[]>(), id);\n  store<usize>(array, changetype<usize>(buffer), offsetof<ArrayBufferView>(\"buffer\"));\n  __link(array, changetype<usize>(buffer), false);\n  store<usize>(array, changetype<usize>(buffer), offsetof<ArrayBufferView>(\"dataStart\"));\n  store<i32>(array, bufferSize, offsetof<ArrayBufferView>(\"byteLength\"));\n  store<i32>(array, length, offsetof<i32[]>(\"length_\"));\n  return array;\n}\n\n// @ts-ignore: decorator\n@global @unsafe\nfunction __tostack(ptr: usize): usize { // eslint-disable-line\n  return ptr;\n}\n\n// These are provided by the respective implementation, included as another entry file by asc:\n\n// // @ts-ignore: decorator\n// @builtin @unsafe\n// export declare function __alloc(size: usize): usize;\n\n// // @ts-ignore: decorator\n// @builtin @unsafe\n// export declare function __realloc(ptr: usize, size: usize): usize;\n\n// // @ts-ignore: decorator\n// @builtin @unsafe\n// export declare function __free(ptr: usize): void;\n\n// // @ts-ignore: decorator\n// @builtin @unsafe\n// export declare function __new(size: usize, id: u32): usize;\n\n// // @ts-ignore: decorator\n// @builtin @unsafe\n// export declare function __renew(ptr: usize, size: usize): usize;\n\n// // @ts-ignore: decorator\n// @builtin @unsafe\n// export declare function __link(parentPtr: usize, childPtr: usize, expectMultiple: bool): void;\n\n// // @ts-ignore: decorator\n// @builtin @unsafe\n// export declare function __collect(): void;\n\n// // @ts-ignore: decorator\n// @builtin @unsafe\n// export declare function __visit(ptr: usize, cookie: u32): void;\n","/// <reference path=\"./rt/index.d.ts\" />\n\nimport { BLOCK_MAXSIZE } from \"./rt/common\";\nimport { COMPARATOR, SORT } from \"./util/sort\";\nimport { REVERSE } from \"./util/bytes\";\nimport { joinBooleanArray, joinIntegerArray, joinFloatArray, joinStringArray, joinReferenceArray } from \"./util/string\";\nimport { idof, isArray as builtin_isArray } from \"./builtins\";\nimport { E_INDEXOUTOFRANGE, E_INVALIDLENGTH, E_ILLEGALGENTYPE, E_EMPTYARRAY, E_HOLEYARRAY } from \"./util/error\";\n\n// @ts-ignore: decorator\n@inline @lazy const MIN_SIZE: usize = 8;\n\n/** Ensures that the given array has _at least_ the specified backing size. */\nfunction ensureCapacity(array: usize, newSize: usize, alignLog2: u32, canGrow: bool = true): void {\n  // Depends on the fact that Arrays mimic ArrayBufferView\n  var oldCapacity = <usize>changetype<ArrayBufferView>(array).byteLength;\n  if (newSize > oldCapacity >>> alignLog2) {\n    if (newSize > BLOCK_MAXSIZE >>> alignLog2) throw new RangeError(E_INVALIDLENGTH);\n    let oldData = changetype<usize>(changetype<ArrayBufferView>(array).buffer);\n    // Grows old capacity by factor of two.\n    // Make sure we don't reach BLOCK_MAXSIZE for new growed capacity.\n    let newCapacity = max(newSize, MIN_SIZE) << alignLog2;\n    if (canGrow) newCapacity = max(min(oldCapacity << 1, BLOCK_MAXSIZE), newCapacity);\n    let newData = __renew(oldData, newCapacity);\n    memory.fill(newData + oldCapacity, 0, newCapacity - oldCapacity);\n    if (newData !== oldData) { // oldData has been free'd\n      store<usize>(array, newData, offsetof<ArrayBufferView>(\"buffer\"));\n      store<usize>(array, newData, offsetof<ArrayBufferView>(\"dataStart\"));\n      __link(array, changetype<usize>(newData), false);\n    }\n    store<u32>(array, <u32>newCapacity, offsetof<ArrayBufferView>(\"byteLength\"));\n  }\n}\n\nexport class Array<T> {\n  [key: number]: T;\n\n  // Mimicking ArrayBufferView isn't strictly necessary here but is done to allow glue code\n  // to work with typed and normal arrays interchangeably. Technically, normal arrays do not need\n  // `dataStart` (equals `buffer`) and `byteLength` (equals computed `buffer.byteLength`), but the\n  // block is 16 bytes anyway so it's fine to have a couple extra fields in there.\n\n  private buffer: ArrayBuffer;\n  @unsafe readonly dataStart: usize;\n  private byteLength: i32; // Uses here as capacity\n\n  // Also note that Array<T> with non-nullable T must guard against uninitialized null values\n  // whenever an element is accessed. Otherwise, the compiler wouldn't be able to guarantee\n  // type-safety anymore. For lack of a better word, such an array is \"holey\".\n\n  private length_: i32;\n\n  static isArray<U>(value: U): bool {\n    return isReference<U>() ? builtin_isArray(value) && value !== null : false;\n  }\n\n  static create<T>(capacity: i32 = 0): Array<T> {\n    WARNING(\"'Array.create' is deprecated. Use 'new Array' instead, making sure initial elements are initialized.\");\n    var array = new Array<T>(capacity);\n    array.length = 0;\n    return array;\n  }\n\n  constructor(length: i32 = 0) {\n    if (<u32>length > <u32>BLOCK_MAXSIZE >>> alignof<T>()) throw new RangeError(E_INVALIDLENGTH);\n    // reserve capacity for at least MIN_SIZE elements\n    var bufferSize = max(<usize>length, MIN_SIZE) << alignof<T>();\n    var buffer = changetype<ArrayBuffer>(__new(bufferSize, idof<ArrayBuffer>()));\n    memory.fill(changetype<usize>(buffer), 0, bufferSize);\n    this.buffer = buffer; // links\n    this.dataStart = changetype<usize>(buffer);\n    this.byteLength = <i32>bufferSize;\n    this.length_ = length;\n  }\n\n  get length(): i32 {\n    return this.length_;\n  }\n\n  set length(newLength: i32) {\n    ensureCapacity(changetype<usize>(this), newLength, alignof<T>(), false);\n    this.length_ = newLength;\n  }\n\n  every(fn: (value: T, index: i32, array: Array<T>) => bool): bool {\n    for (let i = 0, len = this.length_; i < min(len, this.length_); ++i) {\n      if (!fn(load<T>(this.dataStart + (<usize>i << alignof<T>())), i, this)) return false;\n    }\n    return true;\n  }\n\n  findIndex(fn: (value: T, index: i32, array: Array<T>) => bool): i32 {\n    for (let i = 0, len = this.length_; i < min(len, this.length_); ++i) {\n      if (fn(load<T>(this.dataStart + (<usize>i << alignof<T>())), i, this)) return i;\n    }\n    return -1;\n  }\n\n  findLastIndex(fn: (value: T, index: i32, array: Array<T>) => bool): i32 {\n    for (let i = this.length_ - 1; i >= 0; --i) {\n      if (fn(load<T>(this.dataStart + (<usize>i << alignof<T>())), i, this)) return i;\n    }\n    return -1;\n  }\n\n  @operator(\"[]\") private __get(index: i32): T {\n    if (<u32>index >= <u32>this.length_) throw new RangeError(E_INDEXOUTOFRANGE);\n    var value = load<T>(this.dataStart + (<usize>index << alignof<T>()));\n    if (isReference<T>()) {\n      if (!isNullable<T>()) {\n        if (!changetype<usize>(value)) throw new Error(E_HOLEYARRAY);\n      }\n    }\n    return value;\n  }\n\n  @unsafe @operator(\"{}\") private __uget(index: i32): T {\n    return load<T>(this.dataStart + (<usize>index << alignof<T>()));\n  }\n\n  @operator(\"[]=\") private __set(index: i32, value: T): void {\n    if (<u32>index >= <u32>this.length_) {\n      if (index < 0) throw new RangeError(E_INDEXOUTOFRANGE);\n      ensureCapacity(changetype<usize>(this), index + 1, alignof<T>());\n      this.length_ = index + 1;\n    }\n    this.__uset(index, value);\n  }\n\n  @unsafe @operator(\"{}=\") private __uset(index: i32, value: T): void {\n    store<T>(this.dataStart + (<usize>index << alignof<T>()), value);\n    if (isManaged<T>()) {\n      __link(changetype<usize>(this), changetype<usize>(value), true);\n    }\n  }\n\n  at(index: i32): T {\n    var len = this.length_;\n    index += select(0, len, index >= 0);\n    if (<u32>index >= <u32>len) throw new RangeError(E_INDEXOUTOFRANGE);\n    var value = load<T>(this.dataStart + (<usize>index << alignof<T>()));\n    if (isReference<T>()) {\n      if (!isNullable<T>()) {\n        if (!changetype<usize>(value)) throw new Error(E_HOLEYARRAY);\n      }\n    }\n    return value;\n  }\n\n  fill(value: T, start: i32 = 0, end: i32 = i32.MAX_VALUE): this {\n    var ptr = this.dataStart;\n    var len = this.length_;\n    start = start < 0 ? max(len + start, 0) : min(start, len);\n    end   = end   < 0 ? max(len + end,   0) : min(end,   len);\n    if (isManaged<T>()) {\n      for (; start < end; ++start) {\n        store<usize>(ptr + (<usize>start << alignof<T>()), changetype<usize>(value));\n        __link(changetype<usize>(this), changetype<usize>(value), true);\n      }\n    } else if (sizeof<T>() == 1) {\n      if (start < end) {\n        memory.fill(\n          ptr + <usize>start,\n          u8(value),\n          <usize>(end - start)\n        );\n      }\n    } else {\n      for (; start < end; ++start) {\n        store<T>(ptr + (<usize>start << alignof<T>()), value);\n      }\n    }\n    return this;\n  }\n\n  includes(value: T, fromIndex: i32 = 0): bool {\n    if (isFloat<T>()) {\n      let len = this.length_;\n      if (len == 0 || fromIndex >= len) return false;\n      if (fromIndex < 0) fromIndex = max(len + fromIndex, 0);\n      let ptr = this.dataStart;\n      while (fromIndex < len) {\n        let elem = load<T>(ptr + (<usize>fromIndex << alignof<T>()));\n        // @ts-ignore\n        if (elem == value || isNaN(elem) & isNaN(value)) return true;\n        ++fromIndex;\n      }\n      return false;\n    } else {\n      return this.indexOf(value, fromIndex) >= 0;\n    }\n  }\n\n  indexOf(value: T, fromIndex: i32 = 0): i32 {\n    var len = this.length_;\n    if (len == 0 || fromIndex >= len) return -1;\n    if (fromIndex < 0) fromIndex = max(len + fromIndex, 0);\n    var ptr = this.dataStart;\n    while (fromIndex < len) {\n      if (load<T>(ptr + (<usize>fromIndex << alignof<T>())) == value) return fromIndex;\n      ++fromIndex;\n    }\n    return -1;\n  }\n\n  lastIndexOf(value: T, fromIndex: i32 = this.length_): i32 {\n    var len = this.length_;\n    if (len == 0) return -1;\n    if (fromIndex < 0) fromIndex = len + fromIndex;\n    else if (fromIndex >= len) fromIndex = len - 1;\n    var ptr = this.dataStart;\n    while (fromIndex >= 0) {\n      if (load<T>(ptr + (<usize>fromIndex << alignof<T>())) == value) return fromIndex;\n      --fromIndex;\n    }\n    return -1;\n  }\n\n  push(value: T): i32 {\n    var oldLen = this.length_;\n    var len = oldLen + 1;\n    ensureCapacity(changetype<usize>(this), len, alignof<T>());\n    if (isManaged<T>()) {\n      store<usize>(this.dataStart + (<usize>oldLen << alignof<T>()), changetype<usize>(value));\n      __link(changetype<usize>(this), changetype<usize>(value), true);\n    } else {\n      store<T>(this.dataStart + (<usize>oldLen << alignof<T>()), value);\n    }\n    this.length_ = len;\n    return len;\n  }\n\n  concat(other: Array<T>): Array<T> {\n    var thisLen = this.length_;\n    var otherLen = select(0, other.length_, other === null);\n    var outLen = thisLen + otherLen;\n    if (<u32>outLen > <u32>BLOCK_MAXSIZE >>> alignof<T>()) throw new Error(E_INVALIDLENGTH);\n    var out = changetype<Array<T>>(__newArray(outLen, alignof<T>(), idof<Array<T>>()));\n    var outStart = out.dataStart;\n    var thisSize = <usize>thisLen << alignof<T>();\n    if (isManaged<T>()) {\n      let thisStart = this.dataStart;\n      for (let offset: usize = 0; offset < thisSize; offset += sizeof<T>()) {\n        let ref = load<usize>(thisStart + offset);\n        store<usize>(outStart + offset, ref);\n        __link(changetype<usize>(out), ref, true);\n      }\n      outStart += thisSize;\n      let otherStart = other.dataStart;\n      let otherSize = <usize>otherLen << alignof<T>();\n      for (let offset: usize = 0; offset < otherSize; offset += sizeof<T>()) {\n        let ref = load<usize>(otherStart + offset);\n        store<usize>(outStart + offset, ref);\n        __link(changetype<usize>(out), ref, true);\n      }\n    } else {\n      memory.copy(outStart, this.dataStart, thisSize);\n      memory.copy(outStart + thisSize, other.dataStart, <usize>otherLen << alignof<T>());\n    }\n    return out;\n  }\n\n  copyWithin(target: i32, start: i32, end: i32 = i32.MAX_VALUE): this {\n    var ptr = this.dataStart;\n    var len = this.length_;\n\n    end = min<i32>(end, len);\n\n    var to    = target < 0 ? max(len + target, 0) : min(target, len);\n    var from  = start < 0 ? max(len + start, 0) : min(start, len);\n    var last  = end < 0 ? max(len + end, 0) : min(end, len);\n    var count = min(last - from, len - to);\n\n    memory.copy( // is memmove\n      ptr + (<usize>to << alignof<T>()),\n      ptr + (<usize>from << alignof<T>()),\n      <usize>count << alignof<T>()\n    );\n    return this;\n  }\n\n  pop(): T {\n    var len = this.length_;\n    if (len < 1) throw new RangeError(E_EMPTYARRAY);\n    var val = load<T>(this.dataStart + (<usize>(--len) << alignof<T>()));\n    this.length_ = len;\n    return val;\n  }\n\n  forEach(fn: (value: T, index: i32, array: Array<T>) => void): void {\n    for (let i = 0, len = this.length_; i < min(len, this.length_); ++i) {\n      fn(load<T>(this.dataStart + (<usize>i << alignof<T>())), i, this);\n    }\n  }\n\n  map<U>(fn: (value: T, index: i32, array: Array<T>) => U): Array<U> {\n    var len = this.length_;\n    var out = changetype<Array<U>>(__newArray(len, alignof<U>(), idof<Array<U>>()));\n    var outStart = out.dataStart;\n    for (let i = 0; i < min(len, this.length_); ++i) {\n      let result = fn(load<T>(this.dataStart + (<usize>i << alignof<T>())), i, this);\n      store<U>(outStart + (<usize>i << alignof<U>()), result);\n      if (isManaged<U>()) {\n        __link(changetype<usize>(out), changetype<usize>(result), true);\n      }\n    }\n    return out;\n  }\n\n  filter(fn: (value: T, index: i32, array: Array<T>) => bool): Array<T> {\n    var result = changetype<Array<T>>(__newArray(0, alignof<T>(), idof<Array<T>>()));\n    for (let i = 0, len = this.length_; i < min(len, this.length_); ++i) {\n      let value = load<T>(this.dataStart + (<usize>i << alignof<T>()));\n      if (fn(value, i, this)) result.push(value);\n    }\n    return result;\n  }\n\n  reduce<U>(\n    fn: (previousValue: U, currentValue: T, currentIndex: i32, array: Array<T>) => U,\n    initialValue: U\n  ): U {\n    var acc = initialValue;\n    for (let i = 0, len = this.length_; i < min(len, this.length_); ++i) {\n      acc = fn(acc, load<T>(this.dataStart + (<usize>i << alignof<T>())), i, this);\n    }\n    return acc;\n  }\n\n  reduceRight<U>(\n    fn: (previousValue: U, currentValue: T, currentIndex: i32, array: Array<T>) => U,\n    initialValue: U\n  ): U {\n    var acc = initialValue;\n    for (let i = this.length_ - 1; i >= 0; --i) {\n      acc = fn(acc, load<T>(this.dataStart + (<usize>i << alignof<T>())), i, this);\n    }\n    return acc;\n  }\n\n  shift(): T {\n    var len = this.length_;\n    if (len < 1) throw new RangeError(E_EMPTYARRAY);\n    var base = this.dataStart;\n    var element = load<T>(base);\n    var lastIndex = len - 1;\n    memory.copy(\n      base,\n      base + sizeof<T>(),\n      <usize>lastIndex << alignof<T>()\n    );\n    if (isReference<T>()) {\n      store<usize>(base + (<usize>lastIndex << alignof<T>()), 0);\n    } else {\n      // @ts-ignore\n      store<T>(base + (<usize>lastIndex << alignof<T>()), <T>0);\n    }\n    this.length_ = lastIndex;\n    return element;\n  }\n\n  some(fn: (value: T, index: i32, array: Array<T>) => bool): bool {\n    for (let i = 0, len = this.length_; i < min(len, this.length_); ++i) {\n      if (fn(load<T>(this.dataStart + (<usize>i << alignof<T>())), i, this)) return true;\n    }\n    return false;\n  }\n\n  unshift(value: T): i32 {\n    var len = this.length_ + 1;\n    ensureCapacity(changetype<usize>(this), len, alignof<T>());\n    var ptr = this.dataStart;\n    memory.copy(\n      ptr + sizeof<T>(),\n      ptr,\n      <usize>(len - 1) << alignof<T>()\n    );\n    store<T>(ptr, value);\n    if (isManaged<T>()) {\n      __link(changetype<usize>(this), changetype<usize>(value), true);\n    }\n    this.length_ = len;\n    return len;\n  }\n\n  slice(start: i32 = 0, end: i32 = i32.MAX_VALUE): Array<T> {\n    var len = this.length_;\n    start = start < 0 ? max(start + len, 0) : min(start, len);\n    end   = end   < 0 ? max(end   + len, 0) : min(end  , len);\n    len = max(end - start, 0);\n    var slice = changetype<Array<T>>(__newArray(len, alignof<T>(), idof<Array<T>>()));\n    var sliceBase = slice.dataStart;\n    var thisBase = this.dataStart + (<usize>start << alignof<T>());\n    if (isManaged<T>()) {\n      let off = <usize>0;\n      let end = <usize>len << alignof<usize>();\n      while (off < end) {\n        let ref = load<usize>(thisBase + off);\n        store<usize>(sliceBase + off, ref);\n        __link(changetype<usize>(slice), ref, true);\n        off += sizeof<usize>();\n      }\n    } else {\n      memory.copy(sliceBase, thisBase, len << alignof<T>());\n    }\n    return slice;\n  }\n\n  splice(start: i32, deleteCount: i32 = i32.MAX_VALUE): Array<T> {\n    var len = this.length_;\n    start       = start < 0 ? max<i32>(len + start, 0) : min<i32>(start, len);\n    deleteCount = max<i32>(min<i32>(deleteCount, len - start), 0);\n    var result  = changetype<Array<T>>(__newArray(deleteCount, alignof<T>(), idof<Array<T>>()));\n    var resultStart = result.dataStart;\n    var thisStart = this.dataStart;\n    var thisBase  = thisStart + (<usize>start << alignof<T>());\n    memory.copy(\n      resultStart,\n      thisBase,\n      <usize>deleteCount << alignof<T>()\n    );\n    var offset = start + deleteCount;\n    if (len != offset) {\n      memory.copy(\n        thisBase,\n        thisStart + (<usize>offset << alignof<T>()),\n        <usize>(len - offset) << alignof<T>()\n      );\n    }\n    this.length_ = len - deleteCount;\n    return result;\n  }\n\n  reverse(): this {\n    REVERSE<T>(this.dataStart, this.length_);\n    return this;\n  }\n\n  sort(comparator: (a: T, b: T) => i32 = COMPARATOR<T>()): this {\n    SORT<T>(this.dataStart, this.length_, comparator);\n    return this;\n  }\n\n  join(separator: string = \",\"): string {\n    var ptr = this.dataStart;\n    var len = this.length_;\n    if (isBoolean<T>())   return joinBooleanArray(ptr, len, separator);\n    if (isInteger<T>())   return joinIntegerArray<T>(ptr, len, separator);\n    if (isFloat<T>())     return joinFloatArray<T>(ptr, len, separator);\n\n    if (ASC_SHRINK_LEVEL < 1) {\n      if (isString<T>())  return joinStringArray(ptr, len, separator);\n    }\n    // For rest objects and arrays use general join routine\n    if (isReference<T>()) return joinReferenceArray<T>(ptr, len, separator);\n    ERROR(\"unspported element type\");\n    return <string>unreachable();\n  }\n\n  flat(): T {\n    if (!isArray<T>()) {\n      throw new TypeError(E_ILLEGALGENTYPE);\n    }\n    // Get the length and data start values\n    var ptr = this.dataStart;\n    var len = this.length_;\n\n    // calculate the end size with an initial pass\n    var size = 0;\n    for (let i = 0; i < len; ++i) {\n      let child = load<usize>(ptr + (i << alignof<T>()));\n      size += child == 0 ? 0 : load<i32>(child, offsetof<T>(\"length_\"));\n    }\n\n    // calculate the byteLength of the resulting backing ArrayBuffer\n    const align = alignof<valueof<T>>();\n    var byteLength = <usize>size << align;\n    var outBuffer = changetype<ArrayBuffer>(__new(byteLength, idof<ArrayBuffer>()));\n\n    // create the return value and initialize it\n    var outArray = changetype<T>(__new(offsetof<T>(), idof<T>()));\n    store<i32>(changetype<usize>(outArray), size, offsetof<T>(\"length_\"));\n\n    // byteLength, dataStart, and buffer are all readonly\n    store<i32>(changetype<usize>(outArray), byteLength, offsetof<T>(\"byteLength\"));\n    store<usize>(changetype<usize>(outArray), changetype<usize>(outBuffer), offsetof<T>(\"dataStart\"));\n    store<usize>(changetype<usize>(outArray), changetype<usize>(outBuffer), offsetof<T>(\"buffer\"));\n    __link(changetype<usize>(outArray), changetype<usize>(outBuffer), false);\n\n    // set the elements\n    var resultOffset: usize = 0;\n    for (let i = 0; i < len; ++i) { // for each child\n      let child = load<usize>(ptr + (<usize>i << alignof<T>()));\n\n      // ignore null arrays\n      if (!child) continue;\n\n      // copy the underlying buffer data to the result buffer\n      let childDataLength = <usize>load<i32>(child, offsetof<T>(\"length_\")) << align;\n      memory.copy(\n        changetype<usize>(outBuffer) + resultOffset,\n        load<usize>(child, offsetof<T>(\"dataStart\")),\n        childDataLength\n      );\n\n      // advance the result length\n      resultOffset += childDataLength;\n    }\n\n    // if the `valueof<T>` type is managed, we must link each reference\n    if (isManaged<valueof<T>>()) {\n      for (let i = 0; i < size; ++i) {\n        let ref = load<usize>(changetype<usize>(outBuffer) + (<usize>i << usize(alignof<valueof<T>>())));\n        __link(changetype<usize>(outBuffer), ref, true);\n      }\n    }\n\n    return outArray;\n  }\n\n  toString(): string {\n    return this.join();\n  }\n\n  // RT integration\n\n  @unsafe private __visit(cookie: u32): void {\n    if (isManaged<T>()) {\n      let cur = this.dataStart;\n      let end = cur + (<usize>this.length_ << alignof<T>());\n      while (cur < end) {\n        let val = load<usize>(cur);\n        if (val) __visit(val, cookie);\n        cur += sizeof<usize>();\n      }\n    }\n    __visit(changetype<usize>(this.buffer), cookie);\n  }\n}\n","import { itoa32, utoa32, itoa64, utoa64, dtoa } from \"./util/number\";\nimport { strtol } from \"./util/string\";\n\n// @ts-ignore: decorator\n@builtin @inline\nexport const NaN: f64 = 0 / 0;\n\n// @ts-ignore: decorator\n@builtin @inline\nexport const Infinity: f64 = 1 / 0;\n\n// @ts-ignore: decorator\n@builtin\nexport declare function isNaN<T extends number>(value: T): bool;\n\n// @ts-ignore: decorator\n@builtin\nexport declare function isFinite<T extends number>(value: T): bool;\n\n@final @unmanaged\nexport abstract class I8 {\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly MIN_VALUE: i8 = i8.MIN_VALUE;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly MAX_VALUE: i8 = i8.MAX_VALUE;\n\n  static parseInt(value: string, radix: i32 = 0): i8 {\n    return <i8>strtol<i32>(value, radix);\n  }\n\n  toString(this: i8, radix: i32 = 10): String {\n    return itoa32(this, radix);\n  }\n}\n\n@final @unmanaged\nexport abstract class I16 {\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly MIN_VALUE: i16 = i16.MIN_VALUE;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly MAX_VALUE: i16 = i16.MAX_VALUE;\n\n  static parseInt(value: string, radix: i32 = 0): i16 {\n    return <i16>strtol<i32>(value, radix);\n  }\n\n  toString(this: i16, radix: i32 = 10): String {\n    return itoa32(this, radix);\n  }\n}\n\n@final @unmanaged\nexport abstract class I32 {\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly MIN_VALUE: i32 = i32.MIN_VALUE;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly MAX_VALUE: i32 = i32.MAX_VALUE;\n\n  static parseInt(value: string, radix: i32 = 0): i32 {\n    return <i32>strtol<i32>(value, radix);\n  }\n\n  toString(this: i32, radix: i32 = 10): String {\n    return itoa32(this, radix);\n  }\n}\n\n@final @unmanaged\nexport abstract class I64 {\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly MIN_VALUE: i64 = i64.MIN_VALUE;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly MAX_VALUE: i64 = i64.MAX_VALUE;\n\n  static parseInt(value: string, radix: i32 = 0): i64 {\n    return strtol<i64>(value, radix);\n  }\n\n  toString(this: i64, radix: i32 = 10): String {\n    return itoa64(this, radix);\n  }\n}\n\n@final @unmanaged\nexport abstract class Isize {\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly MIN_VALUE: isize = isize.MIN_VALUE;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly MAX_VALUE: isize = isize.MAX_VALUE;\n\n  static parseInt(value: string, radix: i32 = 0): isize {\n    return <isize>strtol<i64>(value, radix);\n  }\n\n  toString(this: isize, radix: i32 = 10): String {\n    if (sizeof<isize>() == 4) {\n      return itoa32(<i32>this, radix);\n    } else {\n      return itoa64(<i64>this, radix);\n    }\n  }\n}\n\n@final @unmanaged\nexport abstract class U8 {\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly MIN_VALUE: u8 = u8.MIN_VALUE;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly MAX_VALUE: u8 = u8.MAX_VALUE;\n\n  static parseInt(value: string, radix: i32 = 0): u8 {\n    return <u8>strtol<i32>(value, radix);\n  }\n\n  toString(this: u8, radix: i32 = 10): String {\n    return utoa32(this, radix);\n  }\n}\n\n@final @unmanaged\nexport abstract class U16 {\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly MIN_VALUE: u16 = u16.MIN_VALUE;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly MAX_VALUE: u16 = u16.MAX_VALUE;\n\n  static parseInt(value: string, radix: i32 = 0): u16 {\n    return <u16>strtol<i32>(value, radix);\n  }\n\n  toString(this: u16, radix: i32 = 10): String {\n    return utoa32(this, radix);\n  }\n}\n\n@final @unmanaged\nexport abstract class U32 {\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly MIN_VALUE: u32 = u32.MIN_VALUE;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly MAX_VALUE: u32 = u32.MAX_VALUE;\n\n  static parseInt(value: string, radix: i32 = 0): u32 {\n    return <u32>strtol<i32>(value, radix);\n  }\n\n  toString(this: u32, radix: i32 = 10): String {\n    return utoa32(this, radix);\n  }\n}\n\n@final @unmanaged\nexport abstract class U64 {\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly MIN_VALUE: u64 = u64.MIN_VALUE;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly MAX_VALUE: u64 = u64.MAX_VALUE;\n\n  static parseInt(value: string, radix: i32 = 0): u64 {\n    return <u64>strtol<i64>(value, radix);\n  }\n\n  toString(this: u64, radix: i32 = 10): String {\n    return utoa64(this, radix);\n  }\n}\n\n@final @unmanaged\nexport abstract class Usize {\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly MIN_VALUE: usize = usize.MIN_VALUE;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly MAX_VALUE: usize = usize.MAX_VALUE;\n\n  static parseInt(value: string, radix: i32 = 0): usize {\n    return <usize>strtol<i64>(value, radix);\n  }\n\n  toString(this: usize, radix: i32 = 10): String {\n    if (sizeof<usize>() == 4) {\n      return utoa32(<u32>this, radix);\n    } else {\n      return utoa64(<u64>this, radix);\n    }\n  }\n}\n\n@final @unmanaged\nexport abstract class Bool {\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly MIN_VALUE: bool = bool.MIN_VALUE;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly MAX_VALUE: bool = bool.MAX_VALUE;\n\n  toString(this: bool, radix: i32 = 0): String {\n    return this ? \"true\" : \"false\";\n  }\n}\n\nexport { Bool as Boolean };\n\n@final @unmanaged\nexport abstract class F32 {\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly EPSILON: f32 = f32.EPSILON;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly MIN_VALUE: f32 = f32.MIN_VALUE;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly MAX_VALUE: f32 = f32.MAX_VALUE;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly MIN_SAFE_INTEGER: f32 = f32.MIN_SAFE_INTEGER;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly MAX_SAFE_INTEGER: f32 = f32.MAX_SAFE_INTEGER;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly POSITIVE_INFINITY: f32 = f32.POSITIVE_INFINITY;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly NEGATIVE_INFINITY: f32 = f32.NEGATIVE_INFINITY;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly NaN: f32 = f32.NaN;\n\n  static isNaN(value: f32): bool {\n    return isNaN<f32>(value);\n  }\n\n  static isFinite(value: f32): bool {\n    return isFinite<f32>(value);\n  }\n\n  static isSafeInteger(value: f32): bool {\n    return abs<f32>(value) <= f32.MAX_SAFE_INTEGER && trunc<f32>(value) == value;\n  }\n\n  static isInteger(value: f32): bool {\n    return isFinite<f32>(value) && trunc<f32>(value) == value;\n  }\n\n  static parseInt(value: string, radix: i32 = 0): f32 {\n    return <f32>strtol<f64>(value, radix);\n  }\n\n  static parseFloat(value: string): f32 {\n    return <f32>parseFloat(value);\n  }\n\n  toString(this: f32, radix: i32 = 0): String {\n    return dtoa(this);\n  }\n}\n\n@final @unmanaged\nexport abstract class F64 {\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly EPSILON: f64 = f64.EPSILON;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly MIN_VALUE: f64 = f64.MIN_VALUE;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly MAX_VALUE: f64 = f64.MAX_VALUE;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly MIN_SAFE_INTEGER: f64 = f64.MIN_SAFE_INTEGER;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly MAX_SAFE_INTEGER: f64 = f64.MAX_SAFE_INTEGER;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly POSITIVE_INFINITY: f64 = f64.POSITIVE_INFINITY;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly NEGATIVE_INFINITY: f64 = f64.NEGATIVE_INFINITY;\n\n  // @ts-ignore: decorator\n  @lazy\n  static readonly NaN: f64 = f64.NaN;\n\n  static isNaN(value: f64): bool {\n    return isNaN<f64>(value);\n  }\n\n  static isFinite(value: f64): bool {\n    return isFinite<f64>(value);\n  }\n\n  static isSafeInteger(value: f64): bool {\n    return abs<f64>(value) <= f64.MAX_SAFE_INTEGER && trunc<f64>(value) == value;\n  }\n\n  static isInteger(value: f64): bool {\n    return isFinite<f64>(value) && trunc<f64>(value) == value;\n  }\n\n  static parseInt(value: string, radix: i32 = 0): f64 {\n    return strtol<f64>(value, radix);\n  }\n\n  static parseFloat(value: string): f64 {\n    return parseFloat(value);\n  }\n\n  toString(this: f64, radix: i32 = 0): String {\n    return dtoa(this);\n  }\n}\n\nexport { F64 as Number };\n"]}